#+TITLE: Personal Emacs Configuration
#+PROPERTY: header-args:emacs-lisp :tangle ../C01_EmacsConfiguration/.emacs.d/init.el :mkdirp yes
#+auto_tangle: t
#+STARTUP: hideblocks show2levels

* Introduction

This is my personal [[id:3cf0fa83-18b3-4206-a109-f4606a94b8c1][Emacs Configuration]] and therefore its geared towards my needs.
It is not meant as a prime example or template nor is it aimed to be a general purpose setup.

Feel free to adopt parts that you find useful.
A big chunk of the Configuration was inspired by the ~Emacs From Scratch Youtube-Series~ from [[https://systemcrafters.net/emacs-from-scratch/][SystemCrafters.net]], which i highly recommend as a starting point to [[id:3cf0fa83-18b3-4206-a109-f4606a94b8c1][Configuring Emacs]]. I added and changed alot however since starting out.

Another good source is [[https://protesilaos.com/emacs/dotemacs][Protesilaos.com: Dotemacs]], which i took inspiration from for the [[*Capture Templates][Org Capture Templates]].
 
** Starting Emacs Daemon

To get the best out of [[id:3cf0fa83-18b3-4206-a109-f4606a94b8c1][Emacs]], it's recommended to use the ~Daemon Capabilities~ it offers. This *might slow down your system Startup* time, but it definitely *significantly increases* [[id:3cf0fa83-18b3-4206-a109-f4606a94b8c1][Emacs]] ~Startup Time~ if you connect to the server with the =emacsclient= [[id:bf9b9431-2e38-411a-904f-c5b0c913520d][command]].

If you want to *startup* the [[id:0e90f8b7-dd79-42fd-928f-c6b2ff4a63a2][Emacs Daemon]] automatically and your ~System~ makes use of [[id:c0a74747-b48a-49a4-ae88-a612f27a3b28][systemd]], simply create the file =emacs.service= under =~/.config/systemd/user/= with the following contents:
#+begin_src shell
  [Unit]
  Description=Emacs - The extensibles, customizable, self-documenting Editor
  Documentation=info:emacs man:emacs(1) https://gnu.org/software/emacs/

  [Service]
  Type=forking
  ExecStart=/usr/local/bin/emacs --daemon
  ExecStop=/usr/local/bin/emacsclient --eval "(kill-emacs)"
  Environment=SSH_AUTH_SOCK=%t/keyring/ssh
  Restart=on-failure

  [Install]
  WantedBy=default.target
#+end_src

After that run

#+begin_src shell
  systemctl enable --user emacs
#+end_src

so [[id:c0a74747-b48a-49a4-ae88-a612f27a3b28][systemd]] would copy the ~configuration file~ into central places and it would start ~Emacs~ service at boot time.

To run Emacs service right now, use

#+begin_src shell
  systemctl start --user emacs
#+end_src

* Initial Section
** Header
#+begin_src emacs-lisp

  ;;   _____ __  __    _    ____ ____  
  ;;  | ____|  \/  |  / \  / ___/ ___| 
  ;;  |  _| | |\/| | / _ \| |   \___ \ 
  ;;  | |___| |  | |/ ___ \ |___ ___) |
  ;;  |_____|_|  |_/_/   \_\____|____/ 
  ;;                                   

  ;; NOTE: init.el is generated from EmacsTestConfig.org.
  ;; Please change your settings in that file
  ;; using Emacs and init.el will be generated automatically!

#+end_src
** Setting Up Needed Variables
#+begin_src emacs-lisp
  ;; Setting Variables
  ;; for better customization and readability


  ;; Save Home Dir for later use
  (setq pet/home-dir
    (convert-standard-filename
     (expand-file-name "~/")))

  ;; Save Dotfiles Dir for later use
  (setq pet/dotfiles-dir
    (concat pet/home-dir
        (convert-standard-filename
         ".dotfiles/")))

  ;; Save Template Dir for later use
  (setq pet/temp-dir
    (concat pet/home-dir
        (convert-standard-filename
         "Templates/")))

  ;; Save Emacs Template Dir for later use
  (setq pet/latex-header-temp-dir
    (concat pet/temp-dir
        (convert-standard-filename
         "X2_LaTeX_Templates/00-Headers/")))

  (setq pet/dotfiles-emacsconfig-dir
      (concat pet/dotfiles-dir
          (convert-standard-filename
           "C01_EmacsConfiguration/")))

  ;; Adjust font size to match your system
  (defvar pet/default-font-size 140)
  (defvar pet/default-variable-font-size 120)

#+end_src
*** Setting Up the Environment Variables

This section is normally not needed
#+begin_src emacs-lisp :tangle no
  ;; Add sbin to PATH as well
  (setenv "PATH" (concat (getenv "PATH") "/usr/local/sbin"))
  (setq exec-path (append exec-path '("/usr/local/sbin")))

  ;; Add Texlive binaries
  ;; Path of texlive binaries
  (setq pet/texlive-dir "/usr/local/texlive/current/bin/x86_64-linux")
  ;; Add texlive binaries if installed (should be in front)
  (when (file-directory-p pet/texlive-dir)
      (setenv "PATH" (concat pet/texlive-dir (getenv "PATH")))
      (setq exec-path (append (list pet/texlive-dir) exec-path))
      )

  ;; Add user local binaries
  (setq pet/user-bin-dir
        (concat pet/home-dir
                (convert-standard-filename ".local/bin")))
  ;; Add user local binaries if installed (should be in front)
  (when (file-directory-p pet/user-bin-dir)
    (setenv "PATH" (concat pet/user-bin-dir (getenv "PATH")))
    (setq exec-path (append (list pet/user-bin-dir) exec-path))
    )

#+end_src
** Setting Up Needed Functions

These are some helpful [[id:b013a0d9-c9b0-40e5-8206-fcc68f8752fb][Functions]] to be used in [[id:89a73091-1048-4a87-b014-ecb5d774e9f8][Emacs]]
*** Color Helper Functions 
#+begin_src emacs-lisp
  ;; Returns the color substring from given range
  (defun pet/substring-from-range (str range)
    "Return substring from a given STR by specified RANGE"
    (substring str (first range) (second range)))

  ;; Return a range for specified colorchannel in a 6-digit
  ;; hexnumber
  (defun pet/colorchannel-into-range (color)
    "Returns the range to look for a specified color.
    Inputs must be in 'rgbRGB' " 
    (setq color (s-lower-camel-case color))
    (cond ((equal color "r") '(1 3))
      ((equal color "g") '(3 5))
      ((equal color "b") '(5 7))))

  ;; Return the substring for a specified
  (defun pet/colorsubstr-from-colorstr (colorstr colorchannel)
    "Returns the channelstr of the specified colorchannel from
     colorstrings like「#011f00」"
    (setq range (pet/colorchannel-into-range colorchannel))
    (pet/substring-from-range colorstring range))

  ;; Return the value of a specified colorchannel
  (defun pet/number-from-string-by-channel
      (colorstring colorchannel)
    "Returns the numeric value of the specified colorchannel from
     colorstrings like「#011f00」"
    (string-to-number
    (pet/colorsubstr-from-colorstr
     (colorstr colorchannel)) 16))

  ;; Calculate Color average across channels from colorstr
  (defun pet/avg-color (color)
    "Calculates the Color Average from COLOR"
    (/ (+ (pet/number-from-string-by-channel color "r")
      (pet/number-from-string-by-channel color "g")
      (pet/number-from-string-by-channel color "b"))
       3))

  ;; Returns a Color that contrasts background
  (defun pet/contrast-color (bg-avg-decimal)
    "Returns the foreground color based on the avg background 
    being below 128. Returns White 「#000000」 if average is
    above"
    (if (> bg-avg-decimal 128) "#000000" "#ffffff"))

  ;; Takes a color string like #ffe0e0 and returns a light
  ;; or dark foreground color to make sure text is readable.
  (defun pet/fg-from-bg (bg)
    "Returns the foreground color based on the avg background
     being below 128. Returns White 「#000000」 if average is
     above"
    (setq avg (pet/avg-color bg))
    (pet/contrast-color avg))
  
#+end_src
*** Syntax Color Background RGB Format
#+begin_src emacs-lisp
  ;; Function to Color Hexstring with their corresponding Colors
  ;; in RGB format
  (defun pet/syntax-color-rgb ()
    "Syntax color text of the form 「#ff1100」 and 「#abc」 in
    current buffer."
    (interactive)
    (font-lock-add-keywords
     nil
     '(("#[ABCDEFabcdef0-9]\\{3\\}[^ABCDEFabcdef0-9]"
	(0 (put-text-property
	    (match-beginning 0)
	    (match-end 0)
	    'face (list
		   :background (let* (
		    (ms (match-string-no-properties 0))
		    (r (pet/colorsubstr-from-colorstr bgstr "r"))
		    (g (pet/colorsubstr-from-colorstr bgstr "g"))
		    (b (pet/colorsubstr-from-colorstr bgstr "b"))
			       )
		    (concat "#" r r g g b b))))))
       ("#[ABCDEFabcdef0-9]\\{6\\}"
	(0 (put-text-property
	    (match-beginning 0)
	    (match-end 0)
	    'face (list :background
			(match-string-no-properties 0)))))))
    (font-lock-flush))
#+end_src
*** Syntax Color Background HSL Format
#+begin_src emacs-lisp
  ;; Function to Colorstring with their corresponding Colors
  ;; in HSL format
  (defun pet/syntax-color-hsl ()
    "Syntax color CSS's HSL color spec eg 「hsl(0,90%,41%)」 in
    current buffer."
    (interactive)
    (require 'color)
    (font-lock-add-keywords
     nil
     '(("hsl( *\\([0-9]\\{1,3\\}\\) *, *\\([0-9]\\{1,3\\}\\)% *,
      ,*\\([0-9]\\{1,3\\}\\)% *)"
    (0 (put-text-property
        (+ (match-beginning 0) 3)
        (match-end 0)
        'face
        (list
         :background
         (concat
          "#"
          (mapconcat
           'identity
           (mapcar
        (lambda (x) (format "%02x" (round (* x 255))))
        (color-hsl-to-rgb
         (/ (string-to-number (match-string-no-properties 1)) 360.0)
         (/ (string-to-number (match-string-no-properties 2)) 100.0)
         (/ (string-to-number (match-string-no-properties 3)) 100.0)))
           "" )) ;  "#00aa00"
         ))))))
    (font-lock-flush))
  
#+end_src
*** Random Color
#+begin_src emacs-lisp
  ;; Function to insert a random color in HSL format
  (defun pet/insert-random-color-hsl ()
    "Insert a random color string of CSS HSL format.
    Sample output: hsl(100,24%,82%);"
    (interactive)
    (insert (format "hsl(%d,%d%%,%d%%);"
            (random 360) (random 100) (random 100))))
  
#+end_src

* Package System Setup

Emacs has a built in package manager but it doesn't make it easy to automatically install packages on a new system the first time you pull down your configuration.  [[https://github.com/jwiegley/use-package][use-package]] is a really helpful package used in this configuration to make it a lot easier to automate the installation and configuration of everything else we use.

We also use ~straight.el~ to manage our packages instead of ~package.el~, because it allows for more detailed customization and enables more streamlined installation of packages from ~github~ or ~gitLab~, that are not yet part of *elpa* or *melpa*.
The *bootstrap* script is needed to install straight.el without the need for package.el. It should work cross platform without the need to update anytime soon. It's recommended by the authors to use. If straight.el is already installed, the script won't run again!
A guide from ~System Crafters~ to =straight.el= can be found [[https://systemcrafters.cc/advanced-package-management/using-straight-el/][here]].

If you set up ~straight.el~ with ~use-package~ (straight-use-package 'use-package) you have to replace =:ensure= with =:straight=

#+begin_src emacs-lisp

  ;; bootstrap script to install straight.el
  (defvar bootstrap-version)
  (let ((bootstrap-file
     (expand-file-name "straight/repos/straight.el/bootstrap.el" user-emacs-directory))
    (bootstrap-version 5))
    (unless (file-exists-p bootstrap-file)
      (with-current-buffer
      (url-retrieve-synchronously
       "https://raw.githubusercontent.com/raxod502/straight.el/develop/install.el"
       'silent 'inhibit-cookies)
    (goto-char (point-max))
    (eval-print-last-sexp)))
    (load bootstrap-file nil 'nomessage))

  ;; Use straight.el for use-package expressions
  (straight-use-package 'use-package)

  ;; Make sure to always install packages (pendant to use-package-always-ensure)
  (setq straight-use-package-by-default t)

  ;; This is set just to be able to lookup packages
  ;; It's not required since we use straight anyway
  (setq package-archives
    '(("melpa" . "https://melpa.org/packages/")
      ("melpa-stable" . "https://stable.melpa.org/packages/")
      ("org" . "https://orgmode.org/elpa/")
      ("elpa" . "https://elpa.gnu.org/packages/")))
  
#+end_src

** Early Load Org Mode
This is done to mitigate the ~Version Mismatch Error~, see ~NOTE~ below
#+begin_src emacs-lisp
  ;; Early load Org Mode
  (use-package org)

#+end_src
:NOTE:
Version mismatch is commonly encountered in the following situations:

1. Emacs is loaded using literate Org config and more recent Org
   version is loaded inside the file loaded by ‘org-babel-load-file’.
   ‘org-babel-load-file’ triggers the built-in Org version clashing
   the newer Org version attempt to be loaded later.

   It is recommended to move the Org loading code before the
   ‘org-babel-load-file’ call.

2. New Org version is loaded manually by setting ‘load-path’, but some
   other package depending on Org is loaded before the ‘load-path’ is
   configured.
   This "other package" is triggering built-in Org version, again
   causing the version mismatch.

   It is recommended to set ‘load-path’ as early in the config as
   possible.

3. New Org version is loaded using straight.el package manager and
   other package depending on Org is loaded before straight triggers
   loading of the newer Org version.

   It is recommended to put

    (straight-use-package 'org)

   early in the config.  Ideally, right after the straight.el
   bootstrap.  Moving ‘use-package’ :straight declaration may not be
   sufficient if the corresponding ‘use-package’ statement is
   deferring the loading.
:END:
** Set Load Path Early
#+begin_src emacs-lisp
  ;; Set mu4e directory path
  (if (file-directory-p (concat pet/home-dir "/Projects/Programs/github-gitlab/mu/build/mu4e"))
	  (setq pet/mu4e-load-path "/usr/share/emacs/site-lisp/mu4e")
	(if (file-directory-p "/usr/share/emacs/site-lisp/mu4e")
	(setq pet/mu4e-load-path "/usr/share/emacs/site-lisp/mu4e")
	  (if (file-directory-p "/usr/share/emacs/site-lisp/mu/mu4e")
	  (setq pet/mu4e-load-path "/usr/share/emacs/site-lisp/mu/mu4e")
	(if (file-directory-p "/usr/local/share/emacs/site-lisp/mu4e")
		(setq pet/mu4e-load-path "/usr/local/share/emacs/site-lisp/mu4e")
	  (if (file-directory-p "/usr/local/share/emacs/site-lisp/mu/mu4e")
		  (setq pet/mu4e-load-path "/usr/local/share/emacs/site-lisp/mu/mu4e")
		nil)))))

  ;; Add mu4e load path
  (if (boundp 'pet/mu4e-load-path)
	  (add-to-list 'load-path pet/mu4e-load-path)
	nil)

#+end_src
* Basic UI Configuration
** Description
The following variables are used to tweak some of the configuration pieces like font and fontsize so you might need to adjust them for your local machine if you try to use this configuration directly.

This section configures basic UI settings that remove unneeded elements to make Emacs look a lot more minimal and modern.  If you're just getting started in Emacs, the menu bar might be helpful so you can remove the =(menu-bar-mode -1)= line if you'd like to still see that.
** Basic UI Settings
#+begin_src emacs-lisp
  ;; A few basic settings

  (setq inhibit-startup-message t)

  (scroll-bar-mode -1)        ; Disable visible scrollbar
  (tool-bar-mode -1)          ; Disable the toolbar
  (tooltip-mode -1)           ; Disable tooltips
  (set-fringe-mode 10)        ; Give some breathing room

  (menu-bar-mode -1)          ; Disable the menu bar

  ;; Start Emacs in Fullscreen mode and set transparancy
  (add-hook 'emacs-startup-hook 'toggle-frame-maximized)
  (set-frame-parameter (selected-frame) 'fullscreen 'maximized)
  (set-frame-parameter (selected-frame) 'alpha '(95 . 95))
  (add-to-list 'default-frame-alist '(fullscreen . maximized))
  (add-to-list 'default-frame-alist '(alpha . (95 . 95)))

  ;; Set default Encoding to UTF-8
  (set-language-environment "UTF-8")
  (set-default-coding-systems 'utf-8)

  ;; Set up the visible bell
  (setq visible-bell t)

  ;; Set Column Numbers
  (column-number-mode)
  ;; Set Line Numbers Globally
  (global-display-line-numbers-mode t)

  ;; Enable line numbers for some modes
  (dolist (mode '(text-mode-hook
                  prog-mode-hook
                  conf-mode-hook))
    (add-hook mode (lambda () (display-line-numbers-mode 'relative))))

  ;; Set Visual Line Mode for text modes only
  ;; Preferred over global-visual-line-mode
  ;; (add-hook 'text-mode-hook 'turn-on-visual-line-mode)

  ;; Enable Highlight-Line
  (hl-line-mode 1)

  ;; Disable line numbers for some modes
  (dolist (mode '(org-mode-hook
          term-mode-hook
          vterm-mode-hook
          shell-mode-hook
          eshell-mode-hook
          treemacs-mode))
    (add-hook mode (lambda () (display-line-numbers-mode 0))))

#+end_src
** Font Configuration

These ~Fonts~ are using the =pet/default-font-size= variable defined earlier
#+begin_src emacs-lisp
  ;; Set default font face of present
  (when (member "Iosevka" (font-family-list))
		(set-face-attribute 'default nil :font "Iosevka"
							:height pet/default-font-size))

  ;; Set the fixed pitch face
  (when (member "Iosevka" (font-family-list))
		(set-face-attribute 'fixed-pitch nil :font "Iosevka"
							:height pet/default-font-size))

  ;; Set the variable pitch face
  (when (member "Cantarell" (font-family-list))
		(set-face-attribute 'variable-pitch nil :font "Cantarell"
							:height pet/default-font-size
							:weight 'regular))

  ;; Use specific Fontsets for Symbols
  (setq use-default-font-for-symbols nil)

  ;; Use Symbols Nerd Font as Default Symbols Font, otherwise fall back to Symbola (or else)
  (set-fontset-font t 'unicode "Symbols Nerd Font")
  (set-fontset-font t '(#xF500 . #xF8FF) "Symbols Nerd Font")
  (set-fontset-font t 'unicode "Symbola" nil 'append)
  (set-fontset-font t 'unicode (font-spec :script 'unicode) nil 'append)

#+end_src
* Quality of Live Adjustments
** Startup

Make startup faster by reducing the frequency of garbage collection and then use a hook to measure Emacs startup time. 
 #+begin_src emacs-lisp
   ;; Setting garbage collection threshold (default is 800)
   ;; Required for speed and also LSP
   (setq gc-cons-threshold (* 50 1000 1000)
    gc-cons-percentage 0.6)

   ;; Profile emacs startup
   (add-hook 'emacs-startup-hook
         (lambda ()
           (message "*** Emacs loaded in %s with %d garbage collections."
            (format "%.2f seconds"
                   (float-time
                (time-subtract after-init-time before-init-time)))
               gcs-done)))

   ;; Silence compiler warnings as they can be pretty
   ;; disruptive
   ;;(setq comp-async-report-warnings-errors nil)
   
 #+end_src
** Tabs As Spaces
I Prefer ~Spaces~ over ~Tabs~, if you need to enable it for certain modes, add a hook to it.
#+begin_src emacs-lisp
  ;; Tabs as tab-char by default.
  ;; 'nil' replaces tabs with spaces
  (setq-default indent-tabs-mode t)
  ;; Set the default, fallback tabstop to be 4 spaces
  (setq-default tab-stop-list (number-sequence 4 120 4))
  ;; Set Number of Spaces displayed for a tab stop
  (setq-default tab-width 4)

#+end_src
** Calender
#+begin_src emacs-lisp  
  ;; Show Calendar on StartUp                      
  ;; (calendar)

  ;; set date format to %DD-%MM-%YYYY
  (setq european-calender-style 't)
  
#+end_src
** Macros
#+begin_src emacs-lisp
  ; Setup file containing global macros
  (load-file
   (concat pet/dotfiles-emacsconfig-dir
		   "macros/global.macs")) 

  ;; Set of keybindings for defined macros
  ;; Make sure to have a definition of the macro in your /macros folder
  (global-set-key "\C-x\C-kT" 'transpose-names)
  
#+end_src
** Booksmarks

Setup a ~location~ for your =bookmarks-file=
#+begin_src emacs-lisp
  ;; Set Location for bookmarks file/s
  (setq bookmark-default-file
        (concat pet/dotfiles-emacsconfig-dir
                "bookmarks"))
  
#+end_src
** Abbreviations
#+begin_src emacs-lisp
  ;; Activate Abbrev Mode by default
  (setq-default abbrev-mode t)

  ;; Set Location and Name of Abbrev file
  (setq abbrev-file-name
        (concat pet/dotfiles-emacsconfig-dir
                "abbrev_defs"))

  ;; Save Abbrevs when saving Files
  (setq save-abbrevs t)

#+end_src
** History and File Positions
#+begin_src emacs-lisp
  ;; Remember recently accessed files
  (recentf-mode 1)

  ;; Limit history file to 50 entries to speed up start
  (setq history-length 50)
  ;; Save command and file history
  (savehist-mode 1)

  ;; Remember Cursor Positions on accessed files 
  (save-place-mode 1)
  
#+end_src
** Customization File
Even if you don't use the [[id:cfb0e412-7d18-4c22-9a71-6d57d4dde7d4][Customization Mode]], some commands might access it and therefore clutter your =init.el=.
Let's save this to another file as well as load that in *without errormessages and normal messages* (like non-existing etc...)
#+begin_src emacs-lisp
  ;; Avoid Clutter by saving Customization Settings to a different file
  (setq custom-file (locate-user-emacs-file "customization_variables.el"))
  (load custom-file 'no-error 'no-message)
  
#+end_src
** Auto-Revert Buffer
[[id:3cf0fa83-18b3-4206-a109-f4606a94b8c1][Emacs]] doesn't automatically *revert buffers* that *change on disk*.
Changing this behaviour will still ask for confirmation, but you don't need to manually call the command.
#+begin_src emacs-lisp
  ;; Revert Buffers when Files changed on disk
  (global-auto-revert-mode t)

  ;; Automatically revert Dired (and similar) Buffers without confirmation
  (setq global-auto-revert-non-file-buffers t)
  
#+end_src
** World Clocks
[[id:3cf0fa83-18b3-4206-a109-f4606a94b8c1][Emacs]] can display the curren clocktime for various places around the world with the command =world-clock=
#+begin_src emacs-lisp
  ;; Setup World Clock list
  ;; If not set, zoneinfo-style-world-list is used
  (setq world-clock-list
    '(("Etc/UTC" "UTC")
      ("Europe/Berlin" "Berlin")
      ("Europe/Paris" "Paris")
      ("Europe/London" "London")
      ("Europe/Athens" "Athens")
      ("America/New_York" "New York")
      ("America/Los_Angeles" "Seattle")
      ("America/Mexico_City" "Mexico City")
      ("Asia/Shanghai" "Shanghai")
      ("Asia/Calcutta" "Bangalore")
      ("Asia/Tokyo" "Tokyo")
      ("Pacific/Auckland" "Auckland"))
    )

  ;; Adjust how time is displayed
  (setq display-time-world-time-format
    "%A, %d %B %Y %H:%M %p %Z")
  
#+end_src
** Executable Path Setup
~Exec Path from Shell~ is an [[id:3cf0fa83-18b3-4206-a109-f4606a94b8c1][Emacs]] [[id:1c44cf3c-6549-4e70-a3fd-491df7996dd5][Package]] that reads [[id:eb3164fe-2397-446a-8953-22356f3408db][Environment Variables]] from ~Bash~ or ~ZSH~.
Information can be found here: [[https://github.com/purcell/exec-path-from-shell][GitHub.com: Purcell - Exec Path from Shell]]
#+begin_src emacs-lisp
  ;; Package to setup Path Variable (and more) in Emacs
  (use-package exec-path-from-shell)

  ;; Read Path from Shell Setup when Emacs Server is launched through SystemD
  (when (daemonp)
    (exec-path-from-shell-initialize))

  ;; Copy values of other Environment Variables
  ;; (dolist (var '("SSH_AUTH_SOCK" "SSH_AGENT_PID" "GPG_AGENT_INFO" "LANG" "LC_CTYPE" "NIX_SSL_CERT_FILE" "NIX_PATH"))
  ;;   (add-to-list 'exec-path-from-shell-variables var))

#+end_src
** Skeletons

~Skeletons~ are ~text constructs~ (like ~letter headers~ or ~programming templates~) that you can insert.
:NOTE:
Find more here:
=C-h i autotype= > =Using Skeletons=
:END:
*** Latex Skeleton
#+begin_src emacs-lisp
  ;; Article Skeleton
  (define-skeleton pet/latex-article-skeleton
    "Skeleton for article type latex documents"
    "Preamble:"
    "\\documentclass{article}\n"
    "\\usepackage[utf8]{inputenc}\n"
    "\\usepackage[margin=1 in]{geometry}\n"
    "\\usepackage{graphicx}\n"
    "\\setlength{\\parindent}{4em}\n"
    "\\setlength{\\parskip}{1em}\n"
    "\\renewcommand{\\baselinestretch}{1.5}\n\n"
    "\\author{<AUTOR>}\n"
    "\\title{"_"}\n"
    "\\date{\\today}\n\n"
    "\\begin{document}\n"
    "\\maketitle\n\n"
    "\\end{document}\n")

#+end_src
*** Org Mode Skeletons
**** LaTeX Summary
#+begin_src emacs-lisp
  ;; Org LaTeX Summary Header 
  (define-skeleton pet/org-latex-summary-skeleton
    "Skeleton for summaries "
    "Preamble:"
    "#+LATEX_CLASS: article\n"
    "#+LATEX_CLASS_OPTIONS: [a5paper,landscape,fourcolumn]\n"
    "#+LATEX_COMPILER: lualatex\n"
    (concat "#+LATEX_HEADER: \\input{" (concat pet/latex-header-temp-dir "summaryheader.tex}\n"))
    "#+STARTUP: showeverything\n"
    "#+OPTIONS: toc:nil\n"
    "\\begin{multicols*}{4}\n"
    "* "_"\n"
    "\\end{multicols*}\n")

#+end_src
**** LaTeX Article
#+begin_src emacs-lisp
  ;; Org LaTeX Article Header
  (define-skeleton pet/org-latex-article-skeleton
    "Skeleton for articles "
    "Preamble:"
    "#+STARTUP: showeverything\n"
    "#+TITLE: TITLE\n"
    "#+AUTHOR: AUTHOR\n"
    "#+DATE: \\today\n"
    "#+LATEX_CLASS: article\n"
    "#+LATEX_CLASS_OPTIONS: [a4paper]\n"
    (concat "#+LATEX_HEADER: \\input{" (concat pet/latex-header-temp-dir "articleheader.tex}\n"))
    "#+OPTIONS: toc:nil\n")

#+end_src
**** LaTeX Beamer
#+begin_src emacs-lisp
  ;; Org LaTeX Beamer Header
  (define-skeleton pet/org-latex-beamer-skeleton
    "Skeleton for Beamer Presentations"
    "Preamble:"
    "#+STARTUP: beamer\n"
    "#+TITLE: TITLE\n"
    "#+AUTHOR: AUTHOR\n"
    "#+DATE: \\today\n"
    "#+LaTeX_CLASS: beamer\n"
    "#+LaTeX_CLASS_OPTIONS: [final]\n"
    (concat "#+LATEX_HEADER: \\input{" (concat pet/latex-header-temp-dir "beamerheader.tex}\n"))
    "#+STARTUP: showeverything\n"
    "#+OPTIONS: toc:nil\n")

#+end_src
**** LaTeX ModernCV
#+begin_src emacs-lisp
  ;; Org LaTeX ModernCV Header
  (define-skeleton pet/org-latex-moderncv-skeleton
    "Skeleton for CVs "
    "Preamble:"
    "#+LaTeX_CLASS: moderncv\n"
    "#+LaTeX_CLASS_OPTIONS: [11pt, a4paper, sans]\n"
    (concat "#+LATEX_HEADER: \\input{" (concat pet/latex-header-temp-dir "moderncvheader.tex}\n"))
    "#+STARTUP: showeverything\n"
    "#+OPTIONS: toc:nil\n")

#+end_src
**** LaTeX Letter
***** Basic
#+begin_src emacs-lisp
  ;; Org LaTeX Letter Header
  (define-skeleton pet/org-latex-koma-letter-skeleton
	"Skeleton for Letters using KOMA-Script"
	"Preamble:"
	"#+LaTeX_CLASS: scrlttr2\n"
	"#+LaTeX_CLASS_OPTIONS: [11pt, a4paper, parskip=yes]\n"
	(concat "#+LATEX_HEADER: \\input{" (concat pet/latex-header-temp-dir "letterheaderdefault.tex}\n"))
	(concat "#+LATEX_HEADER: \\input{" (concat pet/latex-header-temp-dir "letterinfobasic.tex}\n"))
	"#+STARTUP: showeverything\n"
	"#+OPTIONS: toc:nil"
	"#+OPTIONS: num:nil"
	"#+OPTIONS: author:nil"
	"#+OPTIONS: title:nil"
	)

#+end_src
***** German
#+begin_src emacs-lisp
  ;; Org LaTeX Letter Header German
  (define-skeleton pet/org-latex-koma-letter-german-skeleton
	"Skeleton for Letters using KOMA-Script - German Version"
	"Preamble:"
	"#+LaTeX_CLASS: scrlttr2-german\n"
	"#+LaTeX_CLASS_OPTIONS: [11pt, a4paper, parskip=yes]\n"
	(concat "#+LATEX_HEADER: \\input{" (concat pet/latex-header-temp-dir "letterheaderdefault.tex}\n"))
	"#+STARTUP: showeverything\n"
	"#+OPTIONS: toc:nil"
	"#+OPTIONS: num:nil"
	"#+OPTIONS: ':t backaddress:t"
	)

#+end_src
** Ace Window
#+begin_src emacs-lisp
  ;; Bind Ace Window Control
  (global-set-key (kbd "M-o") 'ace-window)
  
#+end_src
** YASnippets

Load ~package~ =yasnippets= (should already come preinstalled, invocation is just to do the configuration).
[[id:296fc3bb-8f64-4615-a8ad-fadb207ee770][Yasnippets]] are an ~extension/improvement~ over the basic [[id:3cf0fa83-18b3-4206-a109-f4606a94b8c1][Emacs]] ~Skeletons~ 
Documentation can be found here: [[https://github.com/joaotavora/yasnippet][GitHub.com: Yasnippet]]
#+begin_src emacs-lisp
  ;; Yasnippets
  (use-package yasnippet
    :init
    ;; save Yasnippet dir
    (setq pet/yasnippet-dir
          (concat pet/dotfiles-emacsconfig-dir
                  "snippets"))

    :config
    ;; Set Yasnippet dir
    (setq yas-snippet-dirs '(pet/yasnippet-dir))

    ;; Activate Yasnippets globally
    (yas-global-mode 1)

    ;; Allow Stacked Expansion (Expansion within Expansion)
    ;; (setq yas-triggers-in-field t)

    ;; Enable snippets being shared between modes
    (add-hook 'yas-minor-mode-hook
              (lambda ()
                (yas-activate-extra-mode
                 'fundamental-mode))))

#+end_src
** Multiple Cursors

~Multiple Cursors~ are a must for *modern editors*.
Obviously [[id:3cf0fa83-18b3-4206-a109-f4606a94b8c1][Emacs]] has a package for that too:
#+begin_src emacs-lisp
  ;; Multiple cusors are a must. Make <return> insert a newline; multiple-cursors-mode can still be disabled with C-g.
  (use-package multiple-cursors
    :config
    (setq mc/always-run-for-all 1)
    (global-set-key (kbd "C-S-c C-S-c")
                    'mc/edit-lines)
    (global-set-key (kbd "C-<")
                    'mc/mark-previous-like-this)
    (global-set-key (kbd "C->")
                    'mc/mark-next-like-this)
    (global-set-key (kbd "C-c M-<")
                    'mc/mark-all-like-this)
    (global-set-key (kbd "s-D")
                    'mc/mark-all-dwim)
    (define-key mc/keymap (kbd
                           "<return>") nil))
  
#+end_src
* Keybinding Configuration
** Rebinding Keys
#+begin_src emacs-lisp
  ;; Rebind 'M-x' to 'C-C C-m'
  (global-set-key "\C-c\C-m" 'execute-extended-command)
  
#+end_src
** General
[[https://github.com/noctuid/general.el][general.el]] is used for easy keybinding configuration that integrates well with =which-key=.
#+begin_src emacs-lisp
  ;; Setup general for easier key config
  (use-package general
	:config
	(general-create-definer pet/leader-keys
	:prefix "C-."
	:global-prefix "C-.")

	(pet/leader-keys

	  ;; Layouts
	  "l"     '(:ignore t :which-key "Layout")


	  ;; Authentication
	  "a"     '(:ignore t :which-key "Authentification")


	  ;; Bookmarks
	  "b"     '(:ignore t :which-key "Bookmarks")
	  "bs"    '(bookmark-set :which-key "Set Bookmark")
	  "bl"    '(bookmark-bmenu-list :which-key "bookmark list")


	  ;; Editing Tools
	  "e"     '(:ignore t :which-key "Editing Tools")
	  "ea"    'add-file-local-variable-prop-line
	  ;; Letters
	  "el"    '(:ignore t :which-key "Letters")
	  "elM-u" 'upcase-initials
	  "elC-uM-u" 'upcase-initials-region
	  ;; Tabs
	  "et"    '(untabify
				:which-key "Untabify")
	  "er"    '(regexp-builder
				:which-key "Regexp Builder")


	  ;; Files
	  "f"     '(:ignore t :which-key "Files")
	  "fR"    'recentf-open-files


	  ;; Org Mode related
	  "o"     '(:ignore t :which-key "Org Mode")


	  ;; Toggles
	  "t"     '(:ignore t :which-key "Toggles")
	  "tc"    'world-clock
	  "tt"    '(counsel-load-theme
				:which-key "Choose Theme")
	  ;; Toggles - Highlighting
	  "th"    '(:ignore t :which-key "Highlighting")
	  ;; Toggles - Highlighting - Colors
	  "thc"   '(:ignore t :which-key "Colors")
	  "thcr"  '(pet/syntax-color-rgb
				:which-key "RGB")
	  "thch"  '(pet/syntax-color-hsv
				:which-key "HSV")
	  ;; Toggles - Modes
	  "tm"    '(:ignore t :which-key "Modes")
	  "tmv"   '(visual-line-mode :which-key "Visual Line Mode")
	  "tmh"   '(hl-line-mode :which-key "Highlight Line Mode")
	  "tmw"   '(whitespace-mode :which-key "Whitspace Mode")
	  "tmo"   '(org-mode :which-key "Org Mode")
	  "tmf"   '(origami-mode :which-key "Origami Mode")
	  "tmf"   '(follow-mode :which-key "Follow Mode")
	  "tme"   '(emojify-mode :which-key "Emojify Mode")
	  "tms"   '(scroll-all-mode :which-key "Scroll All Mode")
	  ))

#+end_src
* Extended UI Configuration
** Beacon
Documentation can be found here: [[https://github.com/Malabarba/beacon][GitHub.com: beacon]]
#+begin_src emacs-lisp
  ;; applies beacon effect to the highlighted line on page scrolls
  (use-package beacon
     :config
     (beacon-mode 1)
     ;(setq beacon-color 0.4)
     )

#+end_src
** Battery Status
#+begin_src emacs-lisp 
  ;; Display battery for when in full screen mode
  (display-battery-mode t)
  
#+end_src
** Dialog Box
Don't show a *windowed dialog* box to keep [[id:3cf0fa83-18b3-4206-a109-f4606a94b8c1][Emacs]] keyboard-driven
#+begin_src emacs-lisp
  ;; Don't show windowed Dialog Box on Prompts
  (setq use-dialog-box nil)
  
#+end_src
** Dashboard
[[https://github.com/emacs-dashboard/emacs-dashboard][Emacs Dashboard]] ads a start up screen to [[id:3cf0fa83-18b3-4206-a109-f4606a94b8c1][Index Emacs]]
#+begin_src emacs-lisp
  ;; Add Dashboard to Emacs
  (use-package dashboard
	:init      ;; tweak dashboard config before loading it
	(setq dashboard-set-heading-icons t)
	(setq dashboard-set-file-icons t)
	(setq dashboard-banner-logo-title "Surveillance creates a prison in the mind")
	;; use standard emacs logo as banner
	(setq dashboard-startup-banner 'logo)
	;; Set custom banner
	;; (setq dashboard-startup-banner "~/.emacs.d/emacs-dash.png")
	(setq dashboard-center-content nil) ;; set to 't' for centered content
	(setq dashboard-items '((recents . 5)
				(agenda . 5 )
				(bookmarks . 3)
				(projects . 3)
				(registers . 3)))
	:config
	(dashboard-setup-startup-hook)
	(dashboard-modify-heading-icons '((recents . "file-text")
					  (bookmarks . "book"))))

#+end_src
*** Dashboard as Client Startup

#+begin_src emacs-lisp
  ;; Make Emacsclient start up into dashboard
  (setq initial-buffer-choice (lambda () (get-buffer "*dashboard*")))
#+end_src
** Command Log Mode

[[https://github.com/lewang/command-log-mode][command-log-mode]] is useful for displaying a panel showing each key binding you use in a panel on the right side of the frame.  Great for live streams and screencasts!
#+begin_src emacs-lisp
  ;; Enable Command Log Mode
  (use-package command-log-mode)
  
#+end_src
** Doom Themes

[[https://github.com/hlissner/emacs-doom-themes][doom-themes]] is a great set of themes with a lot of variety and support for many different Emacs modes.  Taking a look at the [[https://github.com/hlissner/emacs-doom-themes/tree/screenshots][screenshots]] might help you decide which one you like best.  You can also run =M-x counsel-load-theme= to choose between them easily.
#+begin_src emacs-lisp
  ;; Load Doom Themes
  (use-package doom-themes
	:init (load-theme 'doom-dracula t)
	)
  
#+end_src
** Doom Modeline

[[https://github.com/seagle0128/doom-modeline][doom-modeline]] is a very attractive and rich (yet still minimal) mode line configuration for [[id:3cf0fa83-18b3-4206-a109-f4606a94b8c1][Emacs]].  The default configuration is quite good but you can check out the [[https://github.com/seagle0128/doom-modeline#customize][configuration options]] for more things you can enable or disable.

:NOTE:
The *first time* you load your configuration on a *new machine*, you'll need to run =M-x all-the-icons-install-font= so that mode line icons display correctly.
:END:
#+begin_src emacs-lisp
  ;; Use all-the-icons
  ;;required for doom modeling
  (use-package all-the-icons)

  ;; Load doom modeline
  (use-package doom-modeline
	;; Activate Doom Modeline
	:init (doom-modeline-mode 1)
	:custom ((doom-modeline-height 20)))
  
#+end_src
** Winner Mode
#+begin_src emacs-lisp
  ;; Enable Winner Mode
  (winner-mode 1)

#+end_src
** Which Key

[[https://github.com/justbur/emacs-which-key][which-key]] is a useful UI panel that appears when you start pressing any key binding in [[id:3cf0fa83-18b3-4206-a109-f4606a94b8c1][Emacs]] to offer you all possible completions for the prefix.  For example, if you press =C-c= (hold control and press the letter =c=), a panel will appear at the bottom of the frame displaying all of the bindings under that prefix and which command they run.  This is very useful for learning the possible key bindings in the mode of your current buffer.
#+begin_src emacs-lisp
  ;; Load which-key
  ;; Loads a more helpful UI Completion buffer 
  (use-package which-key
	:init (which-key-mode)
	:diminish which-key-mode
	:config
	(setq which-key-idle-delay 1))
  
#+end_src
** Tab Bar Mode

Here we configure =Tab Bar Mode= to work in a specific way.
First we want new tabs to always open with a *scratch* buffer
:NOTE:
=Tab Bar Mode= was added in ~Emacs 27~
:END:
#+begin_src emacs-lisp
  ;; Tab Bar Mode Setting

  ;; Set new tab to scratch buffer
  (setq tab-bar-new-tab-choice "*scratch*")
  ;; right is default -
  ;; change if you dont like that
  ;; (tab-bar-new-tab-to right)                

  ;; Set the name of the tab to
  ;; match the current buffer
  ;; (setq tab-bar-tab-name-function
  ;;       tab-bar-current-tab-name)

	;; Keyboard Rules
	;; Remove Tab Bar Buttons
	(setq tab-bar-close-button-show nil
		  tab-bar-new-button-show nil
		  ;; tab-bar-button-relief               ;; controls outline of buttons
		  ;; tab-bar-face tab-bar-tab            ;; configure tab face (bgcolor etc.)
		  )

	;; tab bar is not automatically shown
	;; (set 1 to enable)
	(setq tab-bar-show nil)                      

	;; Helper function to get only the name
	;; of current tab
	(defun pet/current-tab-name ()
	  (alist-get 'name (tab-bar--current-tab)))
  
#+end_src
** Visual Regular Expressions
[[https://github.com/benma/visual-regexp.el][Visual-Regexp]] is a third party package that builds on emacs lisp [[id:26419d86-c777-4765-9dd1-9353f17a0716][regular expression]] functionality.
It enables highlighting of ~Regexp Groups~ to better understand the [[id:26419d86-c777-4765-9dd1-9353f17a0716][expressions]] during ~build-up~
#+begin_src emacs-lisp
  ;; Visually Mark Regexp
  (use-package visual-regexp)
  
#+end_src
** Display Emojis
[[https://github.com/iqbalansari/emacs-emojify][Emojify]] is an [[id:3cf0fa83-18b3-4206-a109-f4606a94b8c1][Emacs]] extension to display ~emojis. It can display github style emojis like :smile: or plain ascii ones like :).
[[id:40f3f142-cf2a-44f0-a9fb-da5f5bf448cc][Unicode Emojis]] können auch ohne dieses Paket schon angezeigt werden
#+begin_src emacs-lisp
  ;; Extend Emacs Emoji capability (apart from Unicode)
  (use-package emojify
    ;; if you want to enable emojis globally:
    ;; :hook (after-init . global-emojify-mode)
    )
  
#+end_src
** Origami Mode
#+begin_src emacs-lisp
  ;; Add Origami Mode for Folding
  (use-package origami
    :hook (yaml-mode . origami-mode)
    :bind (
           :map origami-mode-map
                ("<tab>" . origami-recursively-toggle-node)
                ("S-<tab>" . origami-toggle-all-nodes)
                ("C-c C-n" . origami-next-fold)
                ("C-c C-p" . origami-previous-fold)
                ("C-c C-S-_" . origami-undo)
                ("C-c C-S-M-_" . origami-redo))
    )

#+end_src
** Ivy and Counsel
*** Description
[[https://oremacs.com/swiper/][Ivy]] is an excellent completion framework for Emacs.  It provides a minimal yet powerful selection menu that appears when you open files, switch buffers, and for many other tasks in Emacs.

~Counsel~ is a customized set of commands to replace =find-file= with =counsel-find-file=, etc which provide useful commands for each of the default completion commands.

[[https://github.com/Yevgnen/ivy-rich][ivy-rich]] adds extra columns to a few of the Counsel commands to provide more information about each item.
*** Loading Ivy and related Packages
#+begin_src emacs-lisp
  ;; Load Ivy Completion Framework
  (use-package ivy
	:diminish
	:bind (("C-s" . swiper)
	   ("C-r" . swiper)
	   :map ivy-minibuffer-map
	   ("TAB" . ivy-alt-done)
	   ("C-l" . ivy-alt-done)
	   ("C-j" . ivy-next-line)
	   ("C-k" . ivy-previous-line)
	   ("C-RET" . ivy-immediate-done)
	   :map ivy-switch-buffer-map
	   ("C-k" . ivy-previous-line)
	   ("C-l" . ivy-done)
	   ("C-d" . ivy-switch-buffer-kill)
	   :map ivy-reverse-i-search-map
	   ("C-k" . ivy-previous-line)
	   ("C-d" . ivy-reverse-i-search-kill))
	:config
	(ivy-mode 1))

  ;; Add Counsel for customized find files etc..
  (use-package counsel
	:after ivy
	:bind (("C-M-j" . 'counsel-switch-buffer)
	   :map minibuffer-local-map
	   ("C-r" . 'counsel-minibuffer-history))
	:config
	(counsel-mode 1)

	;; Add Counsel function to leader key space
	(pet/leader-keys
	  "r"   '(ivy-resume :which-key "ivy resume")

	  "ff"  '(counsel-find-file :which-key "open file")
	  "C-f" 'counsel-find-file
	  "fr"  '(counsel-recentf :which-key "recent files")
	  "fR"  '(revert-buffer :which-key "revert file")
	  "fj"  '(counsel-file-jump :which-key "jump to file"))
	)

  ;; Ivy-Rich: Add Descriptions alongside M-x commands
  (use-package ivy-rich
	:after ivy
	:init
	(ivy-rich-mode 1))

#+end_src
*** Prescient

[[https://github.com/raxod502/prescient.el][Prescient]] makes [[id:3cf0fa83-18b3-4206-a109-f4606a94b8c1][Emacs]] store your recent history when accessing menus (like =C-h= or =M-x=)
#+begin_src emacs-lisp
  ;; Add Prescient for spooky Emacs Memory (history)
  (use-package prescient
	:after counsel
	:config
	(prescient-persist-mode 1))

  ;; Enable Prescient in Ivy
  (use-package ivy-prescient
	:after prescient
	:config
	(ivy-prescient-mode 1))
  
#+end_src
*** Ivy BibTex
Add ~Bibtex~ support to [[https://oremacs.com/swiper/][Ivy]] via [[https://github.com/tmalsburg/helm-bibtex][Ivy-BibTex]]
#+begin_src emacs-lisp
  ;; Add BibTex completion support to Ivy
  (use-package ivy-bibtex
	:config
	;; Set Bibtex Bibliography Files
	(setq bibtex-completion-bibliography
		  (list
		   (concat pet/home-dir "Projects/Writing/00_Bibliographies/Main_Bib.bib")
		   ))

	;; Set Bibtex Completion Library Path
	(setq bibtex-completion-library-path
		  (list
		   (concat pet/home-dir "Projects/Writing/00_Bibliographies")
		   ))

	;; Set Bibtex Completion Notes Path
	(setq bibtex-completion-notes-path
		  "Projects/bibliography/notes/")

	;; Add Keywords Field to Completion Serach
	(setq bibtex-completion-additional-search-fields '(keywords))

	;; ;; Bibtex Notes Completion Template
	;; (setq bibtex-completion-notes-template-multiple-files
	;; "* ${author-or-editor}, ${title}, ${journal}, (${year})  :${=type=}:  \n\nSee   [[cite\:${=key=}]]  \n")

	;; Display Format for Completions
	;; (setq bibtex-completion-display-formats
	;;	  '((article       . "${=has-pdf=:1}${=has-note=:1} ${year:4} ${author:36} ${title:*} ${journal:40}")
	;;		(inbook        . "${=has-pdf=:1}${=has-note=:1} ${year:4} ${author:36} ${title:*} Chapter ${chapter:32}")
	;;		(incollection  . "${=has-pdf=:1}${=has-note=:1} ${year:4} ${author:36} ${title:*} ${booktitle:40}")
	;;		(inproceedings . "${=has-pdf=:1}${=has-note=:1} ${year:4} ${author:36} ${title:*} ${booktitle:40}")
	;;		(t             . "${=has-pdf=:1}${=has-note=:1} ${year:4} ${author:36} ${title:*}")))

	;;; Adjust automatic generation of bibtex key
	;;(setq bibtex-autokey-year-length 4
	;;	  bibtex-autokey-name-year-separator "-"
	;;	  bibtex-autokey-year-title-separator "-"
	;;	  bibtex-autokey-titleword-separator "-"
	;;	  bibtex-autokey-titlewords 2
	;;	  bibtex-autokey-titlewords-stretch 1
	;;	  bibtex-autokey-titleword-length 5)

	;; (setq bibtex-completion-pdf-open-function
	;; 	  (lambda (fpath)
	;; 		(call-process "open" nil 0 nil fpath))))

	)

#+end_src
** Helpful Help Commands

[[https://github.com/Wilfred/helpful][Helpful]] adds a lot of very helpful (get it?) information to Emacs' =describe-= command buffers.  For example, if you use =describe-function=, you will not only get the documentation about the function, you will also see the source code of the function and where it gets used in other places in the Emacs configuration.  It is very useful for figuring out how things work in Emacs.

#+begin_src emacs-lisp
  ;; Use Helpful to get a better help buffer
  (use-package helpful
    :custom
    (counsel-describe-function-function
     #'helpful-callable)
    (counsel-describe-variable-function
     #'helpful-variable)
    :bind
    ([remap describe-function] . helpful-function)
    ([remap describe-symbol] . helpful-symbol)
    ([remap describe-command] . helpful-command)
    ([remap describe-variable] . helpful-variable)
    ([remap describe-key] . helpful-key))

#+end_src
** Perspective
[[https://github.com/nex3/perspective-el][Perspective]] allows you to safe a specific window layout even across sessions
#+begin_src emacs-lisp
  ;; Add Perspective to use sets of 
  (use-package perspective
	:demand t
	;; Setup Keybindings
	;; :bind (("C-M-k" . persp-switch)
	;; 	   ("C-M-n" . persp-next)
	;; 	   ("C-x k" . persp-kill-buffer*))
	:custom
	;; Start Perspective Mode
	(persp-mode-prefix-key (kbd "C-c M-p"))
	(persp-initial-frame-name "Main")
	;; Set default file for states
	(persp-state-default-file
	 (concat pet/dotfiles-emacsconfig-dir
			 "perspective/default-state"))
	:config
	;; Running `persp-mode' multiple times resets the perspective list...
	(unless (equal persp-mode t)
	  (persp-mode))

	;; Add Perspective Functions to User Leader Keys
	(pet/leader-keys
	  "P"  '(:ignore t :which-key "Perspectives")
	  "Pn"  'persp-next  
	  "Ps"  'persp-switch-to-buffer*
	  "Pk"  'persp-kill-buffer*
	  )
	)

#+end_src
** Treemacs Mode
=Treemacs= is a handy tree-style *file directory viewer* that's very similar to what you are used from commercial IDEs.
It's got good integration with =Projectile=

#+begin_src emacs-lisp
  (use-package treemacs
    :bind
    (:map global-map
          ([f8] . treemacs)
          ("C-<f8>" . treemacs-select-window))
    :config
    ;; ensure that treemacs-buffer is
    ;; ignored when switching windows 
    (setq treemacs-is-never-other-window t)

    ;; Add shortcut for treemacs to
    ;; personal keyspace
    (pet/leader-keys
     "lt"  '(:ignore t :which-key "treemacs")
     "ltt" 'treemacs
     "ltw" 'treemacs-select-window)
    )
#+end_src
** Minimap Mode
[[https://github.com/dengste/minimap][Minimap]] adds a minimap sidebar to [[id:3cf0fa83-18b3-4206-a109-f4606a94b8c1][Emacs]]
#+begin_src emacs-lisp
  ;; Add Minimap to Emacs
  (use-package minimap
   :config
   ;; Set minimap to show on the right
   (setq minimap-window-location 'right)

   ;; Make Minimap available in most text modes
   (add-to-list 'minimap-major-modes 'text-mode)

   ;; Add Minimap to Keyspace for Toggles - Modes
   (pet/leader-keys
	 "tmm"   '(minimap-mode :which-key "Minimap Mode")
	 )
   )



#+end_src
** Hydra
*** Description
~Hydra~ is an [[id:3cf0fa83-18b3-4206-a109-f4606a94b8c1][Emacs]] [[id:1c44cf3c-6549-4e70-a3fd-491df7996dd5][Package]] that helps with ~keybindings~ by enabling you to create *virtual namespaces* for *repeated commands*.

For example, imagine that you have bound =C-c j= and =C-c k= in your config and you want to call them in some (arbitrary) sequence. ~Hydra~ allows you to bind your functions in a way that pressing =C-c jjkk3j5k= is *equivalent to* pressing =C-c j C-c j C-c k C-c k M-3 C-c j M-5 C-c k=. *Any key other* than =j= or =k= *exits this state*.

+ ~Colors~ have a special meaning with ~hydras~ (=:color= ~option~). See the list below:
  
  |----------+----------------------------|
  | Color    | Toggle                     |
  |----------+----------------------------|
  | red      |                            |
  | blue     | :exit t                    |
  | amaranth | :foreign-keys warn         |
  | teal     | :foreign-keys warn :exit t |
  | pink     | :foreign-keys run          |
  |----------+----------------------------|

+ ~Hints~ are displayed next to the keys. If you add a ~Docstring~ you might want to disable that. Use =:hint nil= for that.
  
~Documentation~ can be found here: [[https://github.com/abo-abo/hydra][GitHub.com: Hydra]]
*** Loading Hydra Package
#+begin_src emacs-lisp
  ;; Load Hydra Package
  (use-package hydra
	:config

	;; Add leader key Menu
	(pet/leader-keys
	  "h" '(:ignore t :which-key "Hydras")
	  )
	)

#+end_src
*** Text Scale Hydra
#+begin_src emacs-lisp
  ;; Define Text Scale Hydra 
  (defhydra hydra-text-scale (:timeout 4)
    "Scale text"
    ("j" text-scale-increase "in")
    ("k" text-scale-decrease "out")
    ("q" nil "finished" :exit t))

  (pet/leader-keys
    "hs" '(hydra-text-scale/body :which-key "Scale text")
   )

#+end_src
*** Buffer Menu Hydra
#+begin_src emacs-lisp
  ;; Hydra for Buffer Menu functions
  (defhydra hydra-buffer-menu (
                               :hint nil
                               :timeout 10
                               ;; :color pink
                               )
    "
  ^Mark^             ^Unmark^           ^Actions^          ^Search
  ^^^^^^^^-----------------------------------------------------------------
  _m_: mark          _u_: unmark        _x_: execute       _R_: re-isearch
  _s_: save          _U_: unmark up     _b_: bury          _I_: isearch
  _d_: delete        ^ ^                _g_: refresh       _O_: multi-occur
  _D_: delete up     ^ ^                _T_: files only: % -28`Buffer-menu-files-only
  _~_: modified
  "
    ("m" Buffer-menu-mark)
    ("u" Buffer-menu-unmark)
    ("U" Buffer-menu-backup-unmark)
    ("d" Buffer-menu-delete)
    ("D" Buffer-menu-delete-backwards)
    ("s" Buffer-menu-save)
    ("~" Buffer-menu-not-modified)
    ("x" Buffer-menu-execute)
    ("b" Buffer-menu-bury)
    ("g" revert-buffer)
    ("T" Buffer-menu-toggle-files-only)
    ("O" Buffer-menu-multi-occur :color blue)
    ("I" Buffer-menu-isearch-buffers :color blue)
    ("R" Buffer-menu-isearch-buffers-regexp :color blue)
    ("c" nil "cancel")
    ("v" Buffer-menu-select "select" :color blue)
    ("o" Buffer-menu-other-window "other-window" :color blue)
    ("q" quit-window "quit" :color blue))

  ;; Access Hydra in Buffer Menu with '.'
  (define-key Buffer-menu-mode-map "." 'hydra-buffer-menu/body)

#+end_src
*** Bookmark Menu Hydra
#+begin_src emacs-lisp
  ;; Bookmark Menu
  (defhydra hydra-bookmark-menu (
								 :color pink
										:hint nil
										:timeout 10)
	"

		^^^Mark^             ^Actions^            ^Search^            ^Annotations^         ^Open Bookmark
		^^^^^^^^-----------------------------------------------------------------------------------------------------
		_m_: mark         _x_: execute          _/_: isearch             _a_: show         _o_   on other window 
		_u_: unmark       _r_: rename           _l_: locate              _A_: show all     _C-o_ switch other window    
		_U_: unmark up    _R_: relocate bmk     _S_: show filenames      _e_: edit         _1_   on full window
		_d_: delete       _w_: write bmk list   _T_: hide filenames      ^ ^               _2_   on split vertical
		_D_: delete up    _i_: import bmk list  _t_: toggle filenames    ^ ^               _5_   on other frame
		"
	("m" bookmark-bmenu-mark)
	("u" bookmark-bmenu-unmark)
	("U" bookmark-bmenu-backup-unmark)
	("d" bookmark-bmenu-delete)
	("D" bookmark-bmenu-delete-backwards)
	("x" bookmark-bmenu-execute-deletions)
	("r" bookmark-bmenu-rename)
	("R" bookmark-bmenu-relocate)  
	("w" bookmark-bmenu-save)                   ;; 'write' bookmark list
	("i" bookmark-bmenu-load)                   ;; 'import' bookmark list
	("/" bookmark-bmenu-search)
	("l" bookmark-bmenu-locate)
	("S" bookmark-bmenu-show-filenames)  
	("T" bookmark-bmenu-hide-filenames)
	("t" bookmark-bmenu-toggle-filenames)
	("a" bookmark-bmenu-show-annotation)
	("A" bookmark-bmenu-show-all-annotations)
	("e" bookmark-bmenu-edit-annotation)
	("c" nil "cancel" :exit t)
	("s" bookmark-bmenu-select "select" :color blue)
	("o" bookmark-bmenu-other-window :color blue)
	("C-o" bookmark-bmenu-switch-window :color blue)
	("1" bookmark-bmenu-1-window :color blue)
	("2" bookmark-bmenu-2-window :color blue)
	("5" bookmark-bmenu-other-frame :color blue)
	("q" quit-window "quit bm list" :color blue))

  ;; Access Menu through '.' in Bookmark List
  (with-eval-after-load "bookmark"
	(define-key bookmark-bmenu-mode-map
				"." 'hydra-bookmark-menu/body))

#+end_src
*** Apropos Hydra
#+begin_src emacs-lisp
  ;; Apropos Hydra
  (defhydra hydra-apropos (
                           ;; :color blue
                           :hint nil
                                 )
    "
  ^Apropos
  ^^^^^^^^-----------------------
  _a_propos        _c_ommand
  _d_ocumentation  _l_ibrary
  _v_ariable       _u_ser-option
  ^ ^          valu_e_
  "
    ("a" apropos)
    ("d" apropos-documentation)
    ("v" apropos-variable)
    ("c" apropos-command)
    ("l" apropos-library)
    ("u" apropos-user-option)
    ("e" apropos-value))
  ;; Recommended binding:
  ;; (global-set-key (kbd "C-c h") 'hydra-apropos/body)

  ;; Add to Leader keys
  (pet/leader-keys
    "ha" '(hydra-apropos/body :which-key "Apropos")
   )

#+end_src
*** Window Management Hydra
**** Helper Functions
#+begin_src emacs-lisp
  ;; Window Management Helpers
  (require 'windmove)

  ;; Move Splitter left
  (defun pet/move-splitter-left (arg)
	"Move window splitter left."
	(interactive "p")
	(if (let ((windmove-wrap-around))
		  (windmove-find-other-window 'right))
		(shrink-window-horizontally arg)
	  (enlarge-window-horizontally arg)))

  ;; Move Splitter left
  (defun pet/move-splitter-right (arg)
	  "Move window splitter right."
	  (interactive "p")
	  (if (let ((windmove-wrap-around))
			(windmove-find-other-window 'right))
		  (enlarge-window-horizontally arg)
		(shrink-window-horizontally arg)))

   ;; Move Splitter Up
  (defun pet/move-splitter-up (arg)
	"Move window splitter up."
	(interactive "p")
	(if (let ((windmove-wrap-around))
		  (windmove-find-other-window 'up))
		(enlarge-window arg)
	  (shrink-window arg)))

  ;; Move Splitter Down
  (defun pet/move-splitter-down (arg)
	"Move window splitter down."
	(interactive "p")
	(if (let ((windmove-wrap-around))
		  (windmove-find-other-window 'up))
		(shrink-window arg)
	  (enlarge-window arg)))
  
#+end_src
**** Hydra Definition
#+begin_src emacs-lisp
  ;; Define Window Management Hydra
  (defhydra hydra-window (
						  :hint nil
								)
	"
	  Movement^^        ^Split^         ^Switch^		^Resize^
	  ----------------------------------------------------------------
	  _M-<left>_  ←	_v_ertical    	_b_uffer		_<left>_  X←
	  _M-<down>_  ↓   	_x_ horizontal	_f_ind files	_<down>_  X↓
	  _M-<up>_    ↑   	_z_ undo      	_a_ce 1	    	_<up>_    X↑
	  _M-<right>_ →   	_Z_ reset      	_s_wap	     	_<right>_ X→
	  _F_ollow Mode    	_D_lt Other   	_S_ave	     max_i_mize
	  _SPC_ cancel	    _o_nly this   	_d_elete	
	  "
	;; Movement
	("M-<left>"  windmove-left)
	("M-<down>"  windmove-down)
	("M-<up>"    windmove-up)
	("M-<right>" windmove-right)

	;; Resize
	("<left>"  pet/move-splitter-left)
	("<down>"  pet/move-splitter-down)
	("<right>" pet/move-splitter-right)
	("<up>"    pet/move-splitter-up)

	("b" list-buffers)
	("f" find-files)
	("F" follow-mode)
	("a" (lambda ()
		   (interactive)
		   (ace-window 1)
			   (add-hook 'ace-window-end-once-hook
						 'hydra-window/body))
	 )
	("v" (lambda ()
		   (interactive)
		   (split-window-right)
		   (windmove-right))
	 )
	("x" (lambda ()
		   (interactive)
		   (split-window-below)
		   (windmove-down))
	 )
	("s" (lambda ()
		   (interactive)
		   (ace-window 4)
		   (add-hook 'ace-window-end-once-hook
					 'hydra-window/body)))
	("S" save-buffer)
	("d" delete-window)
	("D" (lambda ()
		   (interactive)
		   (ace-window 16)
		   (add-hook 'ace-window-end-once-hook
					 'hydra-window/body))
	 )
	("o" delete-other-windows)
	("i" ace-maximize-window)
	("z" (progn
		   (winner-undo)
		   (setq this-command 'winner-undo))
	 )
	("Z" winner-redo)
	("SPC" nil)
	)

  ;; Add to Leader keys
  (pet/leader-keys
	"hw" '(hydra-window/body :which-key "Window Management")
	)

#+end_src
*** Multiple Cursors Hydra 
#+begin_src emacs-lisp
  ;; hydra multiple cursors
  (defhydra hydra-multiple-cursors (:hint nil)
    "
       ^Up^            ^Down^             ^Other^
  --------------------------------------------------------
  [_p_]   Previous    [_n_]   Next    [_l_] Edit lines
  [_P_]   Skip        [_N_]   Skip    [_a_] Mark all
  [_M-p_] Unmark      [_M-n_] Unmark  [_r_] Mark by regexp
  ^ ^                 ^ ^             [_d_] Mark all defun
  ^ ^                 ^ ^             [_q_] Quit
  "
    ("l" mc/edit-lines :exit t)
    ("a" mc/mark-all-like-this :exit t)
    ("n" mc/mark-next-like-this)
    ("N" mc/skip-to-next-like-this)
    ("M-n" mc/unmark-next-like-this)
    ("p" mc/mark-previous-like-this)
    ("P" mc/skip-to-previous-like-this)
    ("M-p" mc/unmark-previous-like-this)
    ("r" mc/mark-all-in-region-regexp :exit t)
    ("d" mc/mark-all-like-this-in-defun :exit t)
    ("q" nil))

  ;; Add to Leader keys
  (pet/leader-keys
    "hm" '(hydra-multiple-cursors/body :which-key "Multiple Cursors")
   )

#+end_src
*** Editing Toggles Hydra
#+begin_src emacs-lisp
  ;; Editing Toggles
  (defhydra hydra-editing-visuals (
						  :color pink
								 :hint nil
								 )
	"
  ^Editing Visuals
  ^^^^^^-------------------------------------------------------------------------
  _a_ abbrev-mode:                         %`abbrev-mode
  _C_ display-fill-column-indicator-mode:  %`display-fill-column-indicator-mode
  _d_ debug-on-error:                      %`debug-on-error
  _f_ auto-fill-mode:                      %`auto-fill-function
  _F_ variable-pitch-mode                 
  _i_ toggle-input-method                 
  _n_ display-line-numbers-mode:           %`display-line-numbers-mode
  _M_ doom-modeline-mode:                  %`doom-modeline-mode
  _R_ read-only-mode                      
  _t_ truncate-lines:                      %`truncate-lines
  _T_ counsel-load-theme                  
  _v_ visual-line-mode:                    %`visual-line-mode
  _w_ whitespace-mode:                     %`whitespace-mode
  "
	("a" abbrev-mode)
	("C" display-fill-column-indicator-mode)
	("d" toggle-debug-on-error)
	("f" auto-fill-mode)
	("F" variable-pitch-mode)
	("i" toggle-input-method)
	("t" toggle-truncate-lines)
	("T" counsel-load-theme)
	("v" visual-line-mode)
	("n" display-line-numbers-mode)
	("M" doom-modeline-mode)
	("w" whitespace-mode)
	("R" read-only-mode)
	("q" nil "quit" :exit 1))

  ;; (global-set-key (kbd "C-c C-v") 'hydra-editing-toggles/body)

  ;; Add to Key Space
  (pet/leader-keys
	"eh" '(hydra-editing-visuals/body :which-key "Editing Visuals")
	"T"  '(hydra-editing-visuals/body :which-key "Toggle Hydra")
	"ht" '(hydra-editing-visuals/body :which-key "Editing Visuals")
	)

#+end_src
*** Global Org Mode Hydra
#+begin_src emacs-lisp :tangle no
  ;; Global Org Mode Functionaliy via Hydra
  (defhydra hydra-global-org-menu (
								   :hint nil
										 :color pink
										 :timeout 10
										 )
	"
		^Org Utilities

		^Timer^                ^Clock^              ^Capture
		^^^^^^-------------------------------------------------------------------------
		 _t_: Start         _w_: Clock-In          _c_: Capture
		 _s_: Stop          _o_: Clock-Out         _l_: Last Capture
		 _r_: Set           _j_: Clock-Goto        ^ ^
		 _p_: Print

		 _q_: Quit
		 "

	  ("t" org-timer-start)
	  ("s" org-timer-stop)
	  ;; This one requires you be in an orgmode doc, as it sets the timer for the header
	  ("r" org-timer-set-timer)
	  ;; output timer value to buffer
	  ("p" org-timer)
	  ;; used with (org-clock-persistence-insinuate) (setq org-clock-persist t)
	  ("w" (org-clock-in '(4)))
	  ;; you might also want (setq org-log-note-clock-out t)
	  ("o" org-clock-out)
	  ;; global visit the clocked task
	  ("j" org-clock-goto)
	  ;; Don't forget to define the captures you want http://orgmode.org/manual/Capture.html
	  ("c" org-capture)
	  ("l" org-capture-goto-last-stored)
	  ("q" nil)
	  )

  (pet/leader-keys
	"ou" '(hydra-global-org-menu/body :which-key "Org Global Utilities")
	"ho" '(hydra-global-org-menu/body :which-key "Org Global Hydra")
	)

#+end_src
*** EBDB Mode Hydra
#+begin_src emacs-lisp :tangle no
  ;; Hydra for Contact Management
  (defhydra hydra-ebdb-menu (
							 :hint nil
								   :color pink
								   )
	"
		^EBDB Utilities

		^Records^                ^Fields^              ^Capture
		^^^^^^-------------------------------------------------------------------------
		_c_  Create           
		_C_  Ext Create
  "
	("c" ebdb-create-record)
	("C" ebdb-create-record-extended)
	(";" ebdb-edit-foo "Notes")
	("m" ebdb-mail "Mail")
	("M" ebdb-mail-each "Mail Each")
	("h" ebdb-info "Info Menu")
	("?" ebdb-help "Help")
	("e" ebdb-edit-field "Edit Field")
	("TAB" ebdb-next-field "Next Field")
	("^" ebdb-search-pop "Search Pop")
	("P" ebdb-prev-field "Prev Field")
	("s" ebdb-save-ebdb "Save Databases")
	("+-t" ebdb-search-tags "Search Tags")
	("+-m" ebdb-search-mail "Search Mail")
	("p" ebdb-prev-record "Prev Record")
	("n" ebdb-next-record "Next Record")
	("+-p" ebdb-search-phone "Search Phone")
	("d-c" ebdb-copy-records "Copy Records")
	("o" ebdb-omit-records "Omit Records")
	("d-m" ebdb-move-records "Move Records")
	("A" ebdb-mail-aliases "Mail Aliases")
	("b-c" ebdb-clone-buffer "Clone Buffer")
	("i" ebdb-insert-field "Insert Field")
	("RET" ebdb-record-action "Record Action")
	("b-r" ebdb-rename-buffer "Rename Buffer")
	("+-a" ebdb-search-address "Search Address")
	("!" ebdb-search-invert "Search Invert")
	("+-c" ebdb-search-modified "Search Modified")
	("d-r" ebdb-reload-database "Reload Database")
	("r" ebdb-reformat-records "Reformat Records")
	("I" ebdb-cite-records-ebdb "Cite Records")
	("d-d" ebdb-disable-database "Disable Database")
	("+-d" ebdb-search-duplicates "Search Duplicates")
	("w-m" ebdb-copy-mail-as-kill "Copy Mail as Kill")
	("#" ebdb-record-mark "Mark Record")
	("d-e" ebdb-customize-database "Customize Database")
	("C-#" ebdb-unmark-all-records "Unmark all Records")
	("+-x" ebdb-search-user-fields "Search User Fields")
	("+-C" ebdb-search-record-class "Search Record Class")
	("w-f" ebdb-copy-fields-as-kill "Copy Fields as Kill")
	("C-x n w" ebdb-display-all-records "Display all Records")
	("+ o" ebdb-search-organization "Search Organization")
	("E" ebdb-edit-field-customize "Edit Field Customize")
	("F" ebdb-format-these-records "Format These Records")
	("f" ebdb-format-to-tmp-buff "Format to Tmp Buffer")
	("/ 1" ebdb-search-single-record "Searc Single Record")
	("w r" ebdb-copy-records-as-kill "Copy Records as Kill")
	("t" ebdb-toggle-records-format "Toggle Records Format")
	("R" ebdb-create-record-and-role "Create Record and Role")
	("C-k" ebdb-delete-field-or-record "Delete Field or Record")
	("C-x n d" ebdb-display-current-record "Display Current Record")
	("M-#" ebdb-toggle-all-record-marks "Toggle all Record Marks")
	("c" ebdb-toggle-all-records-format "Toggle All Records Format")
	("q" "Quit Database")
	("SPC" "Exit" :exit t)
	)

#+end_src
*** Mu4e Hydra
#+begin_src emacs-lisp
  ;; Mu4e Hydra
  (defhydra hydra-mu4e-headers (
								:color blue
									   :hint nil
									   )
	"
   ^General^   | ^Search^           | _!_: read    | _#_: deferred  | ^Switches^
  -^^----------+-^^-----------------| _?_: unread  | _%_: pattern   |-^^------------------
  _n_: next    | _s_: search        | _r_: refile  | _&_: custom    | _O_: sorting
  _p_: prev    | _S_: edit prev qry | _u_: unmk    | _+_: flag      | _P_: threading
  _]_: n unred | _/_: narrow search | _U_: unmk *  | _-_: unflag    | _Q_: full-search
  _[_: p unred | _b_: search bkmk   | _d_: trash   | _T_: thr       | _V_: skip dups 
  _y_: sw view | _B_: edit bkmk     | _D_: delete  | _t_: subthr    | _W_: include-related
  _R_: reply   | _{_: previous qry  | _m_: move    |-^^-------------+-^^------------------ 
  _C_: compose | _}_: next query    | _a_: action  | _|_: to shell  | _´_: update, reindex
  _F_: forward | _C-+_: show more   | _A_: mk4actn | _H_: help      | _;_: context-switch
  _h_: ?mode   | _C--_: show less   | _*_: *thing  | _q_: quit hdrs | _j_: jump2maildir "

	;; general
	("n" mu4e-headers-next)
	("p" mu4e-headers-previous)
	("[" mu4e-select-next-unread)
	("]" mu4e-select-previous-unread)
	("y" mu4e-select-other-view)
	("R" mu4e-compose-reply)
	("C" mu4e-compose-new)
	("F" mu4e-compose-forward)

	;; search
	("s" mu4e-headers-search)
	("S" mu4e-headers-search-edit)
	("/" mu4e-headers-search-narrow)
	("b" mu4e-headers-search-bookmark)
	("B" mu4e-headers-search-bookmark-edit)
	("{" mu4e-headers-search-prev :color pink)      ; differs from built-in - make sure to add them later
	("}" mu4e-headers-search-next :color pink)      ; differs from built-in - make sure to add them later
	("C-+" mu4e-headers-split-view-grow)
	("C--" mu4e-headers-split-view-shrink)

	;; mark stuff 
	("!" mu4e-headers-mark-for-read)
	("?" mu4e-headers-mark-for-unread)
	("r" mu4e-headers-mark-for-refile)
	("u" mu4e-headers-mark-for-unmark)
	("U" mu4e-mark-unmark-all)
	("d" mu4e-headers-mark-for-trash)
	("D" mu4e-headers-mark-for-delete)
	("m" mu4e-headers-mark-for-move)
	("a" mu4e-headers-action)                  ; not really a mark per-se
	("A" mu4e-headers-mark-for-action)
	("*" mu4e-headers-mark-for-something)


	("#" mu4e-mark-resolve-deferred-marks)
	("%" mu4e-headers-mark-pattern)
	("&" mu4e-headers-mark-custom)
	("+" mu4e-headers-mark-for-flag)
	("-" mu4e-headers-mark-for-unflag)
	("t" mu4e-headers-mark-subthread)
	("T" mu4e-headers-mark-thread)

	;; miscellany
	("q" mu4e~headers-quit-buffer)
	("H" mu4e-display-manual)
	("h" describe-mode)
	("|" mu4e-view-pipe)                       ; does not seem built-in any longer

	;; switches
	("O" mu4e-headers-change-sorting)
	("P" mu4e-headers-toggle-threading)
	("Q" mu4e-headers-toggle-full-search)
	("V" mu4e-headers-toggle-skip-duplicates)
	("W" mu4e-headers-toggle-include-related)

	;; more miscellany
	("´" mu4e-update-mail-and-index)           ; differs from built-in
	(";" mu4e-context-switch)  
	("j" mu4e~headers-jump-to-maildir)

	("." nil))

#+end_src
* File Management
** Keeping Folders Clean
*** Backup Files

:NOTE:
Can't seem to get these settings to work, need to look into it further
:END:

~Backup Files~ are files with a ="\~"= at the end: =Emacs.org~=
First we are gonna set the the directory for our backup files, to store them in a single place instead of all over the system
More info here: [[https://www.gnu.org/software/emacs/manual/html_node/emacs/Backup.html]]

#+begin_src emacs-lisp
  ;; Store Backups in a single directory
  (setq backup-directory-alist `(("." . ,(expand-file-name "tmp/backups/" user-emacs-directory))))

#+end_src
*** Auto Save Files

~Auto Save Files~ are files with ="#"= on both ends: like =#Emacs.org#=. Next we are gonna save auto save files to a centralized location
#+begin_src emacs-lisp
  ;; auto-save-mode doesn't create the path automatically!
  (make-directory (expand-file-name "tmp/auto-saves" user-emacs-directory) t)

  ;; default for auto-save-list-file-prefix is "~/.emacs.d/auto-save-list/.saves~"
  ;; this moves it to a more centralized location (tmp)
  (setq auto-save-list-file-prefix (expand-file-name "tmp/auto-saves/sessions/" user-emacs-directory)
        auto-save-file-name-transforms `((".*" ,(expand-file-name "tmp/auto-saves/" user-emacs-directory) t)))

#+end_src
** Dired

Add the keybinding =C-x C-j= to <dired-jump>. Also we setup up the *base view* of the directory to *first list* *subdirectories* and then files
#+begin_src emacs-lisp
  ;; Configuring Dired
  (use-package dired
    :straight nil
    ;; Defer loading of dired config til one of the commands is used
    :commands (dired dired-jump)
    ;; The prefixes are arguments given to "ls" by dired
    :custom ((dired-listing-switches
              "-aghlv --group-directories-first"))
    :bind (("C-x C-j" . dired-jump))
      )

  ;; Adds icons to files and directories in dired           
  (use-package all-the-icons-dired
    :hook
    (dired-mode . all-the-icons-dired-mode))
#+end_src
** Dired Open

=dired-open= is part of [[https://github.com/Fuco1/dired-hacks][Dired Hacks]]. Enables opening files with external apps directly.
#+begin_src emacs-lisp
  ;; Use dired-open to launch external apps 
  (use-package dired-open)
  ;; open .png files in 'sxiv' and .mp4 files to open in 'mpv'
  ;; open .pdf in 'zahtura'
  (setq dired-open-extensions '(("gif" . "sxiv")
				("jpg" . "sxiv")
				("png" . "sxiv")
				("mkv" . "mpv")
				("mp4" . "mpv")
				("pdf" . "zathura")))
#+end_src
** Dired Filter

=dired-filter= is part of [[https://github.com/Fuco1/dired-hacks][Dired Hacks]]. Add Filters to [[id:459e7903-23b0-4716-a08c-6a4b8f80f2db][Dired]] Buffer.
#+begin_src emacs-lisp
  ;; Add Filters by file extension to dired buffer
  (use-package dired-filter)
#+end_src
** Ranger

[[https://github.com/ralesi/ranger.el][Ranger]] is a feature rich substitution for dired. It is inspired by the the VIM plugin ranger
#+begin_src emacs-lisp
  ;; Add Ranger Directory Explorer
  (use-package ranger
    :config
    ;; I don't want ranger to be the default
    (setq ranger-override-dired-mode nil)
    ;; Enable Image preview
    (setq ranger-show-literal nil)
    ;; Set Max Preview Size to 50MB
    ;; !!careful, this can really slow down your machine!!
    (setq ranger-max-preview-size 50)
    ;; Don't preview video/audio files
    (setq ranger-excluded-extensions ' ("mkv" "iso" "mp4" "mp3"))
    (pet/leader-keys
      "tmr"  '(ranger-mode :which-key "Ranger Mode")
      )
    )
#+end_src
* Password Management
** Password Store
#+begin_src emacs-lisp
  ;; Add wrapper for the command line tool 'pass'
  (use-package password-store
	:config
	;; If you want to adjust the default password length
	;; (setq password-store-password-length 12)

	;; Use Password Store as Source for Auth-Sources
	(setq auth-sources '(password-store))
	)

  ;; Add Functions to Leader Keys
  (pet/leader-keys
	"ap"  '(:ignore t :which-key "Password Store")
	"app" 'password-store-copy
	"api" 'password-store-insert
	"apg" 'password-store-generate)

#+end_src
* Contact Management

[[https://github.com/girzel/ebdb/blob/master/ebdb.org][EBDB]] is an [[id:3cf0fa83-18b3-4206-a109-f4606a94b8c1][Emacs]] [[id:1c44cf3c-6549-4e70-a3fd-491df7996dd5][Package]] meant to replace ~BBDB~ (~"Big Brother Data Base"~) as a tool for Contact Management.
In contrast to ~BBDB~ it is very well documented.
:NOTE:
~'E'~ stands for ~'EIEIO'~, which in turn means ~'Enhanced Implementation of Emacs Interpreted Objects'~ - a fancy way of saying ~Object Oriented Elisp~
:END:
#+begin_src emacs-lisp
  ;; Use EBDB for contact management
  (use-package ebdb
	:config
	;; Set the source files for Contact DBs
	(setq ebdb-sources (list                        
						(concat pet/home-dir "Contacts/default-contacts.db")
						(concat pet/home-dir "Contacts/family.db")
						(concat pet/home-dir "Contacts/work.db")
						(concat pet/home-dir "Contacts/organizations.db")
						(concat pet/home-dir "Contacts/mailing-lists.db")
						))

	;; Access Menu through '.' in EBDB Buffer
	;; (define-key ebdb-mode-map
	;;		  "." 'hydra-ebdb-menu/body)		  

	;; Specify the Display Format for Month and Day on Anniversaries
	;; (setq ebdb-anniversary-md-format "%B %d")
	;; Specify the Display Format for Year, Month and Day on Anniversaries
	;; (setq ebdb-anniversary-ymd-format "%B %d, %Y")

	;; Set Keybindings
	(pet/leader-keys
	  "c"  '(:ignore t :which-key "Contacts")
	  "co" '(ebdb-open :which-key "Open Contact Database")

	  )
	)

#+end_src
* Mail
** mu4e
[[id:6cdf0fb1-747c-44b6-9135-41c191bfcf34][mu4e]] (~mu-for-emacs~) is an e-mail client for [[id:3cf0fa83-18b3-4206-a109-f4606a94b8c1][GNU Emacs]] built on top of the =mu= ~e-mail search engine~ for the [[id:bf9b9431-2e38-411a-904f-c5b0c913520d][Command Line]].
Documentation can be found here: [[https://www.djcbsoftware.nl/code/mu/mu4e/][DJCBSoftware: mu4e]]
#+begin_src emacs-lisp
  ;; Store Location of Account Settings
  (setq pet/mail-accounts-config
		(concat pet/home-dir
				(convert-standard-filename
				 ".dotfiles-private/MailAccounts.el")))

  ;; Load mu4e as a Mail Interface for mu
  (use-package mu4e
	:straight nil
	:defer 20 ; Wait until 20 seconds after startup
	:config

	;; Load org-mode integration
	(require 'mu4e-org)

	;; Refresh mail using isync/mbsync every 10 minutes
	(setq mu4e-update-interval (* 10 60))
	(setq mu4e-get-mail-command "mbsync --all")
	(setq mu4e-maildir (concat pet/home-dir "Mail"))

	;; Sets the standard download directory for attachments
	;; (default: '~/')
	(setq mu4e-attachment-dir (concat pet/home-dir "Downloads"))

	;; Use Ivy for mu4e completions (maildir folders, etc)
	(setq mu4e-completing-read-function #'ivy-completing-read)

	;; Make sure that moving a message (like to Trash) causes the
	;; message to get a new file name.  This helps to avoid the
	;; dreaded "UID is N beyond highest assigned" error.
	;; See this link for more info: https://stackoverflow.com/a/43461973
	(setq mu4e-change-filenames-when-moving t)

	;; don't keep message buffers around
	(setq message-kill-buffer-on-exit t)

	;; Load external file with Account information
	(when
	   (file-exists-p pet/mail-accounts-config)
	 (load pet/mail-accounts-config)
	 )

	;; Sets the first context (specified in file above)
	;; to be loaded by default
	;; (Options: pick-first, ask, ask-if-none, always-ask)
	(setq mu4e-context-policy 'pick-first)

	;; Don't ask to quit
	(setq mu4e-confirm-quit nil)

	;; Set Contacts file for Org Contacts interaction
	(setq mu4e-org-contacts-file
		  (concat pet/org-dir "personal-contacts.org"))

	;; COMPOSING MAIL

	;; Don't include oneself in reply by default 
	(setq mu4e-compose-dont-reply-to-self t)

	;; ISO(ish) format date-time stamps in the header list
	;; default is "%x" (locale appropriate)
	(setq  mu4e-headers-date-format "%Y-%m-%d %H:%M")

	;; customize the reply-quote-string
	(setq message-citation-line-format
		  "On %Y-%m-%d %H:%M %Z %N wrote:\n")
	;; Replace 'message-insert-citation-line' with
	;; 'message-insert-formatted-citation-line'
	(setq message-citation-line-function
		  'message-insert-formatted-citation-line)

	;; HELPER FUNCTIONS

	;; Function to store header queries to reuse them later
	(defun pet/store-link-to-mu4e-query()
	  (interactive)
	  (let ((mu4e-org-link-query-in-headers-mode t))
		(call-interactively 'org-store-link)))

	;; Functions to automatically call Org Capture Templates on certain actions
	;; Follow up messages
	(defun pet/capture-mail-follow-up (msg)
	  (interactive)
	  (call-interactively 'org-store-link)
	  (org-capture nil "ef"))
	;; Read later messages
	(defun pet/capture-mail-read-later (msg)
	  (interactive)
	  (call-interactively 'org-store-link)
	  (org-capture nil "er"))

	;; Add custom actions for our capture templates
	(add-to-list 'mu4e-headers-actions
				 '("follow up" . pet/capture-mail-follow-up) t)
	(add-to-list 'mu4e-view-actions
				 '("follow up" . pet/capture-mail-follow-up) t)
	(add-to-list 'mu4e-headers-actions
				 '("read later" . pet/capture-mail-read-later) t)
	(add-to-list 'mu4e-view-actions
				 '("read later" . pet/capture-mail-read-later) t)

	(bind-keys
	 :map mu4e-headers-mode-map

	 ("{" . mu4e-headers-query-prev)             ; differs from built-in
	 ("}" . mu4e-headers-query-next)             ; differs from built-in

	 ("´" . mu4e-update-mail-and-index)          ; differs from built-in
	 ("|" . mu4e-view-pipe)               	     ; does not seem to be built in any longer
	 ("." . hydra-mu4e-headers/body))

	;; Expand personal Keyspace
	(pet/leader-keys
	  "m"  '(:ignore t :which-key "Mail")
	  "mm" 'mu4e
	  "mc" 'mu4e-compose-new
	  "ms" 'mu4e-update-mail-and-index)
	)

#+end_src
*** mu4e-alert

[[https://github.com/iqbalansari/mu4e-alert][mu4e-alert]] sends ~Notifications~ to your ~notifications daemon/window manager~

#+begin_src emacs-lisp
  ;; Sent alerts for received 
  (use-package mu4e-alert
    :after mu4e
    :config
    ;; Show unread emails from all inboxes
    (when (boundp 'pet/mu4e-inbox-query-new)
      (setq mu4e-alert-interesting-mail-query
            pet/mu4e-inbox-query-new)
      )

    ;; Show notifications for mails already notified
    (setq mu4e-alert-notify-repeated-mails nil)

    ;; Display symbol for received mails on mode line
    (mu4e-alert-enable-mode-line-display)
    ;; Enalbe Notifications
    (mu4e-alert-enable-notifications))

#+end_src
* ERC
~IRC Server~ lists:
+ [[https://hackint.org/servers][HackInt.org: Server]]
#+begin_src emacs-lisp
  ;; Define Servers
  (defun pet/irc-libera-server
	  (interactive)
	(erc-tls :server "irc.libera.chat"
			 :port   "6697")
	)
  (defun pet/irc-hackint-server
	  (interactive)
	(erc-tls :server "irc.hackint.org"
			 :port   "6697")
	)
  (defun pet/irc-hackint-de-server
	  (interactive)
	(erc-tls :server "irc.hackint.org"
			 :port   "6697")
	)
  (defun pet/irc-oftc-server
	  (interactive)
	(erc-tls :server "irc.oftc.net"
			 :port   "6697")
	)

  ;; Setup ERC Chat Client
  ;; Set the Prompt to represent the the buffer-name 
  (setq erc-prompt (lambda () (concat "[" (buffer-name) "]"))

		;; Basic Account Config
		;; Default Server
		erc-server "irc.libera.chat"
		erc-nick "sailti"

		;; More info on the modeline
		erc-track-shorten-start 8

		;; cleanup buffers
		erc-kill-buffer-on-part t

		;; channel list
		erc-autojoin-channel-alist
		'(("irc.libera.chat"
		   "#systemcrafters"
		   "#emacs"))

		;; bury private messages in buffer list
		erc-auto-query 'bury

		;; Autofill nickname column to 20 chars for better formatting 
		erc-fill-function 'erc-fill-static
		erc-fill-static-center 30
		)

  ;; Set Keyboard to be accessable by 'C-c i' 
  (global-set-key (kbd "C-c i") 'erc-tls)

  (pet/leader-keys
	"i"  '(:ignore t :which-key "IRC")
	"mi" 'erc-tls
	"ml" '(pet/irc-libera-server :which-key "Libera Chat")
	"mh" '(pet/irc-hackint-server :which-key "Hack Int")
	"mo" '(pet/irc-oftc-server :which-key "Open and Free Technology Community")
	)

#+end_src
* Elfeed - Emacs RSS Feed

~Elfeed~ is a package, that enables you to see your ~RSS Feed~ in [[id:3cf0fa83-18b3-4206-a109-f4606a94b8c1][Emacs]]. We also set up ~elfeed-score~
Great inspirations for ~Elfeed~ Configurations can be found here:
- [[https://protesilaos.com/emacs/dotemacs#h:0cd8ddab-55d1-40df-b3db-1234850792ba][Protesilaos.com]]
- [[https://github.com/jkitchin/scimax/blob/master/scimax-elfeed.el][GitHub.com: John Kitchin - Scimax-Elfeed]]
#+begin_src emacs-lisp
  (use-package elfeed
    :bind (("C-c f" . elfeed)
	   :map elfeed-search-mode-map
	   ("n" . (lambda () (interactive)
		    (next-line) (call-interactively
				 'elfeed-search-show-entry)))
	   ("p" . (lambda () (interactive)
		    (previous-line) (call-interactively
				     'elfeed-search-show-entry)))
	   ("m" . (lambda () (interactive)
		    (apply 'elfeed-search-toggle-all '(star))))
	   ("g" . elfeed-update)
	   ("G" . elfeed-search-update--force)
	   ;;:map elfeed-show-mode-map
	   ;;("w" . elfeed-show-yank))
	   )
  :config
  (setq elfeed-show-entry-switch 'display-buffer)
  (setq elfeed-search-remain-on-entry t)
   ;; Various Necessary/Helpful Settings
  (setq elfeed-use-curl t)
  (setq elfeed-curl-max-connections 10)
  (setq elfeed-db-directory
	(concat pet/dotfiles-emacsconfig-dir
		"elfeed/"))
  (setq elfeed-enclosure-default-dir
	"~/Downloads/")
  (setq elfeed-search-filter
	"@4-months-ago +unread")
  (setq elfeed-sort-order 'descending)
  (setq elfeed-search-clipboard-type 'CLIPBOARD)
  (setq elfeed-search-title-max-width 150)
  (setq elfeed-search-title-min-width 30)
  (setq elfeed-search-trailing-width 25)
  (setq elfeed-show-truncate-long-urls t)
  (setq elfeed-show-unique-buffers t)
  (setq elfeed-search-date-format
	'("%F %R" 16 :left)))
  ;; Load Feeds and Feed Settings  
  (load (concat pet/dotfiles-emacsconfig-dir
		"EmacsRSSFeed.el"))

  ;; Snippet for periodic update for feeds
  ;; (add-to-list 'elfeed-update-hooks 'elfeed-update)
  ;; (run-with-timer 0 (* 60 60 4) 'elfeed-update)
#+end_src
** Elfeed-Score

~Elfeed-Score~ is a ~package~ that applies [[https://www.gnu.org/software/emacs/manual/html_node/gnus/Scoring.html#Scoring][Gnu-Style Scoring]] to [[id:211d12c6-29db-4550-bd06-ef6f8b32640c][Elfeed]]

#+begin_src emacs-lisp
  ;; Load Elfeed Score
  (use-package elfeed-score
    :config
    (progn
      (elfeed-score-enable)
      (define-key elfeed-search-mode-map "="
                  elfeed-score-map))
    (setq elfeed-search-print-entry-function
          #'elfeed-score-print-entry)
    (setq elfeed-score-serde-score-file
          (concat pet/dotfiles-emacsconfig-dir
           "elfeed.score"))
    (setq elfeed-score-rule-stats-file
          (concat pet/dotfiles-emacsconfig-dir
                  "elfeed.stats")))
#+end_src
* Legder Mode
~Ledger Mode~ is an [[id:3cf0fa83-18b3-4206-a109-f4606a94b8c1][Emacs]] [[id:1c44cf3c-6549-4e70-a3fd-491df7996dd5][Packages]] that builds on top of the [[id:dec94196-4859-4fe6-be58-4237c61d9fad][CLI Tool]] [[https://www.ledger-cli.org/][Ledger]] for ~Plaintext Accounting~
#+begin_src emacs-lisp
  ;; Add Ledger Mode from Melpa
  ;; (Alternatively include the installation path of ledger to load-path)
  (use-package ledger-mode
    :config
    ;; Add mode Toggle to Keyspace
    (pet/leader-keys
      "tml"   '(ledger-mode :which-key "Ledger Mode"))

    ;; Load mode on .dat files
    :mode "\\.dat\\'")

#+end_src
* Org Mode

[[id:8510330a-9746-4684-ba60-04255df37924][Org Mode]] is one of THE killer-features of [[id:3cf0fa83-18b3-4206-a109-f4606a94b8c1][Emacs]].  It is a rich document editor, project planner, task and time tracker, blogging engine, and literate coding utility all wrapped up in one package.
** Org Font Faces

The =pet/org-font-setup= function configures various text faces to tweak the sizes of headings and use variable width fonts in most cases so that it looks more like we're editing a document in =org-mode=.  We switch back to fixed width (monospace) fonts for code blocks and tables so that they display correctly.
#+begin_src emacs-lisp
  ;; Helper Functions for Org
  (defun pet/org-font-setup ()
    ;; Set faces for heading levels
    (dolist (face '((org-level-1 . 1.2)
            (org-level-2 . 1.15)
            (org-level-3 . 1.1)
            (org-level-4 . 1.05)
            (org-level-5 . 1.02)
            (org-level-6 . 1.0)
            (org-level-7 . 1.0)
            (org-level-8 . 1.0)))
      (set-face-attribute
       (car face)
       nil
       :font "Cantarell"
       :weight 'regular
       :height (cdr face)))

    ;; Ensure that anything that should be
    ;; fixed-pitch in Org files appears that way
    (set-face-attribute 'org-block nil
            :foreground nil
            :inherit 'fixed-pitch)
    (set-face-attribute 'org-code nil
            :inherit '(shadow fixed-pitch))
    (set-face-attribute 'org-table nil
            :inherit '(shadow fixed-pitch))
    (set-face-attribute 'org-verbatim nil
            :inherit '(shadow fixed-pitch))
    (set-face-attribute 'org-special-keyword nil
            :inherit '(font-lock-comment-face
                   fixed-pitch))
    (set-face-attribute 'org-meta-line nil
            :inherit '(font-lock-comment-face fixed-pitch))
    (set-face-attribute 'org-checkbox nil
            :inherit 'fixed-pitch))

  ;; Replace list hyphen with dot
  (defun pet/org-replace-hyphen ()
    (font-lock-add-keywords
     'org-mode '(("^ *\\([-]\\) "
          (0 (prog1 () (compose-region
                (match-beginning 1)
                (match-end 1) "•"))))))
    )

  ;; Helper Function to quickly toggle Babel Confirm Evaluation
  (defun pet/org-toggle-babel-confirm-evaluate ()
  (interactive)
  "Toogle org-babel-confirm-evaluate on/ff"
  (if org-confirm-babel-evaluate
      (setq org-confirm-babel-evaluate nil)
    (setq org-confirm-babel-evaluate t))
  (print (concat "Org Babel Confirm State: "
         (format "%s" org-confirm-babel-evaluate))))

  ;; Store Org Directory
  (setq pet/org-dir
    (concat pet/home-dir
        (convert-standard-filename
         "Org/")))
  
#+end_src
** Org Plus Contrib
:NOTE:
The ~Package~ is listed as =org-plus-contrib=
:END:
#+begin_src emacs-lisp
  ;; Add Org Contrib Packages
  (use-package org-contrib)
  
#+end_src
** Basic Org Config
#+begin_src emacs-lisp
  ;; Setting Up Org Mode
  (use-package org
	:ensure org-plus-contrib
	:bind (("C-c l" . org-store-link))
	:config
	;; Add additional Export Options
	(require 'ox-beamer)       ;; LaTeX beamer
	(require 'ox-koma-letter)  ;; LaTeX KOMA Script
	(require 'ox-md)           ;; Markdown
	(require 'ox-texinfo)      ;; Texinfo
	(require 'ox-man)          ;; Man Page
	(require 'ox-org)          ;; Org Format

	;; Add additional Babel Support
	(require 'ob-ledger)       ;; Ledger

	(setq org-ellipsis " ▾")

	(setq org-directory pet/org-dir)
	(setq org-agenda-start-with-log-mode t)
	(setq org-log-done 'time)
	(setq org-log-into-drawer t)

	;; Setup inline previewing of latex fragments
	(setq org-latex-create-formula-image-program
	  'imagemagick)

	;; Set Latex PDF Export Process
	(setq org-latex-pdf-process
		  (list
		   "latexmk -shell-escape -bibtex -f -pdf -%latex -interaction=nonstopmode -output-directory=%o %f"
		   "latexmk -f -pdf -%latex -interaction=nonstopmode -output-directory=%o %f"
		   ))

	;; Add global Bibliography Source
	(setq org-cite-global-bibliography
		  (list
		   (concat pet/home-dir "Projects/Writing/00_Bibliographies/Main_Bib.bib")
		   ))

	;; Specify Agenda Files
	(setq org-agenda-files
	  (cons (concat pet/org-dir "journal")
		;; Add Files a starting with "personal-"
		(directory-files pet/org-dir t
				 "personal-\\(tasks\\|mail\\|chores\\|contracts\\)-?[A-Za-z]*.org")
		))

	;; Set Org Clock Sound File
	(setq org-clock-sound (concat pet/org-dir "sounds/Rush.wav"))


	;; Startup with inline images displayed
	(setq org-startup-with-inline-images t)


	;; Enable helper function replacing hyphen
	(pet/org-replace-hyphen)


	;; Customize Apps for Filelinks
	(cl-loop for type in
		 ;; Open PDFs with Zathura
	   '(("\\.pdf\\'" . "zathura %s")
		 ;; Open Pictures with sxiv 
		 ("\\.png\\'" . "sxiv %s")
		 ("\\.jpg\\'" . "sxiv %s")
		 ("\\.jpeg\\'" . "sxiv %s")
		 ;; Open Youtube links with freetube
		 ("\\.\\*youtu\\.\\*" . "freetube %s")
		 )
	   do
	   (add-to-list 'org-file-apps type))

	;; Add Custom TODO Keywords - in 2 seperate Sequences
	(setq org-todo-keywords
	  ;; Sequence 1 
	  '((sequence "TODO(t)" "NEXT(n)" "|" "DONE(d!)")
		;; Sequence 2
		(sequence "MEET(m)")
		;; Sequence 3
		(sequence "BACKLOG(b)" "PLAN(p)" "READY(r)"
			  "ACTIVE(a)" "REVIEW(v)" "WAIT(w@/!)"
			  "HOLD(h)" "|" "COMPLETED(c)" "CANC(k@)")))

	;; Set Keywords with shortcuts
	(setq org-tag-alist
	  '((:startgroup)
		;; Put mutually exclusive tags here
		(:endgroup)
		("@errand" . ?E)
		("@home" . ?H)
		("@work" . ?W)
		("@study" . ?S)
		("agenda" . ?a)
		("planning" . ?p)
		("publish" . ?P)
		("batch" . ?b)
		("note" . ?n)
		("idea" . ?i)))

	;; Set Refile Targets to be considered, Emphasis on Archive 
	(setq org-refile-targets
	  '(
		(nil :maxlevel . 9)
		("~/Org/personal-archive.org" :maxlevel . 1)
		("~/Org/personal-tasks.org" :maxlevel . 1)
		("~/Org/personal-sources.org" :maxlevel . 1)
		("~/Backup/Web-Bookmarks/1-bookmarks-import.org" :maxlevel . 9)
		("~/Backup/Web-Bookmarks/2-bookmarks-export.org" :maxlevel . 9)
		))

	;; Allow Creation of Parent nodes but ask for confirmation
	(setq org-refile-allow-creating-parent-nodes 'confirm)

	;; The default here is 999, which is a little to constricting for SQL and such
	(setq org-table-convert-region-max-lines 9999)

	;; Save Org buffers after refiling!
	(advice-add 'org-refile :after 'org-save-all-org-buffers)

	(pet/leader-keys
	  "ot" '(:ignore t :which-key "Toggle")
	  "otb" '(pet/org-toggle-babel-confirm-evaluate
		  :which-key "Babel Confirm Evaluation")
	  "otc" '(org-cdlatex-mode
		  :which-key "Org CDLaTeX Minor Mode")
	  "oti" '(org-toggle-inline-images
		  :which-key "Inline Images")
	  "otp" '(org-toggle-pretty-entities
		  :which-key "Pretty entities")
	  "oi" '(:ignore t :which-key "Import")
	  "oit" '(org-table-import
		  :which-key "Table")
	  "oa"  '(org-agenda :which-key "Org Agenda")
	  )
	)

  #+end_src
** Prettier Org Heading Stars
 
[[https://github.com/sabof/org-bullets][org-bullets]] replaces the heading stars in =org-mode= buffers with nicer looking characters that you can control.  Another option for this is [[https://github.com/integral-dw/org-superstar-mode][org-superstar-mode]]l

#+begin_src emacs-lisp
  ;; Setup Org Superstar
  (use-package org-superstar
	:after org)
  (add-hook 'org-mode-hook (lambda () (org-superstar-mode 1)))
  
#+end_src
** Org Mode LaTeX Setup
#+begin_src emacs-lisp
  ;; Org LaTeX Setup
  (eval-after-load 'ox-latex
	'(progn
	   (add-to-list 'org-latex-classes
					'("org-plain-latex"
					  "\\documentclass{article}
					   \\usepackage{hyperref}
					   \\usepackage{babel}
				[NO-DEFAULT-PACKAGES]
				[PACKAGES]
				[EXTRA]"
					  ("\\section{%s}" . "\\section*{%s}")
					  ("\\subsection{%s}" . "\\subsection*{%s}")
					  ("\\subsubsection{%s}" . "\\subsubsection*{%s}")
					  ("\\paragraph{%s}" . "\\paragraph*{%s}")
					  ("\\subparagraph{%s}" . "\\subparagraph*{%s}"))
					)
	   (add-to-list 'org-latex-classes
					'("moderncv"
					  "\\documentclass[11pt,
					  a4paper,
					  sans, 
					  ]{moderncv}
					  \\usepackage[ngerman]{babel}
					  \\usepackage{hyperref}
			   [NO-DEFAULT-PACKAGES]
			   [PACKAGES]
			   [EXTRA]"
					  ("\\section{%s}" . "\\section*{%s}")
					  ("\\subsection{%s}" . "\\subsection*{%s}")
					  ("\\subsubsection{%s}" . "\\subsubsection*{%s}")
					  ("\\paragraph{%s}" . "\\paragraph*{%s}")
					  ("\\subparagraph{%s}" . "\\subparagraph*{%s}")))

	   ;; Bigger LaTeX Previews
	   (plist-put org-format-latex-options :scale 1.5)
	   ;; Load language packages for pdflatex of lualatex / xelatex compilers
	   ;; (add-to-list 'org-latex-packages-alist
	   ;;              '("AUTO" "babel" t ("pdflatex")))
	   ;; (add-to-list 'org-latex-packages-alist
	   ;;              '("AUTO" "polyglossia" t ("xelatex" "lualatex")))
	   )
	)

  (eval-after-load 'ox-koma-letter
	'(progn
	   (add-to-list 'org-latex-classes
					'("scrlttr2"
					  "\\documentclass\{scrlttr2\}
	 \\usepackage[english]{babel}
	 \[DEFAULT-PACKAGES]
	 \[PACKAGES]
	 \[EXTRA]"))
	   (add-to-list 'org-latex-classes
					'("scrlttr2-german"
					  "\\documentclass[a4paper, 
				parskip=half,%
				fromalign=right, 
				fromrule=false, 
				11pt, 
				ngerman]{scrlttr2}
				\\usepackage{hyperref}
				\\usepackage{babel}
		   [NO-DEFAULT-PACKAGES]
		   [PACKAGES]
		   [EXTRA]"
					  ("\\section{%s}" . "\\section*{%s}")
					  ("\\subsection{%s}" . "\\subsection*{%s}")
					  ("\\subsubsection{%s}" . "\\subsubsection*{%s}")
					  ("\\paragraph{%s}" . "\\paragraph*{%s}")
					  ("\\subparagraph{%s}" . "\\subparagraph*{%s}")))
	   ;; Set Default Letter Class
	   (setq org-koma-letter-default-class "scrlttr2")
	   ;; Use Backaddress by default
	   (setq org-koma-letter-use-backaddress t)
	   )
	)

#+end_src
** Org Ref
Add [[https://github.com/jkitchin/org-ref][Org Ref]] for easier and more streamlined ~Citations~ and ~Cross-References~
#+begin_src emacs-lisp
  ;; Load Org Ref
  (use-package org-ref
	:config
	;; Bibtex Hydra
	;; (define-key bibtex-mode-map (kbd "H-b") 'org-ref-bibtex-hydra/body)
	)

#+end_src
** Org Contacts
#+begin_src emacs-lisp :tangle no
  ;; Load Org Contacts as a substitute for EBDB
  (use-package org-contacts
    :after org
    ;; Set Contacts File
    :custom (org-contacts-files (concat pet/org-dir "personal-contacts.org")))
  
#+end_src
** Use Ipython with Org

The package [[https://github.com/gregsexton/ob-ipython][ob-ipython]] is require get [[id:5fe7783f-d441-40a9-983c-7f671966c6e1][ipython]]-like functionality in [[id:8510330a-9746-4684-ba60-04255df37924][Org Mode]] WIP

#+begin_src emacs-lisp
  ;; (use-package ob-ipython)
#+end_src
  
** Configure Babel Languages

To execute or export code in =org-mode= code blocks, you'll need to set up =org-babel-load-languages= for each language you'd like to use. [[file:~/Projects/InfoFiles/Emacs/Worg/org-contrib/babel/languages/index.org][Org Babel Supported Languages]] documents all of the languages that you can use with =org-babel=.

#+begin_src emacs-lisp
  ;; (require 'ob-ledger)
  ;; (require-package 'ob-ipython)

  ;; enable/disable languages for org-babel
  (org-babel-do-load-languages
	'org-babel-load-languages
	'((emacs-lisp . t)    ;; Elisp
	  (lisp . t)          ;; Lisp
	  (clojure . t)       ;; Clojure     
	  (scheme . t)        ;; Scheme
	  (python . t)        ;; Python
	  ;; (ipython . t)       ;; IPython

	  ;;  the following two require ob-c
	  (C . t)             ;; C 

	  (perl . t)          ;; Perl
	  ;; (php . t)           ;; PHP
	  (R . t)             ;; R
	  ;; (Ruby . t)          ;; Ruby
	  (lua . t)           ;; Lua Programming Language
	  (shell . t)         ;; Command Line Programs 
	  (latex . t)         ;; LaTeX  
	  (sql . t)           ;; SQL
	  (sqlite . t)        ;; SQLite
	  (octave . t)        ;; Octave
	  (gnuplot . t)       ;; Gnuplot
	  (awk . t)           ;; awk
	  (sed . t)           ;; GNUsed
	  (css . t)           ;; CSS
	  (plantuml . t)      ;; PlantUML
	  (ledger . t)        ;; Ledger CLI
	  ))         

  ;; Add conf-unix to be recognized
  (push '("conf-unix" . conf-unix) org-src-lang-modes)

#+end_src
** Structure Templates

[[id:8510330a-9746-4684-ba60-04255df37924][Org Mode]]’s =structure templates= feature enables you to quickly insert code blocks into your Org files in combination with =org-tempo= by typing =<= followed by the template name like el or py and then press TAB. For example, to insert an empty ~emacs-lisp~ block below, you can type =<se= and press TAB to expand into such a block.

The second part to the [[id:59b9aa51-d637-43f5-b4c6-645bc7be0bc9][cons cell]] to contain the *name* of the ~language~ as it is known by [[https://orgmode.org/worg/org-contrib/babel/languages/index.html][Org Babel]]. (see =org-src-lang-modes=)

#+begin_src emacs-lisp
  ;; This is needed as of Org 9.2
  (require 'org-tempo)

  ;; Setup Source Block Templates
  (cl-loop for block in
		   '(("aw"   . "src awk")
			 ("cs"   . "src C")
			 ("cp"   . "src C++")
			 ("el"   . "src emacs-lisp")
			 ;; ("go" . "src go")
			 ;; ("ip" . "src ipython :session :async :exports both :results raw drawer")
			 ("json" . "src json")
			 ("lua"  . "src lua")
			 ("ldg"  . "src ledger :noweb yes")
			 ("ll"   . "src latex")
			 ("oc"   . "src octave")
			 ("perl" . "src perl")
			 ("ph"   . "src php")
			 ("py"   . "src python")
			 ("sc"   . "src scheme")
			 ("sh"   . "src shell")
			 ("sq"   . "src sql")
			 ("yaml" . "src yaml")
			 ;; R
			 ("rp"   . "src R")                                  ;; pure R             
			 ("rr"   . "src R :results both output")             ;; R with output
			 ("rs"   . "src R :session :results both output")    ;; R with output
			 ;; ("ts" . "src typescript"))
			 ;; This is an alternative Block
			 ;; For IPython
			 ;; ("si" . "src ipython :session :async :results output")
			 )
		   do
		   (add-to-list
			'org-structure-template-alist block))

#+end_src
** Capture Templates

=Capture templates= are a handy tool in the org mode toolbox, however the syntax for setting them up can sometimes be tricky.
The package =DOCT= tries to ease the setup. If you need more input, here's the [[https://github.com/progfolio/doct][doc]]
Other than that, the *documentation* for =capture templates= is [[https://orgmode.org/manual/Capture.html#Capture][here]]

#+begin_src emacs-lisp
  ;; Org-Capture
  (use-package org-capture
    :straight nil
    :init

    ;; Org Capture helper Variables

    ;; Save default Org Capture Template Dir
    (setq pet/org-cap-temp-dir
          (concat pet/temp-dir
                  (convert-standard-filename
                   "X1_Emacs_Templates/Org_Capture_Templates/"
                   )))

    ;; Org Capture helper Function

    ;; Get filename and store at current directory
    (defun pet/get-file-name-without-extension ()
      "Ask user for filename"
      (interactive)
      (let ((name (read-string "Filename: ")))
        (expand-file-name name))
      )
    ;; Get filename with ".org" and store at current directory
    (defun pet/get-org-file-name ()
      "Ask user for filename"
      (interactive)
      (let ((name (read-string "Filename: ")))
        (expand-file-name
         (format "%s.org" name)))
      )

    :config
    ;; Set default file for capture if not specified
    (setq org-default-notes-file
          (concat pet/home-dir "Projects/Notes/notes.org"))

    (setq org-capture-templates
          ;; Acronym captures
          `(("a" "Acronyms" table-line
             (file+headline "~/Org/acronyms.org" "Inbox")
             "| %^{ACRONYM} | %^{DEFINITION} | %^{DESCRIPTION}|")

            ;; Documents
            ("d" "Documents")
            ("dl" "Letter")
            ("dlf" "Letter Form" plain (file pet/get-org-file-name)
             "%[~/.dotfiles/00_OrgFiles/Templates/Capture-LetterTemp.org]"
             :if-new (file "${slug}.org" "#+TITLE: ${title}\n")
             :unnarrowed t
             )
            ("dlh" "Letter Home" plain (file pet/get-org-file-name)
             "%[~/Templates/X1_Emacs_Templates/Capture-LetterTemp-Filled-Home-Real.org]"
             :if-new (file "${slug}.org" "#+TITLE: ${title}\n")
             :unnarrowed t
             )
            ("do" "Org File")
            ("dod" "Default Org File"
             plain
             (file pet/get-org-writing-file-name)
             "#+TITLE: ${title}\n%[~/Templates/X1_Emacs_Templates/Org_Capture_Templates/default-org-file.orgctemp]"
             :unnarrowed t
             )


            ;; Email captures
            ("e" "Email")
            ("em" "Make email note" entry
             (file+headline "~/Org/personal-tasks.org" "Mail correspondence")
             ,(concat "* TODO [#A] %:subject :mail:\n"
                      "SCHEDULED: %t\n:"
                      "PROPERTIES:\n:CONTEXT: %a\n:END:\n\n"
                      "%i%?"))
            ("ef" "Follow Up" entry (file+olp "~/Org/personal-mail.org" "Follow Up")
             "* TODO Follow up with %:fromname on %a\nSCHEDULED:%t\nDEADLINE: %(org-insert-time-stamp (org-read-date nil t \"+2d\"))\n\n%i \n\n" :immediate-finish t)
            ("er" "Read Later" entry (file+olp "~/Org/personal-mail.org" "Read Later")
             "* TODO Read %:subject %a\nSCHEDULED:%t\nDEADLINE: %(org-insert-time-stamp (org-read-date nil t \"+2d\"))\n\n%i \n\n" :immediate-finish t)


         ;; Journal captures
            ("j" "Journal Entries")
            ("jj" "Journal" entry
             (file+olp+datetree "~/Org/journal/journal.org")
             "\n* %<%I:%M %p> - Journal :journal:\n\n%?\n\n"
             ;; ,(dw/read-file-as-string "~/Notes/Templates/Daily.org")
             :clock-in :clock-resume
             :empty-lines 1)
            ("jm" "Meeting" entry
             (file+olp+datetree "~/Org/journal/journal.org")
             "* %<%I:%M %p> - %a :meetings:\n\n%?\n\n"
             :clock-in :clock-resume
             :empty-lines 1)

            ;; Checklist captures
            ("l" "Lists")

            ("ls" "Shopping List" checkitem
             (file+olp "~/Org/lists-shopping.org" "Inbox")
             "[ ] %^{Itemname}")

            ("ll" "Literature" checkitem
             (file+olp "~/Org/lists-literature.org" "Inbox")
             "[ ] %^{Author} - %^{Titel}")

            ("lm" "Music" checkitem
             (file+olp "~/Org/lists-music.org" "Inbox")
             "[ ] %^{Interpret} - %^{Title}")

            ("q" "Quotes" entry
             (file+olp "~/Org/quotes.org" "Inbox")
             "* %^{Originator}\n\n#+begin_quote\n%?\n#+end_quote")

            ("t" "Tasks / Projects")
            ("tt" "TODO Task" entry (file+olp
                                     "~/Org/personal-tasks.org" "Inbox")
             "* TODO %?\n  %U\n  %a\n  %i" :empty-lines 1)  
            ("tb" "Basic task for future review" entry
             (file+headline "~/Org/personal-tasks.org" "Inbox")
             ,(concat "* %^{Title}\n"
                      ":PROPERTIES:\n"
                      ":CAPTURED: %U\n"
                      ":END:\n\n"
                      "%i%l"))
            ("ts" "Task with a due date (scheduled)" entry
             (file+headline "~/Org/personal-tasks.org" "Inbox")
             ,(concat "* %^{Scope of task||TODO|STUDY|MEET} %^{Title} %^g\n"
                      "SCHEDULED: %^t\n"
                      ":PROPERTIES:\n:CAPTURED: %U\n:END:\n\n"
                      "%i%?"))
            ("td" "Task with a due date (deadline)" entry
             (file+headline "~/Org/personal-tasks.org" "Inbox")
             ,(concat "* %^{Scope of task||TODO|STUDY|MEET} %^{Title} %^g\n"
                      "DEADLINE: %^t\n"
                      ":PROPERTIES:\n:CAPTURED: %U\n:END:\n\n"
                      "%i%?"))

            ("w" "Workflows")
            ("we" "Checking Email" entry (file+olp+datetree "~/Org/journal/Journal.org")
             "* Checking Email :email:\n\n%?" :clock-in :clock-resume :empty-lines 1)))

    ;; Activate Context Templates for Email 
    (setq org-capture-templates-contexts
      '(("e" ((in-mode . "notmuch-search-mode")
              (in-mode . "notmuch-show-mode")
              (in-mode . "notmuch-tree-mode")
              (in-mode . "mu4e-headers-mode")))))
    :bind
    ("C-c c" . org-capture))

#+end_src
** Org Crypt

~Org Crypt~ *encrypts* the *text of an entry*, but *not* the ~headline~, or ~properties~.
Behind the scene, it uses the (=epa=)~Emacs EasyPG Library~ to encrypt and decrypt files, and ~EasyPG~ needs a correct (=gnupg=)[[id:5dc04892-9105-45aa-845a-01b89448d753][GnuPG]] setup.

Any text below a headline that has a =‘crypt’= ~tag~ is automatically encrypted when the file is saved.
To use a *different tag*, customize the =org-crypt-tag-matcher= setting.

Excluding the =‘crypt’= ~tag~ from ~inheritance~ prevents already *encrypted text* from being *encrypted again*.

It’s possible to use ~different keys~ for different headings by specifying the respective key as property =‘CRYPTKEY’=, e.g.:

#+begin_example
  * Totally secret :crypt:
    :PROPERTIES:
    :CRYPTKEY: 0x0123456789012345678901234567890123456789
    :END:
#+end_example

To turn ~auto-save~ off *only locally*, you can insert this:
#+begin_example
# -*- buffer-auto-save-file-name: nil; -*-
#+end_example

#+begin_src emacs-lisp
  (require 'org-crypt)
  (org-crypt-use-before-save-magic)
  (setq org-tags-exclude-from-inheritance '("crypt"))

  (setq org-crypt-key nil)
  ;; GPG key to use for encryption
  ;; Either the Key ID or set to nil to use symmetric encryption.

  ;; (setq auto-save-default nil)
  ;; Auto-saving does not cooperate with org-crypt.el: so you need to
  ;; turn it off if you plan to use org-crypt.el quite often.  Otherwise,
  ;; you'll get an (annoying) message each time you start Org.

  ;; To turn it off only locally, you can insert this:
  ;;
  ;; # -*- buffer-auto-save-file-name: nil; -*-
#+end_src
** Org Roam
[[https://www.orgroam.com/][Org Roam]] is a very handy extension that enables you to fulfill your own personal ~Zettelkasten~ in [[id:8510330a-9746-4684-ba60-04255df37924][Org]]

  #+begin_src emacs-lisp
    ;; Org Roam is very handy to create a 'second brain'
    (use-package org-roam
      :init
      (setq org-roam-v2-ack t)
      :custom
      (org-roam-directory "~/Org")
      (org-roam-dailies-directory "journal/")

      (org-roam-completion-everywhere t)

      :bind (("C-c n l" . org-roam-buffer-toggle)
         ("C-c n f" . org-roam-node-find)
         ("C-c n i" . org-roam-node-insert)
         ("C-c n I" . org-roam-node-insert-immediate)
         :map org-mode-map
         ("C-M-i"    . completion-at-point)
         :map org-roam-dailies-map
         ("Y" . org-roam-dailies-capture-yesterday)
         ("T" . org-roam-dailies-capture-tomorrow))
      :bind-keymap
      ("C-c n d" . org-roam-dailies-map)
      :config
      ;; org roam capture templates
      (setq org-roam-capture-templates
        `(("d" "default" plain
           "%?"
           :if-new (file+head "%<%Y%m%d%H%M%S>-${slug}.org" "#+TITLE: ${title}\n#+DATE: %U\n")
           :unnarrowed t)
          ("w" "wiki")
          ("wn" "wiki node" plain
           "\n* ${title}\n\n%?" 
           :if-new (file+head "%<%Y%m%d%H%M%S>-${slug}.org"
                  "\n#+filetags: :%^{filetag}:\n#+TITLE: ${title}\n#+AUTHOR: %^{author}\n#+DATE: %U\n\n")
           :unnarrowed t)
          ("wi" "wiki index node" plain
           "\n* ${title} Kompendium Index\n\n%?" 
           :if-new (file+head "%<%Y%m%d%H%M%S>-${slug}.org"
                      "\n#+filetags: :index:%^{filetag}:\n#+TITLE: ${title}\n#+AUTHOR: %^{author}\n#+DATE: %U\n\n")
           :unnarrowed t)
          ("wr" "wiki references node" plain
           "\n* References\n%?\n** Websites\n\n** Literature" 
           :if-new (file+head "%<%Y%m%d%H%M%S>-${slug}.org"
                      "\n#+filetags: :%^{filetag}:references:\n#+TITLE: ${title}\n#+AUTHOR: %^{author}\n#+DATE: %U\n\n")
           :unnarrowed t)
          ("l" "programming language" plain
           "* Characteristics\n\n- Family: %?\n- Inspired by: \n\n* Reference:\n\n"
           :if-new (file+head "${slug}.org" "#+TITLE: ${title}\n")
           :unnarrowed t)  
          ("b" "book notes" plain (file "~/.dotfiles/00_OrgFiles/Templates/RoamCapture-BookNoteTemp.org")
           :if-new (file+head "${slug}.org" "#+TITLE: ${title}\n")
           :unnarrowed t)
          ("p" "project" plain "* Goals\n\n%?\n\n* Tasks\n\n** TODO Add initial tasks\n\n* Dates\n\n"
           :if-new (file+head "${slug}.org" "#+TITLE: ${title}\n#+filetags: Project")
           :unnarrowed t)
          ))


       ;; dailies capture template
      (setq org-roam-dailies-capture-templates
        `(("d" "default" entry "* %<%I:%M %p>: %?"
           :if-new (file+head "%<%Y-%m-%d>.org" "#+TITLE: %<%Y-%m-%d>\n"))))

      (org-roam-setup)
      ;; Ensure the keymap is available
      (require 'org-roam-dailies)
      (org-roam-db-autosync-mode)

      (pet/leader-keys
        "or"  '(:ignore t :which-key "Org Roam")
        "ort" 'org-roam-tag-add
        "ora" 'org-roam-alias-add
        "ord" 'org-roam-diagnostics
        "oru" 'org-roam-ui-open
        )
      )

  #+end_src
*** Org Roam Helper Functions

#+begin_src emacs-lisp
  ;; Helper Function to insert org note immediately
  (defun org-roam-node-insert-immediate (arg &rest args)
    (interactive "P")
    (let ((args (push arg args))
	  (org-roam-capture-templates
	   (list (append (car org-roam-capture-templates)
			 '(:immediate-finish t)))))
      (apply #'org-roam-node-insert args)))
#+end_src
*** Org Roam UI

[[https://github.com/org-roam/org-roam-ui][Org Roam UI]] is a super neat extension that visualizes your Org Roam Note Node Structure. It uses a websocket to display that visualization in a webbrowser. The webserver started will run here: http://127.0.0.1:35901/
#+begin_src emacs-lisp
  ;; A Visualization of your org roam node structure
  (use-package org-roam-ui
    :straight
    (:host github :repo "org-roam/org-roam-ui"
	   :branch "main" :files ("*.el" "out"))
    :after org-roam
    ;;         normally we'd recommend hooking orui after org-roam, but since org-roam does not have
    ;;         a hookable mode anymore, you're advised to pick something yourself
    ;;         if you don't care about startup time, use
    ;;  :hook (after-init . org-roam-ui-mode)
   :config
   (setq org-roam-ui-sync-theme t
	org-roam-ui-follow t
	org-roam-ui-update-on-save t
	org-roam-ui-open-on-start t))
#+end_src
** Org Drill

~Org Drill~ is a ~spaced repetition program~ (like ~Anki~)  built to work with [[id:3cf0fa83-18b3-4206-a109-f4606a94b8c1][Emacs]]

The ~Hint-Separator~ is set to =||= from =|=
The ~Left and Right Clozer~-delimiters are set to =<[= and =]>= respectively from the default =[= and =]=.
This is done to better fit in with the [[id:62eadd2d-023b-4d03-8eb0-527528f6e224][LaTeX]]-~Syntax~ used in some notes.
You can find an example file here: [[id:a5bb4b50-f15b-49c5-b2cb-bc80a65c14d6][spanish.org]]

#+begin_src emacs-lisp
    (use-package org-drill
      :config
      (progn
        (add-to-list 'org-modules 'org-drill)
        (setq org-drill-add-random-noise-to-intervals-p t)
        (setq org-drill-hint-separator "||")
        (setq org-drill-left-cloze-delimiter "<[")
        (setq org-drill-right-cloze-delimiter "]>")
        (setq org-drill-learn-fraction 1.0))
      )
#+end_src
** Org Auto Tangle

This safes the need for the ~Helper Functions~ below that I used previously
:NOTE:
You need to add =#+auto_tangle: t= to the files you want to use this feature
:END:
#+begin_src emacs-lisp
  ;; Org AddOn Auto Tangle Org Files
  ;; Add '#+auto_tangle: t' to files 
  (use-package org-auto-tangle
    :defer t
    :hook (org-mode . org-auto-tangle-mode)
    :config
    (setq org-auto-tangle-default nil))

#+end_src
* Developement Tools
** Rainbow Delimiters 

[[https://github.com/Fanael/rainbow-delimiters][rainbow-delimiters]] is useful in programming modes because it colorizes nested parentheses and brackets according to their nesting depth.  This makes it a lot easier to visually match parentheses in Emacs Lisp code without having to count them yourself.

#+begin_src emacs-lisp
  ;; Add rainbow delimiters for better readability
  (use-package rainbow-delimiters
    :hook (prog-mode . rainbow-delimiters-mode))
#+end_src

** Matching Parenthesis

[[id:3cf0fa83-18b3-4206-a109-f4606a94b8c1][Emacs]] highlights matching parenthesis by default.
This Setting is meant to make that highlighting stand out more
  
#+begin_src emacs-lisp
  ;; Customize highlighting of matching parenthesis
  (use-package paren
  :config
  (set-face-attribute
   'show-paren-match-expression nil :background "#363e4a")
  (show-paren-mode 1))
  
#+end_src

** Company Mode
[[https://company-mode.github.io/][Company Mode]] is one of the *most useful* [[id:127b78f9-ac8e-4ce0-a316-0850559c44e4][Modes]] that *enhances* [[id:3cf0fa83-18b3-4206-a109-f4606a94b8c1][Emacs]] ~Autocompletion Capabilities~
#+begin_src emacs-lisp
  ;; Helper Functions (for hooks mostly)
  (defun pet/company-text-mode ()
    "Sets 'company-mode' for 'text-mode'"
    ;; Activate completion after 3 letters in text mode
    (setq company-minimum-prefix-length 3))

  ;; Load Company Mode for Auto Completion
  (use-package company
    :config
    ;; activate global company mode
    (global-company-mode 1)
    ;; make company perform completions with tab
    (company-tng-mode 1)

    ;; Set hooks
    (add-hook 'text-mode-hook 'pet/company-text-mode)

    ;; Enable Cycling Options back to the Beginning
    (setq company-selection-wrap-around t)

    ;; Align Annotations (paramenters, arguments, etc..) right of tooltip
    (setq company-tooltip-align-annotations t)

    ;; Disable Company Mode in Strings or Comment
    (setq company-idle-delay
      (lambda () (if (company-in-string-or-comment) nil 0.3)))

    ;; Allow Prefix Length to be change per buffer
    (make-variable-buffer-local 'company-minimum-prefix-length)

    ;; Add Company Mode to Leader Keys
    (pet/leader-keys
      "tmc"  '(global-company-mode :which-key "Global Company Mode")
      )
    )

#+end_src

*** Company Additions
**** Backends
***** Shell/Bash
****** Company Shell
~Documentation~ can be found here: [[https://github.com/Alexander-Miller/company-shell][GitHub.com: Company Shell]]
#+begin_src emacs-lisp
  ;; Add Company Extension for Bash and Shell
  (use-package company-shell
    :config
    (add-to-list 'company-backends '(company-shell company-shell-env))
    )
  
#+end_src
***** LaTeX
****** Company Math
This is an extension for [[id:62eadd2d-023b-4d03-8eb0-527528f6e224][LaTeX]]. ~Documentation~ can be found here:
#+begin_src emacs-lisp
  ;; local configuration for TeX modes
  (defun pet/company-latex-mode ()
    "Sets 'company-mode' for 'text-mode'"
    ;; Add Backands
    (setq-local company-backends
                (append '((company-math-symbols-latex company-latex-commands))
                        company-backends)))

  ;; Add Company Extension for LaTeX Math
  (use-package company-math
    :config

    ;; Add hooks to Modes
    ;; Tex Mode
    (add-hook 'tex-mode-hook 'pet/company-latex-mode)
    ;; Org Mode
    (add-hook 'org-mode-hook 'pet/company-latex-mode)

    ;; global activation of the unicode symbol completion 
    ;;(add-to-list 'company-backends 'company-math-symbols-unicode))
    )

#+end_src
***** C/C++/C#
****** Company C-Headers
This is an ~Extension~ for [[id:ba074e3c-58a2-4d3a-b1ec-4475993eaa99][C/C++/C#]] for ~Company Mode~. ~Documentation~ can be found here: [[https://github.com/randomphrase/company-c-headers][GitHub.com: Company-C-Headers]]
#+begin_src emacs-lisp
  ;; Add Company Extension for C/C++
  ;; (use-package company-c-headers)

#+end_src
***** Python
****** Company Jedi
This is an ~Extension~ for [[id:d76cab21-70db-4332-9b40-cb6b6af6643f][Python]] for ~Company Mode~. ~Documentation~ can be found here: [[https://github.com/emacsorphanage/company-jedi][GitHub.com: Company Jedi]]
#+begin_src emacs-lisp
  ;; local configuration for Python modes
  (defun pet/company-python-mode ()
    "Sets 'company-mode' for 'text-mode'"
    ;; Activate completion after 1 letters in python mode
    (setq company-minimum-prefix-length 1)
    ;; Add Jedi to Company Backends
    (add-to-list 'company-backends 'company-jedi))


  ;; Add Company Extension for Python
  (use-package company-jedi
    :config
    (add-hook 'python-mode-hook 'pet/company-python-mode)
  )

#+end_src
***** Lua
This is an ~Extension~ for Lua for ~Company Mode~. ~Documentation~ can be found here: [[https://github.com/ptrv/company-lua][GitHub.com: Company-Lua]]
#+begin_src emacs-lisp
  ;; local configuration for Python modes
  (defun pet/company-lua-mode ()
    "Sets 'company-mode' for 'text-mode'"
    ;; Activate completion after 1 letters in python mode
    (setq company-minimum-prefix-length 1)
    ;; Add Lua to Company Backends
    (setq-local company-backends '((company-lua
                                    company-etags
                                    company-dabbrev-code
                                    company-yasnippet))))


    ;; Add Company Extension for Lua
    (use-package company-lua
      :config
      (add-hook 'lua-mode-hook 'pet/company-lua-mode)
    )

#+end_src

**** Frontends
***** Company Box
~Company Box~ is an *alternative* ~Frontend~ that enables options like *different colors* for *different backends* and more.
Information can be found here: [[https://github.com/sebastiencs/company-box][GitHub.com: Company-Box]]
#+begin_src emacs-lisp
  ;; Add Alternative Frontend
  (use-package company-box
    :hook (company-mode . company-box-mode))

#+end_src
** Terminal Modes
*** Term Mode

Setting up the integrated terminal emulator

#+begin_src emacs-lisp

  (use-package term
    :config
    (setq explicit-shell-file-name "bash")
    ;;(setq explicit-zsh-args '())
    ;; Regexp to use when searching for last prompt
    (setq term-prompt-regexp
          "^[^#$%>\\n]*[#$%>] *"))

  ;; add 256 color support
  (use-package eterm-256color
    :hook (term-mode . eterm-256color-mode))

#+end_src

*** vterm

vterm is a terminal emulater that is written in C and handles the shell, meaning that Emacs is just a wrapper handling formatting of its output. It's normally a lot faster than the normal term mode

You can find the documentation here: [[https://github.com/akermu/emacs-libvterm]]

#+begin_src emacs-lisp

  (use-package vterm
    :commands vterm
    :config
    ;; uncomment this line if you want to use zsh
    ;; (setq vterm-shell "zsh")
    ;; set maximum lines of output to be stored in RAM
    (setq vterm-max-scrollback 10000))

#+end_src

*** Eshell

Eshell is a variation of the normal "shell" mode and is a lot more customizable.
Looking at current developement, it might also be a lot more relevant in the future, as a "emacs-friendly" alternative to "vterm"

#+begin_src emacs-lisp

  ;; adds git related prompt elements to eshell
  (use-package eshell-git-prompt)

  (use-package eshell

    :config
    ;; Set the prompt theme to powerline
    (eshell-git-prompt-use-theme 'powerline))
#+end_src

For documentation on *eshell-git-prompt* look here: [[https://github.com/xuchunyang/eshell-git-prompt]]

** Projectile
[[https://projectile.mx/][Projectile]] is a project management library for [[id:3cf0fa83-18b3-4206-a109-f4606a94b8c1][Emacs]] which makes it a lot easier to navigate around code projects for various languages.  Many packages integrate with Projectile so it's a good idea to have it installed even if you don't use its commands directly.

#+begin_src emacs-lisp
  ;; Use Projectile for project management
  (use-package projectile
    :diminish projectile-mode
    :config (projectile-mode)
    :custom ((projectile-completion-system 'ivy))
    ;; Setup default keybinding for projectile
    :bind-keymap
    ("C-c p" . projectile-command-map)
    :init
    ;; NOTE: Set this to the folder where you keep your Git repos!
    (when (file-directory-p "~/Projects/Programming")
      (setq projectile-project-search-path
	    '("~/Projects/Programming")))
    (setq projectile-switch-project-action
	  #'projectile-dired)
	;; Add Projectile Functions to User Leader Keys
    (pet/leader-keys
     "p"  '(:ignore t :which-key "projects")
     "pf"  'counsel-projectile-find-file
     "ps"  'counsel-projectile-switch-project
     "pF"  'counsel-projectile-rg
     ;; "pF"  'consult-ripgrep
     "pp"  'counsel-projectile
     "pc"  'projectile-compile-project
     "pd"  'projectile-dired)
    )

  ;; Projectile Counsel Integration
  (use-package counsel-projectile
    :config (counsel-projectile-mode))
#+end_src
** Language Servers

We use the excellent [[ https://emacs-lsp.github.io/lsp-mode/][lsp-mode]] to enable ~IDE-like functionality~ for many different programming languages via “language servers” that speak the *Language Server Protocol*. Before trying to set up =lsp-mode= for a particular language, check out the documentation for your language so that you can learn which [[https://emacs-lsp.github.io/lsp-mode/page/languages/][language servers are available]] and how to install them.

The lsp-keymap-prefix setting enables you to define a prefix for where lsp-mode’s default keybindings will be added. I highly recommend using the prefix to find out what you can do with lsp-mode in a buffer.

The which-key integration adds helpful descriptions of the various keys so you should be able to learn a lot just by pressing C-c s in a lsp-mode buffer and trying different things that you find there.

#+begin_src emacs-lisp 
  ;; Add Language Server Support
  (use-package lsp-mode
    :hook ((c-mode          ;; clangd
            c++-mode        ;; clangd
            c-or-c++-mode   ;; clangd
            python-mode     ;; pyright
            typescript-mode ;; ts-ls (tsserver wrapper)
            js-mode         ;; ts-ls (tsserver wrapper)
            web-mode        ;; ts-ls/HTML/CSS
            ) . lsp-deferred)
    :commands (lsp lsp-deferred)
    :bind (:map lsp-mode-map
        ("M-TAB" . completion-at-point))
    :custom (lsp-headerline-breadcrumb-enable nil)
    :config (lsp-enable-which-key-integration t)
    ;; automatically set project root as determined by projectile
    ;; (setq lsp-auto-guess-root t)
    ;; Disable logging of all language server message for performance
    (setq lsp-log-io nil)
    ;; Set LSP Restart to auto (interactive by default)
    ;; (setq lsp-restart 'auto-restart)
    ;; disable symbol references
    (setq lsp-enable-symbol-highlighting nil)
    ;; disable on type formatting
    (setq lsp-enable-on-type-formatting nil)
    ;; disable signature conditions and documentation
    (setq lsp-signature-auto-activate nil)
    (setq lsp-signature-render-documentation nil)
    ;; disable eldoc hook
    (setq lsp-eldoc-hook nil)
    ;; disable modeline informations
    (setq lsp-modeline-code-actions-enable nil)
    (setq lsp-modeline-diagnostics-enable nil)
    ;; disable breadcrumb/headerline
    (setq lsp-headerline-breadcrumb-enable nil)
    ;; disable semantic tokens
    (setq lsp-semantic-tokens-enable nil)
    ;; disable code folding
    (setq lsp-enable-folding nil)
    ;; dont enable imenu automatically
    (setq lsp-enable-imenu nil)
    ;; disable snippet completion
    (setq lsp-enable-snippet nil)
    ;; Set delay (0.5 is default)
    (setq lsp-idle-delay 0.5)
    ;; Increase amount of data read from process for lsp (1MB)
    (setq read-process-output-max (* 1024 1024))

    ;; Add Lsp Functions to Leader Keys
    (pet/leader-keys
      "tl"  '(:ignore t :which-key "lsp")
      "tld" 'xref-find-definitions
      "tlr" 'xref-find-references
      ;; "tln" 'lsp-ui-find-next-reference
      ;; "tlp" 'lsp-ui-find-prev-reference
      "tls" 'counsel-imenu
      ;; "tle" 'lsp-ui-flycheck-list
      ;; "tlS" 'lsp-ui-sideline-mode
      "tlX" 'lsp-execute-code-action)
    )
#+end_src

*** lsp-ui

=lsp-ui= is a set of UI enhancements built on top of lsp-mode which make Emacs feel even more like an IDE. Check out the screenshots on the [[https://emacs-lsp.github.io/lsp-ui/][lsp-ui homepage]] to see examples of what it can do.

#+begin_src emacs-lisp
  ;; Add lsp ui for higher level ui options
  ;;(use-package lsp-ui
  ;;  :commands lsp-ui-mode
  ;;  ;; :hook (lsp-mode . lsp-ui-mode)
  ;;  ;; Show lsp info on sideline
  ;;  :config
  ;;  (setq lsp-ui-doc-enable nil)
  ;;  (setq lsp-ui-doc-header t)
  ;;  (setq lsp-ui-doc-include-signature t)
  ;;  (setq lsp-ui-doc-border (face-foreground 'default))
  ;;  (setq lsp-ui-sideline-show-code-actions t)
  ;;  (setq lsp-ui-sideline-delay 0.05)
  ;;  ;; (setq lsp-ui-sideline-enable t)
  ;;  ;; (setq lsp-ui-sideline-show-hover nil)
  ;;  ;; (setq lsp-ui-doc-position 'bottom)
  ;;  )
  
#+end_src
*** lsp-treemacs

+ =lsp-treemacs= provides nice tree views for different aspects of your code like symbols in a file, references of a symbol, or diagnostic messages (errors and warnings) that are found in your code.

Try these commands with =M-x=:

 - =lsp-treemacs-symbols= - Show a tree view of the symbols in the current file
  - =lsp-treemacs-references= - Show a tree view for the references of the symbol under the cursor
  - =lsp-treemacs-error-list= - Show a tree view for the diagnostic messages in the project

This package is built on the =treemacs= ~package~ which might be of some interest to you if you like to have a file browser at the left side of your screen in your editor.

#+begin_src emacs-lisp
  ;; Extend lsp and treemacs integration
  (use-package lsp-treemacs
    :after lsp)
#+end_src

*** Debugging

There's a companion mode for =lps-mode= specifically for debugging
Dap stands for Debug Adapter
#+begin_src emacs-lisp
  (use-package dap-mode
    :after lsp-mode
    :config (dap-auto-configure-mode))
  ;;(use-package dap-mode
  ;;  :after lsp-mode
  ;;  :custom
  ;;  (lsp-enable-dap-auto-configure nil)
  ;;  :config
  ;;  (dap-ui-mode 1)
  ;;  (dap-tooltip-mode 1)
  ;;  (require 'dap-node)
  ;;  (dap-node-setup))
#+end_src
** Flycheck
[[https://www.flycheck.org/en/latest/user/quickstart.html][Flycheck]] adds syntax checking capagilities. We set it up to be loaded together with =lsp-mode=. You could also load it globally.
#+begin_src emacs-lisp
  ;; Enable Flycheck for syntax checking.
  ;; Defer loading until used with lsp-mode
  (use-package flycheck
    :defer t
    :hook (lsp-mode . flycheck-mode))
#+end_src
** Apheleia
[[https://github.com/radian-software/apheleia][Apheleia]] formats code automatically according to rules set by [[https://github.com/psf/black][Black]], [[https://prettier.io/][Prettier]] or [[https://pkg.go.dev/cmd/gofmt][GoFMT]] and so on.

:NOTE:
You need to have the underlying ~Code Formatters~ like [[https://github.com/psf/black][Black]], [[https://prettier.io/][Prettier]] or [[https://pkg.go.dev/cmd/gofmt][GoFMT]] installed, to use them with this [[id:1c44cf3c-6549-4e70-a3fd-491df7996dd5][Package]]
:END:
#+begin_src emacs-lisp
  ;; Add Apheleia Code Formatter
  (use-package apheleia
	:config (apheleia-global-mode 1))
  
#+end_src
** Easier Commenting
If you want to make commenting easier, the following package is very helpful. Despite the name, it is not only restricted to =evil-mode=
#+begin_src emacs-lisp
  ;; Easier Commenting, not just for evil-mode
  (use-package evil-nerd-commenter
    :bind ("M-/" . evilnc-comment-or-uncomment-lines))
  
#+end_src

** Magit
[[https://magit.vc/][Magit]] is one of the best Git interfaces. Common Git operations are easy to execute quickly using Magit's command panel system.

#+begin_src emacs-lisp
  (use-package magit
    :bind ("C-x g" . magit-status)
    :commands (magit-status magit-get-current-branch)
    :custom
    (magit-display-buffer-function
      #'magit-display-buffer-same-window-except-diff-v1))

  ;; Add Magit Commands to Leader Key Space
  (pet/leader-keys
    "g"   '(:ignore t :which-key "git")
    "gs"  'magit-status
    "gd"  'magit-diff-unstaged
    "gc"  'magit-branch-or-checkout
    "gl"   '(:ignore t :which-key "log")
    "glc" 'magit-log-current
    "glf" 'magit-log-buffer-file
    "gb"  'magit-branch
    "gP"  'magit-push-current
    "gp"  'magit-pull-branch
    "gf"  'magit-fetch
    "gF"  'magit-fetch-all
    "gr"  'magit-rebase)
#+end_src
** Languages
Language specific Settings can be found here
*** Elisp

#+begin_src emacs-lisp
  ;; Add Flycheck to elisp mode
  (add-hook 'emacs-lisp-mode-hook #'flycheck-mode)

  (pet/leader-keys
    "E"   '(:ignore t :which-key "eval")
    "Eb"  '(eval-buffer :which-key "eval buffer"))

  (pet/leader-keys
    :keymaps '(visual)
    "Er" '(eval-region :which-key "eval region"))
#+end_src
*** Octave/Matlab

Just a short config adjusting the =auto-mode-alist=
#+begin_src emacs-lisp
  ;; Load Octave Mode automatically for specified files
  (setq auto-mode-alist
	(cons '("\\.m$" . octave-mode) auto-mode-alist))
  (setq auto-mode-alist
	(cons '("\\.sci$" . octave-mode) auto-mode-alist))

  ;; Setup Octave Mode
  (add-hook 'octave-mode-hook
	    (lambda ()
	      (abbrev-mode 1)
	      (auto-fill-mode 1)
	      (if (eq window-system 'x)
		  (font-lock-mode 1))))

  ;; Use Infodocs within Emacs
  (autoload 'octave-help "octave-hlp" nil t)
#+end_src

*** LaTeX

Improve [[id:62eadd2d-023b-4d03-8eb0-527528f6e224][LaTeX]] support for [[id:3cf0fa83-18b3-4206-a109-f4606a94b8c1][Emacs]]
Lsp for latex should not be needed since its part of [[https://www.gnu.org/software/auctex/documentation.html][AUCTex]]
#+begin_src  emacs-lisp
  ;; Integrated environment for TeX
  (use-package tex-site
	:straight auctex
	:config
	;; Add Reftex Support to AUCTeX
	(setq reftex-plug-into-AUCTeX t)
	;; Set Default Bibliography
	(setq pet/default-bib
		  (concat pet/home-dir "~/Projects/Writing/00_Bibliographies/Main_Bib.bib"))
	(setq reftex-default-bibliography '("~/Projects/Writing/00_Bibliographies/Main_Bib.bib"))
	;; Automatically insert math environment with '$'
	(setq TeX-electric-math t)
	;; Autocomplete command on '\'
	(setq TeX-electric-escape t)
	;; Autoinsert braces after '^' and '_' in math mode
	(setq TeX-electric-sub-and-superscript t)
	)


  ;; enable auto saving tex files
  (setq TeX-auto-save t)
  ;; enable completion and multifile structure (include/input)
  (setq TeX-parse-self t)
  (setq-default TeX-master nil)

  ;; set $ to insert math environment
  ;; ... for plain TeX
  (add-hook 'plain-TeX-mode-hook
			(lambda () (set (make-local-variable 'TeX-electric-math)
							(cons "$" "$"))))
  ;; ... for LaTeX
  (add-hook 'LaTeX-mode-hook
			(lambda () (set (make-local-variable 'TeX-electric-math)
							(cons "\\(" "\\)"))))

  ;; Load RefTeX...
  ;; ... with AUCTeX LaTeX mode
  (add-hook 'LaTeX-mode-hook 'turn-on-reftex)
  ;; ... with with Emacs latex mode
  (add-hook 'latex-mode-hook 'turn-on-reftex)

  ;; Enable auto completion of right braces (")}]\)\]\}")
  ;; Use 'C-u 1' or 'C-q' before to disable 
  (setq LaTeX-electric-left-right-brace t)

  ;; LatexMK support for AUCTeX
  ;; (use-package auctex-latexmk)

  ;; Useful features for LaTeX-mode
  ;;(use-package latex-extra)

  ;; Fast input methods for LaTeX environments and math
  (use-package cdlatex
	:bind
	(:map LaTeX-mode-map
		  ("C-#" . cdlatex-mode))
	:config
	;; Maybe add hook to autoload cdlatex
	;; (add-hook 'LaTeX-mode-hook #'turn-on-cdlatex)
	;; (add-hook 'org-mode-hook #'turn-on-org-cdlatex)

	;; Added personal keybinding
	(pet/leader-keys
		  "tmc" '(cdlatex-mode
				  :which-key "CDLaTeX Minor Mode"))
	)

  (setq TeX-view-program-selection
		'(((output-dvi has-no-display-manager) "dvi2tty")
		  ((output-dvi style-pstricks) "dvips and gv")
		  (output-dvi "xdvi")
		  (output-pdf "Zathura")
		  (output-html "xdg-open")))

#+end_src

*** Python
Improve [[id:d76cab21-70db-4332-9b40-cb6b6af6643f][Python]] functionality of [[id:3cf0fa83-18b3-4206-a109-f4606a94b8c1][Emacs]]

The commented lines are for distributions like Ubuntu, where =python= referes to python 2 and python 3 need to be called by =python3=

Pyrigth is a language server written in C# that is a lot faster then the normal pyls.
Python debugger is set to =debugpy= (don't forget to pip install =debugpy= - alternative to "ptvsd>=4.2"), because it is recommended over the default ptsd
#+begin_src emacs-lisp
  ;; Set Default Indentation for Python 
  (setq-default python-indent-offset 4)

	;;;; Customize Python Mode for emacs, add lsp
  ;;(add-hook 'python-mode-hook 'lsp-deferred)
  ;;  :custom
  ;;  (python-shell-interpreter "python")
  ;;  (dab-python-executable "python")
  ;;  (dab-python-debugger 'debugpy)
  ;;  :config
  ;;  (require 'dab-python)
  ;;  )

  ;; Setup lsp-pyright Server
  (use-package lsp-pyright
	:hook (python-mode . (lambda () (require 'lsp-pyright)))
	;; Use Python 3 in case Python 2 is installed as well
	:init (when (executable-find "python3")
			(setq lsp-pyright-python-executable-cmd "python3"))
	)


  ;; Enable Virtual Environment Support
  (use-package pyvenv
	:config
	(pyvenv-mode 1))

#+end_src

*** PHP
~Documentation~ can be found here: [[https://github.com/emacs-php/php-mode][GitHub.com: PHP Mode]]
#+begin_src emacs-lisp
  ;; Load PHP Package
  (use-package php-mode)

  ;; Load Org PHP Support
  ;; (use-package ob-php)

#+end_src

*** Lua
#+begin_src emacs-lisp
  ;; Add Mode for Lua
  (use-package lua-mode)
  
#+end_src

*** Web Mode
~Web-Mode~ is an *alternative* [[id:127b78f9-ac8e-4ce0-a316-0850559c44e4][Mode]] for editing [[id:df751d5b-04e3-4cb2-83de-76a6e39943d6][HTML]] Documents in [[id:3cf0fa83-18b3-4206-a109-f4606a94b8c1][Emacs]]
~Documentation~ can be found here: [[https://web-mode.org/][Web-Mode.org]]
#+begin_src emacs-lisp
  ;; Add alternative Mode for HTML Developement
  ;; (use-package web-mode)
  
#+end_src
*** ESS Mode
[[https://ess.r-project.org/][ESS Mode]] (~Emacs Speaks Statistics~) is an [[id:3cf0fa83-18b3-4206-a109-f4606a94b8c1][Emacs]] [[id:127b78f9-ac8e-4ce0-a316-0850559c44e4][Mode]] meant for ~Programming~ with [[id:8b26358a-672f-43c1-8507-1b388b3a31cd][Languages]] meant for ~statistical Computation~ like [[id:c64bc74b-bc42-4208-bf36-3c6832392de9][R]], ~S~, ~SAS~, ~SPSS~
#+begin_src emacs-lisp
  ;; Load Support for statistical Computation
  (use-package ess)
  
#+end_src
**** ESS Smart Equals

=ess-smart-equals= is a ~package extension~ for ~ESS Mode~ to make some ~Quality of Life adjustments~ like *automatic* ~closing braces~, inserting =<-= for ='='= and more.
~Documentation~ can be found here: [[https://github.com/genovese/ess-smart-equals][GitHub.com: ess-smart-equals]]
#+begin_src emacs-lisp
  ;; Helper Package for assignment operators and more in ESS
  (use-package ess-smart-equals
    ;; Add additional support (automatic pared braces etc..)
    :init   (setq ess-smart-equals-extra-ops '(brace paren percent))
    ;; Load moade with ESS
    :after  (:any ess-r-mode inferior-ess-r-mode ess-r-transcript-mode)
    ;; Activate modoe
    :config (ess-smart-equals-activate))

#+end_src
**** ESS R Insert Obj
=ess-r-insert-obj= is a ~package extension~ for ~ESS Mode~ to improve the interaction with the ~completion framework~ provided by the [[id:c64bc74b-bc42-4208-bf36-3c6832392de9][R]] [[id:c7d7135a-3f11-4fea-8bcf-e3e83318f453][Package]] =tidyverse=
~Documentation~ can be found here: [[https://github.com/ShuguangSun/ess-r-insert-obj][GitHub.com: ess-r-insert-obj]]
#+begin_src emacs-lisp
  ;; improve interaction between ESS and R Package 'tidyverse'
  (use-package ess-r-insert-obj)
  
#+end_src
**** ESS View Data
=ess-view-data= is a ~package extension~ for ~ESS Mode~ to do data views and manipulation similar to the [[id:c64bc74b-bc42-4208-bf36-3c6832392de9][R]] [[id:c7d7135a-3f11-4fea-8bcf-e3e83318f453][Package]] =tidyverse=
~Documentation~ can be found here: [[https://github.com/ShuguangSun/ess-view-data][GitHub.com: ess-view-data]]
#+begin_src emacs-lisp
  ;; Tidyverse-like data views and manipulations
  (use-package ess-view-data)
#+end_src
*** CSV
Add support for ~CSV-like~ files in [[id:3cf0fa83-18b3-4206-a109-f4606a94b8c1][Emacs]]
~Repository~ can be found here: [[https://git.savannah.gnu.org/cgit/emacs/elpa.git/?h=externals/csv-mode][Git.Savannah.GNU.org: csv-mode]]
#+begin_src emacs-lisp
  ;; Major mode for editing comma/char separated values
  (use-package csv-mode)

#+end_src
*** YAML
Add support for [[id:cf227bfa-d401-4f12-b0ad-2fd1a233f206][YAML]] ~Files~
#+begin_src emacs-lisp
  ;; Add support for YAML files
  (use-package yaml-mode
    :mode "\\.ya?ml\\'")

#+end_src
*** Gnuplot Mode

~Gnuplot Mode~ adds support for ~Gnuplot~ to [[id:3cf0fa83-18b3-4206-a109-f4606a94b8c1][Emacs]]
~Documentation~ can be found here: [[https://github.com/mkmcc/gnuplot-mode][GitHub.com: Gnuplot-Mode]]
#+begin_src emacs-lisp
  ;; Add Gnuplot Support
  (use-package gnuplot-mode
	:config
	;; Use this if gnuplot is not /usr/bin/gnuplot
	(setq gnuplot-program "/usr/bin/gnuplot")

	;; automatically enter gnuplot mode
	(setq auto-mode-alist 
		  (append '(("\\.\\(gp\\|gnuplot\\)$" . gnuplot-mode)) auto-mode-alist))
	)
  
#+end_src
*** PlantUML
You can find the ~Documentation~ here: [[https://github.com/skuro/plantuml-mode][GitHub.com: PlantUML-Mode]]
#+begin_src emacs-lisp
  ;; Add PlantUML Support
  (use-package plantuml-mode
    :config
    ;; Set Execution Mode to Render with Local Binary
    (setq plantuml-executable-path "/usr/bin/plantuml")
    (setq plantuml-default-exec-mode 'executable)
    ;; Set load path condition
    :mode "\\.pl?a?n?t?uml\\'"
    )

#+end_src

* Automatically Tangle Files
:NOTE:
This Section is ~deprecated~ since the ~Org Auto Tangle~ was added
:END:
** Emacs
*** Config File
#+begin_src emacs-lisp :tangle no
  ;; Setup Automatic Tangling of Files
  
  ;; Automatically tangle config file
  ;; Helper Function to that does the tangling
  (defun pet/org-babel-tangle-emacs-config ()
    (when (string-equal
           (buffer-file-name)
           (concat pet/dotfiles-dir
                   "000_OrgFiles/EmacsConfig.org"))
      ;; Have the user confirm tangle
      (let ((org-confirm-babel-evaluate t))
        (org-babel-tangle))))

  ;; This hook automatically evaluates the helper
  ;; function after saving the buffer
  (add-hook 'org-mode-hook
            (lambda ()
              (add-hook
               'after-save-hook
               #'pet/org-babel-tangle-emacs-config)))
#+end_src
