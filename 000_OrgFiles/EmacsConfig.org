# -*- ispell-local-dictionary: "british"; -*-
#+TITLE:        Personal Emacs Configuration
#+DATE:         [2024-01-06]
#+DESCRIPTION:  This configuration is organized into subdirectories, which makes it easier to enable or disable large parts of it
#+PROPERTY:     header-args:emacs-lisp :tangle ../C01_EmacsConfiguration/.emacs.d/init.el :mkdirp yes
#+STARTUP:      hideblocks show2levels
#+OPTIONS:      toc:2
#+auto_tangle:  t

* Table of Contents                                                     :toc:
- [[#introduction][Introduction]]
  - [[#starting-emacs-daemon][Starting Emacs Daemon]]
- [[#header][Header]]
- [[#package-system-setup][Package System Setup]]
  - [[#straight-package-manager][Straight Package Manager]]
  - [[#package-repositories][Package Repositories]]
  - [[#early-load-org-mode][Early Load Org Mode]]
  - [[#set-load-path-early][Set Load Path Early]]
- [[#initial-section][Initial Section]]
  - [[#loading-custom-lisp-files][Loading Custom Lisp Files]]
- [[#load-package-configurations][Load Package Configurations]]
- [[#keybinding-configuration][Keybinding Configuration]]
  - [[#evil-mode][Evil Mode]]
  - [[#general][General]]
  - [[#which-key][Which Key]]
- [[#file-management][File Management]]
  - [[#dired-extensions][Dired Extensions]]
  - [[#ranger][Ranger]]
  - [[#pdf-tools][PDF Tools]]
  - [[#openwith][Openwith]]
- [[#quality-of-live-extensions][Quality of Live Extensions]]
  - [[#collection-of-qol-extensions][Collection of QoL Extensions]]
  - [[#multiple-cursors][Multiple Cursors]]
  - [[#undo-tree][Undo-Tree]]
  - [[#projectile][Projectile]]
  - [[#yasnippets][YASnippets]]
- [[#graphical-user-interface-tweaks-and-extensions][Graphical User Interface Tweaks and Extensions]]
  - [[#all-the-icons][All The Icons]]
  - [[#modelines][Modelines]]
  - [[#themes][Themes]]
  - [[#perspective][Perspective]]
  - [[#dashboard][Dashboard]]
  - [[#ivy-with-counsel-and-prescient][Ivy with Counsel and Prescient]]
  - [[#helm][Helm]]
  - [[#hydra][Hydra]]
  - [[#treemacs-mode][Treemacs Mode]]
  - [[#neotree][Neotree]]
  - [[#beacon][Beacon]]
  - [[#gui-extensions][GUI Extensions]]
- [[#developement-tools][Developement Tools]]
  - [[#magit][Magit]]
  - [[#consult][Consult]]
  - [[#company-mode][Company Mode]]
  - [[#dev-tool-collection][Dev Tool Collection]]
  - [[#devdocs][DevDocs]]
  - [[#language-support][Language Support]]
- [[#terminal-modes][Terminal Modes]]
  - [[#vterm][Vterm]]
  - [[#eshell][Eshell]]
- [[#org-mode][Org Mode]]
  - [[#org-font-faces][Org Font Faces]]
  - [[#org-plus-contrib][Org Plus Contrib]]
  - [[#vanilla-org-config][Vanilla Org Config]]
  - [[#org-mode-latex-tweaks][Org Mode LaTeX Tweaks]]
  - [[#org-babel-languages][Org Babel Languages]]
  - [[#structure-templates][Structure Templates]]
  - [[#capture-templates][Capture Templates]]
  - [[#org-extensions][Org Extensions]]
- [[#legder-mode][Legder Mode]]
- [[#citeproc][Citeproc]]
- [[#mail][Mail]]
  - [[#mu4e][mu4e]]
- [[#password-management][Password Management]]
  - [[#password-store][Password Store]]
  - [[#emacs-totp][Emacs TOTP]]
- [[#contact-management][Contact Management]]
  - [[#ebdb][EBDB]]
- [[#erc][ERC]]
- [[#eradio][ERadio]]
- [[#elfeed---emacs-rss-feed][Elfeed - Emacs RSS Feed]]
  - [[#load-elfeed][Load Elfeed]]
  - [[#elfeed-score][Elfeed-Score]]
  - [[#elfeed-org][Elfeed-Org]]
  - [[#elfeed-dashboard][Elfeed-Dashboard]]
- [[#automatically-tangle-files][Automatically Tangle Files]]
  - [[#emacs][Emacs]]

* Introduction

This is my personal [[id:3cf0fa83-18b3-4206-a109-f4606a94b8c1][Emacs Configuration]] and therefore its geared towards my needs.
It is not meant as a prime example or template nor is it aimed to be a general purpose setup.

Feel free to adopt parts that you find useful.
A big chunk of the Configuration was inspired by the ~Emacs From Scratch Youtube-Series~ from [[https://systemcrafters.net/emacs-from-scratch/][SystemCrafters.net]], which i highly recommend as a starting point to [[id:3cf0fa83-18b3-4206-a109-f4606a94b8c1][Configuring Emacs]]. I added and changed alot however since starting out.

Another good source is [[https://protesilaos.com/emacs/dotemacs][Protesilaos.com: Dotemacs]], which i took inspiration from for the [[*Capture Templates][Org Capture Templates]].

I also added parts of [[https://gitlab.com/dwt1/dotfiles/-/blob/master/.config/emacs/config.org][DT’s Emacs Config]], especially those that deal with [[*Evil Mode][Evil-Mode]].

For some of the developement tools like [[*DevDocs][DevDocs]] I took inspiration from [[https://github.com/gopar/.emacs.d][GitHub.com: Gopar - Emacs.d]]

** Starting Emacs Daemon

To get the best out of [[id:3cf0fa83-18b3-4206-a109-f4606a94b8c1][Emacs]], it's recommended to use the ~Daemon Capabilities~ it offers. This *might slow down your system Startup* time, but it definitely *significantly increases* [[id:3cf0fa83-18b3-4206-a109-f4606a94b8c1][Emacs]] ~Startup Time~ if you connect to the server with the =emacsclient= [[id:bf9b9431-2e38-411a-904f-c5b0c913520d][command]].

If you want to *startup* the [[id:0e90f8b7-dd79-42fd-928f-c6b2ff4a63a2][Emacs Daemon]] automatically and your ~System~ makes use of [[id:c0a74747-b48a-49a4-ae88-a612f27a3b28][systemd]], simply create the file =emacs.service= under =~/.config/systemd/user/= with the following contents:
#+begin_src shell
  [Unit]
  Description=Emacs - The extensibles, customizable, self-documenting Editor
  Documentation=info:emacs man:emacs(1) https://gnu.org/software/emacs/

  [Service]
  Type=forking
  ExecStart=/usr/local/bin/emacs --daemon
  ExecStop=/usr/local/bin/emacsclient --eval "(kill-emacs)"
  Environment=SSH_AUTH_SOCK=%t/keyring/ssh
  Restart=on-failure

  [Install]
  WantedBy=default.target
#+end_src

After that run

#+begin_src shell
  systemctl enable --user emacs
#+end_src

so [[id:c0a74747-b48a-49a4-ae88-a612f27a3b28][systemd]] would copy the ~configuration file~ into central places and it would start ~Emacs~ service at boot time.

To run Emacs service right now, use

#+begin_src shell
  systemctl start --user emacs
#+end_src

* Header
#+begin_src emacs-lisp

  ;;   _____ __  __    _    ____ ____
  ;;  | ____|  \/  |  / \  / ___/ ___|
  ;;  |  _| | |\/| | / _ \| |   \___ \
  ;;  | |___| |  | |/ ___ \ |___ ___) |
  ;;  |_____|_|  |_/_/   \_\____|____/
  ;;

  ;; NOTE: init.el is generated from EmacsTestConfig.org.
  ;; Please change your settings in that file
  ;; using Emacs and init.el will be generated automatically!

#+end_src
* Package System Setup
** Straight Package Manager
Emacs has a built in package manager but it doesn't make it easy to automatically install packages on a new system the first time you pull down your configuration.  [[https://github.com/jwiegley/use-package][use-package]] is a really helpful package used in this configuration to make it a lot easier to automate the installation and configuration of everything else we use.

We also use ~straight.el~ to manage our packages instead of ~package.el~, because it allows for more detailed customization and enables more streamlined installation of packages from ~github~ or ~gitLab~, that are not yet part of *elpa* or *melpa*.
The *bootstrap* script is needed to install straight.el without the need for package.el. It should work cross platform without the need to update anytime soon. It's recommended by the authors to use. If straight.el is already installed, the script won't run again!
A guide from ~System Crafters~ to =straight.el= can be found [[https://systemcrafters.cc/advanced-package-management/using-straight-el/][here]].

If you set up ~straight.el~ with ~use-package~ (straight-use-package 'use-package) you have to replace =:ensure= with =:straight=

#+begin_src emacs-lisp
  ;; bootstrap script to install straight.el
  (defvar bootstrap-version)
  (let ((bootstrap-file
         (expand-file-name
          "straight/repos/straight.el/bootstrap.el"
          (or (bound-and-true-p straight-base-dir)
              user-emacs-directory)))
        (bootstrap-version 7))
    (unless (file-exists-p bootstrap-file)
      (with-current-buffer
          (url-retrieve-synchronously
           "https://raw.githubusercontent.com/radian-software/straight.el/develop/install.el"
           'silent 'inhibit-cookies)
        (goto-char (point-max))
        (eval-print-last-sexp)))
    (load bootstrap-file nil 'nomessage))

  ;; Use straight.el for use-package expressions
  (straight-use-package 'use-package)

  ;; Make sure to always install packages (pendant to use-package-always-ensure)
  (setq straight-use-package-by-default t)

#+end_src
** Package Repositories

#+begin_src emacs-lisp
  ;; This is set just to be able to lookup packages
  ;; It's not required since we use straight anyway
  (setq package-archives
        '(("melpa" . "https://melpa.org/packages/")
          ("melpa-stable" . "https://stable.melpa.org/packages/")
          ("org" . "https://orgmode.org/elpa/")
          ("elpa" . "https://elpa.gnu.org/packages/")))

#+end_src
** Early Load Org Mode
This is done to mitigate the ~Version Mismatch Error~, see ~NOTE~ below
#+begin_src emacs-lisp
    ;; Early load Org Mode
    (use-package org)

#+end_src
:NOTE:
Version mismatch is commonly encountered in the following situations:

1. Emacs is loaded using literate Org config and more recent Org
   version is loaded inside the file loaded by ‘org-babel-load-file’.
   ‘org-babel-load-file’ triggers the built-in Org version clashing
   the newer Org version attempt to be loaded later.

   It is recommended to move the Org loading code before the
   ‘org-babel-load-file’ call.

2. New Org version is loaded manually by setting ‘load-path’, but some
   other package depending on Org is loaded before the ‘load-path’ is
   configured.
   This "other package" is triggering built-in Org version, again
   causing the version mismatch.

   It is recommended to set ‘load-path’ as early in the config as
   possible.

3. New Org version is loaded using straight.el package manager and
   other package depending on Org is loaded before straight triggers
   loading of the newer Org version.

   It is recommended to put

    (straight-use-package 'org)

   early in the config.  Ideally, right after the straight.el
   bootstrap.  Moving ‘use-package’ :straight declaration may not be
   sufficient if the corresponding ‘use-package’ statement is
   deferring the loading.
:END:
** Set Load Path Early
#+begin_src emacs-lisp
  ;; Set mu4e directory path
  (if (file-directory-p "~/Projects/Programs/github-gitlab/mu/build/mu4e")
	  (setq pet/mu4e-load-path "~/Projects/Programs/github-gitlab/mu/build/mu4e")
	(if (file-directory-p "/usr/share/emacs/site-lisp/mu4e")
	(setq pet/mu4e-load-path "/usr/share/emacs/site-lisp/mu4e")
	  (if (file-directory-p "/usr/share/emacs/site-lisp/mu/mu4e")
	  (setq pet/mu4e-load-path "/usr/share/emacs/site-lisp/mu/mu4e")
	(if (file-directory-p "/usr/local/share/emacs/site-lisp/mu4e")
		(setq pet/mu4e-load-path "/usr/local/share/emacs/site-lisp/mu4e")
	  (if (file-directory-p "/usr/local/share/emacs/site-lisp/mu/mu4e")
		  (setq pet/mu4e-load-path "/usr/local/share/emacs/site-lisp/mu/mu4e")
		nil)))))

  ;; Add mu4e load path
  (if (boundp 'pet/mu4e-load-path)
	  (add-to-list 'load-path pet/mu4e-load-path)
	nil)

#+end_src
* Initial Section
** Loading Custom Lisp Files
#+begin_src emacs-lisp
  ;; Load Functions
  (when (file-exists-p "~/.dotfiles/C01_EmacsConfiguration/lisp/functions.el")
    (load "~/.dotfiles/C01_EmacsConfiguration/lisp/functions.el"))

  ;; Load Variables
  (pet/load-file "~/.dotfiles/C01_EmacsConfiguration/lisp/variables.el")

  ;; Load Basic UI
  (pet/load-file (concat pet/dotfiles-emacsconfig-dir "lisp/basic_ui.el"))

  ;; Load Basic QoL Adjustments
  (pet/load-file (concat pet/dotfiles-emacsconfig-dir "lisp/basic_qol.el"))

  ;; Load Basic QoL Adjustments
  (setq pet/ledger-categories '())  ;; incase the file can’t be loaded
  (pet/load-file "~/.dotfiles-private/Configurations/C2-Emacs/EmacsPrivateVariables.el")

#+end_src
* Load Package Configurations
#+begin_src emacs-lisp
  (cl-loop for config in
  		 ;; Load Evil Configuration
           '("package_configs/evil_config.el"

  		   ;; Load General Configuration adjusted for Evil
  		   "package_configs/general_evil_config.el"
  		   ;; Load General Leader Keys after General init
  		   "package_configs/general_leader_keys.el"

  		   ;; ;; Load General Configuration for standard Emacs
  		   ;; "package_configs/general_standard_config.el"
  		   ;; ;; Load General Leader Keys after General init
  		   ;; "package_configs/general_leader_keys.el"

  		   ;; Load Which Key Configuration
  		   "package_configs/which_key_config.el"

  		   ;; Load Dired Extensions Configuration
  		   "package_configs/dired_extensions_config.el"

  		   ;; ;; Load Ranger Configuration
  		   ;; "package_configs/ranger_config.el"

  		   ;; Load Openwith Configuration
  		   "package_configs/openwith_config.el"

  		   ;; Load PDF-Tools Configuration
  		   "package_configs/pdf_tools_config.el"

  		   ;; Load All The Icons Configuration
  		   "package_configs/all_the_icons_config.el"

  		   ;; Load Doom Modeline Configuration
  		   "package_configs/modeline_config.el"

  		   ;; Load Themes Configuration
  		   "package_configs/themes_config.el"

  		   ;; Load QoL Extensions Collection Configuration
  		   "package_configs/qol_collection_config.el"

  		   ;; Load Projectile Configuration
  		   "package_configs/projectile_config.el"

  		   ;; ;; Load Undo-Tree Configuration
  		   ;; "package_configs/undo_tree_config.el"

  		   ;; ;; Load Multiple Cursors Configuration
  		   ;; "package_configs/multiple_cursors_config.el"

  		   ;; Load Yasnippets Configuration
  		   "package_configs/yasnippets_config.el"

  		   ;; Load Dashboard Configuration
  		   "package_configs/dashboard_config.el"

  		   ;; ;; Load Beacon Configuration
  		   ;; "package_configs/beacon_config.el"

  		   ;; Load GUI Extensions Collection
  		   "package_configs/gui_extensions_config.el"

  		   ;; Load Ivy (and Counsel) Configuration
  		   "package_configs/ivy_config.el"

  		   ;; ;; Load Helm Configuration
  		   ;; "package_configs/helm_config.el"

  		   ;; Load Perspective Configuration
  		   "package_configs/perspective_config.el"

  		   ;; Load Treemacs Configuration
  		   "package_configs/treemacs_config.el"

  		   ;; ;; Load Neotree Configuration
  		   ;; "package_configs/neotree_config.el"

  		   ;; ;; Load Hydra Configuration
  		   ;; "package_configs/hydra_config.el"

  		   ;; Load Org Configuration
  		   "package_configs/org_config.el"

  		   ;; Load Ledger Mode Configuration
  		   "package_configs/ledger_mode_config.el"

  		   ;; Load Vterm Mode Configuration
  		   "package_configs/vterm_config.el"

  		   ;; Load EShell Mode Configuration
  		   "package_configs/eshell_config.el"

  		   ;; Load Magit Configuration
  		   "package_configs/magit_config.el"

  		   ;; Load Developement Tools Collection Configuration
  		   "package_configs/dev_tools_collection_config.el"

  		   ;; ;; Load Company Configuration
  		   ;; "package_configs/company_config.el"

  		   ;; ;; Load Consult Configuration
  		   ;; "package_configs/consult_config.el"

  		   ;; Load Traditional Language Modes
  		   "package_configs/language_modes_config.el"

  		   ;; Load Tree-Sitter Language Modes
  		   "package_configs/language_ts_modes_config.el"

  		   ;; ;; Load LSP Mode Configuration
  		   ;; "package_configs/lsp_mode_config.el"

  		   ;; Load Eglo Configuration
  		   "package_configs/eglot_config.el"

  		   ;; Load Eglo Configuration
  		   "package_configs/devdocs_config.el"

  		   ;; ;; Load Citeproc Configuration
  		   ;; "package_configs/citeproc_config.el"

  		   ;; Load mu4e Configuration
  		   "package_configs/mu4e_config.el"

  		   ;; ;; Load Password Store Configuration
  		   ;; "package_configs/password_store_config.el"

  		   ;; Load TOTP Configuration
  		   "package_configs/totp_config.el"

  		   ;; ;; Load EBDB Configuration
  		   ;; "package_configs/ebdb_config.el"

  		   ;; Load Elfeed Configuration
  		   "package_configs/elfeed_config.el"

  		   ;; Load ERC Configuration
  		   "package_configs/erc_config.el"

  		   ;; Load ERadio Configuration
             "package_configs/eradio_config.el")
           do
           (pet/load-file (concat user-emacs-directory config)))

#+end_src
* Keybinding Configuration
** Evil Mode
:PROPERTIES:
:header-args:emacs-lisp: :tangle ../C01_EmacsConfiguration/.emacs.d/package_configs/evil_config.el :mkdirp yes
:END:

Let's bring [[id:8212a283-520d-495c-86ee-fc47d1a00363][Vi]] to [[id:3cf0fa83-18b3-4206-a109-f4606a94b8c1][Emacs]]
[[https://github.com/emacs-evil/evil][GitHub.com - Evil]]
#+begin_src emacs-lisp
  ;; Bring Vi to Emacs
  (use-package evil
    :init  ;; Tweak Evil before loading
    (setq evil-want-integration t)
    (setq evil-want-keybinding nil)
    (setq evil-vsplit-window-right t)
    (setq evil-split-window-below t)
    (setq evil-undo-system 'undo-redo)  ;; Adds vim-like C-r redo functionality
    (evil-mode))

  ;; Using RETURN to follow links in Org/Evil
  ;; Unmap keys in 'evil-maps if not done, (setq org-return-follows-link t) will not work
  (with-eval-after-load 'evil-maps
    (define-key evil-motion-state-map (kbd "SPC") nil)
    (define-key evil-motion-state-map (kbd "RET") nil)
    (define-key evil-motion-state-map (kbd "TAB") nil))
  ;; Setting RETURN key in org-mode to follow links
  (setq org-return-follows-link  t)

#+end_src
*** Evil Collection

[[https://github.com/emacs-evil/evil-collection][Evil-Collection]] adds ~Evil~ support for a bunch of package and modes that don't work well with ~Evil~ by default.
If you want to enable all default modes supported by ~Evil-Collection~, simply run =evil-collection-init=.
You can however specify a list of modes to enable first by modifying the =evil-collection-mode-list= Variable.
Look at the GitHub Source Repo for more info.
#+begin_src emacs-lisp
  ;; Enable Evil in more Modes
  (use-package evil-collection
    :after evil
    :config
    ;; Do not uncomment this unless you want to specify each and every mode
    ;; that evil-collection should works with.  The following line is here
    ;; for documentation purposes in case you need it.
    ;; (setq evil-collection-mode-list '(calendar dashboard dired ediff info magit ibuffer))
    (add-to-list 'evil-collection-mode-list 'help) ;; evilify help mode
    (evil-collection-init))

#+end_src
*** Evil Escape

[[https://github.com/syl20bnr/evil-escape][Evil-Escape]]
#+begin_src emacs-lisp :tangle no
  (use-package evil-escape
    :config
    (setq evil-escape-unordered-key-sequence t)
    (setq-default evil-escape-key-sequence "jk")
    ;; (add-to-list evil-escape-enable-only-for-major-mode 'prog-mode)
    ;; (add-to list evil-escape-excluded-major-modes 'erc-mode)
    (setq-default evil-escape-delay 0.2))

#+end_src
*** Evil Tutor

[[https://github.com/syl20bnr/evil-tutor][Evil-Tutor]] brings the famous ~VimTutor~ to [[id:3cf0fa83-18b3-4206-a109-f4606a94b8c1][Emacs]] and adapts it for ~Evil~
#+begin_src emacs-lisp
  ;; Bring the classic vimtutor to Emacs
  (use-package evil-tutor)

#+end_src
** General
[[https://github.com/noctuid/general.el][general.el]] is used for easy keybinding configuration that integrates well with =which-key=.
*** Standard Emacs Version
:PROPERTIES:
:header-args:emacs-lisp: :tangle ../C01_EmacsConfiguration/.emacs.d/package_configs/general_standard_config.el :mkdirp yes
:END:
This version specifies =C-.= as ~leader key~
#+begin_src emacs-lisp
  ;; Setup general for easier key config
  (use-package general
    :config
    (general-create-definer pet/leader-keys
     :states '(normal insert visual emacs)
     :prefix "C-." ;; leader key
     :global-prefix "C-.") ;; access leader in insert mode
    )

#+end_src
*** Evil Version
:PROPERTIES:
:header-args:emacs-lisp: :tangle ../C01_EmacsConfiguration/.emacs.d/package_configs/general_evil_config.el :mkdirp yes
:END:

This version specifies =SPC= instead of =C-.= as ~leader key~
#+begin_src emacs-lisp
  ;; Setup general for easier key config
  (use-package general
    :config
    ;; Enable evil mode integration
    (general-evil-setup)

    (general-create-definer pet/leader-keys
      :states '(normal insert visual emacs)
      :prefix "SPC" ;; leader key
      :global-prefix "M-SPC") ;; access leader in insert mode

    ;; `kj` to get to normal mode
    (general-imap "k"
      (general-key-dispatch 'self-insert-command
        :timeout 0.25
        "j" 'evil-normal-state))
    ;; `jk` to get to normal mode
    (general-imap "j"
      (general-key-dispatch 'self-insert-command
        :timeout 0.25
        "k" 'evil-normal-state))

    (pet/leader-keys
      ;; Toggles - Modes
      "tmvi"   '(evil-mode :which-key "Evil Mode")))

#+end_src
*** Leader Keys
:PROPERTIES:
:header-args:emacs-lisp: :tangle ../C01_EmacsConfiguration/.emacs.d/package_configs/general_leader_keys.el :mkdirp yes
:END:

#+begin_src emacs-lisp
  ;; Set Leader Keys
  (pet/leader-keys

    ;; Layouts
    "l"     '(:ignore t :which-key "Layout")
    "lw"    '(winner-undo :which-key "Winner Undo")


    ;; Authentication
    "a"     '(:ignore t :which-key "Authentification")


    ;; Bookmarks
    "b"     '(:ignore t :which-key "Bookmarks")
    "bs"    '(bookmark-set :which-key "Set Bookmark")
    "bl"    '(bookmark-bmenu-list :which-key "Bookmark List")
    "bt"    '(pet/current-tab-name :which-key "Current Tab Name")
    "bw"    '(webjump :which-key "Webjump to bookmark")

    ;; Calculator
    "c"   '(calc :which-key "Calculator")

    ;; Editing Tools
    "e"     '(:ignore t :which-key "Editing Tools")
    "ea"    'add-file-local-variable-prop-line
    ;; Letters
    "el"    '(:ignore t :which-key "Letters")
    "elM-u" 'upcase-initials
    "elC-uM-u" 'upcase-initials-region
    ;; Tabs
    "et"    '(untabify
      		:which-key "Untabify")
    "er"    '(regexp-builder
      		:which-key "Regexp Builder")


    ;; Files
    "f"     '(:ignore t :which-key "Files")
    "fR"    'recentf-open-files


    ;; Org Mode related
    "o"     '(:ignore t :which-key "Org Mode")


    ;; Toggles
    "t"     '(:ignore t :which-key "Toggles")
    "tc"    'world-clock
    "tt"    '(counsel-load-theme
      		:which-key "Choose Theme")
    ;; Toggles - Highlighting
    "th"    '(:ignore t :which-key "Highlighting")
    ;; Toggles - Highlighting - Colors
    "thc"   '(:ignore t :which-key "Colors")
    "thcr"  '(pet/syntax-color-rgb
      		:which-key "RGB")
    "thch"  '(pet/syntax-color-hsv
      		:which-key "HSV")
    ;; Toggles - Language Server
    "tl"    '(:ignore t :which-key "LSP")
    "tls"   '(eglot :which-key "Start LSP with Eglot")
    ;; Toggles - Modes
    "tm"    '(:ignore t :which-key "Modes")
    "tmv"   '(:ignore t :which-key "Modes with v..")
    "tmvl"  '(visual-line-mode :which-key "Visual Line Mode")
    "tmh"   '(hl-line-mode :which-key "Highlight Line Mode")
    "tmw"   '(whitespace-mode :which-key "Whitspace Mode")
    "tmu"   '(undo-tree-mode :which-key "Undo-Tree Mode")
    "tmo"   '(org-mode :which-key "Org Mode")
    "tmf"   '(origami-mode :which-key "Origami Mode")
    "tmf"   '(follow-mode :which-key "Follow Mode")
    "tme"   '(emojify-mode :which-key "Emojify Mode")
    "tms"   '(scroll-all-mode :which-key "Scroll All Mode")

    ;; Tools
    "T"       '(:ignore t :which-key "Tools")

    ;; Tools - Dictionary
    "Td"      '(:ignore t :which-key "Dictionary")
    "Tdd"     '(dictionary :which-key "Open Dictionary")
    "Tdl"     '(dictionary-lookup-definition :which-key "Lookup Definition")
    "Tdm"     '(dictionary-match-words :which-key "Match Words")
    "Tds"     '(dictionary-search :which-key "Search Dictionary"))

#+end_src
*** Elisp Leader Keys
#+begin_src emacs-lisp
  (pet/leader-keys
	"E"   '(:ignore t :which-key "eval")
	"Eb"  '(eval-buffer :which-key "eval buffer"))

  (pet/leader-keys
	:keymaps '(visual)
	"Er" '(eval-region :which-key "eval region"))

#+end_src
** Which Key
:PROPERTIES:
:header-args:emacs-lisp: :tangle ../C01_EmacsConfiguration/.emacs.d/package_configs/which_key_config.el :mkdirp yes
:END:

[[https://github.com/justbur/emacs-which-key][which-key]] is a useful UI panel that appears when you start pressing any key binding in [[id:3cf0fa83-18b3-4206-a109-f4606a94b8c1][Emacs]] to offer you all possible completions for the prefix.  For example, if you press =C-c= (hold control and press the letter =c=), a panel will appear at the bottom of the frame displaying all of the bindings under that prefix and which command they run.  This is very useful for learning the possible key bindings in the mode of your current buffer.
#+begin_src emacs-lisp
  ;; Load which-key
  ;; Loads a more helpful UI Completion buffer
  (use-package which-key
  :init (which-key-mode)
  :diminish which-key-mode
  :config
  (setq which-key-idle-delay 1
        which-key-side-window-location 'bottom  ;; Bottom is default
        which-key-sort-order #'which-key-key-order-alpha
        which-key-sort-uppercase-first nil
        which-key-add-column-padding 1
        which-key-max-display-columns nil
        ;; which-key-min-display-lines 6
        which-key-side-window-slot -10
        which-key-side-window-max-height 0.25
        which-key-max-description-length 25
        which-key-allow-imprecise-window-fit t
        which-key-separator " →  "))

#+end_src
* File Management
** Dired Extensions
:PROPERTIES:
:header-args:emacs-lisp: :tangle ../C01_EmacsConfiguration/.emacs.d/package_configs/dired_extensions_config.el :mkdirp yes
:END:
*** Dired Open

=dired-open= is part of [[https://github.com/Fuco1/dired-hacks][Dired Hacks]]. Enables opening files with external apps directly.
#+begin_src emacs-lisp
  ;; Use dired-open to launch external apps
  (use-package dired-open)
  ;; open .png files in 'sxiv' and .mp4 files to open in 'mpv'
  ;; open .pdf in 'zahtura'
  (setq dired-open-extensions '(("gif" . "sxiv")
				("jpg" . "sxiv")
				("png" . "sxiv")
				("svg" . "sxiv")
				("mkv" . "mpv")
				("mp4" . "mpv")
				;; ("pdf" . "zathura") not needed with pdf-tools
				))

#+end_src
*** Dired Filter

=dired-filter= is part of [[https://github.com/Fuco1/dired-hacks][Dired Hacks]]. Add Filters to [[id:459e7903-23b0-4716-a08c-6a4b8f80f2db][Dired]] Buffer.
#+begin_src emacs-lisp
  ;; Add Filters by file extension to dired buffer
  (use-package dired-filter)

#+end_src
*** Dired Preview

[[https://github.com/protesilaos/dired-preview][Dired-Preview]] is a minor mode that adds a preview window to ~Dired~.
It overs the same functionality as [[https://github.com/asok/peep-dired][Peep-Dired]], which is now an archived Project.
#+begin_src emacs-lisp
  ;; Add a Preview Window to Dired
  (use-package dired-preview
    :after dired
    :hook (evil-normalize-keymaps . dired-preview-hook)
    :config
    ;; Enable `dired-preview-mode' in globally:
    (dired-preview-global-mode 1)
    (setq dired-preview-delay 0.8)
    (setq dired-preview-max-size (expt 2 20))
    (setq dired-preview-ignored-extensions-regexp  ;; Show no preview for certain file types
          (concat "\\."
                  "\\(mkv\\|webm\\|mp4\\|mp3\\|ogg\\|m4a"
                  "\\|gz\\|zst\\|tar\\|xz\\|rar\\|zip"
                  "\\|iso\\|epub\\|pdf\\)"))
    (evil-define-key 'normal dired-mode-map (kbd "h") 'dired-up-directory)
    (evil-define-key 'normal dired-mode-map (kbd "l") 'dired-open-file) ; use dired-find-file instead if not using dired-open package
    )

#+end_src
** Ranger
:PROPERTIES:
:header-args:emacs-lisp: :tangle ../C01_EmacsConfiguration/.emacs.d/package_configs/ranger_config.el :mkdirp yes
:END:

[[https://github.com/ralesi/ranger.el][Ranger]] is a feature rich substitution for dired.
It is inspired by the the VIM plugin ranger.
#+begin_src emacs-lisp
  ;; Add Ranger Directory Explorer
  (use-package ranger
    :config
    ;; I don't want ranger to be the default
    (setq ranger-override-dired-mode nil)
    ;; Enable Image preview
    (setq ranger-show-literal nil)
    ;; Set Max Preview Size to 50MB
    ;; !!careful, this can really slow down your machine!!
    (setq ranger-max-preview-size 50)
    ;; Don't preview video/audio files
    (setq ranger-excluded-extensions ' ("mkv" "iso" "mp4" "mp3"))
    (pet/leader-keys
      "tmr"  '(ranger-mode :which-key "Ranger Mode")))

#+end_src
** PDF Tools
:PROPERTIES:
:header-args:emacs-lisp: :tangle ../C01_EmacsConfiguration/.emacs.d/package_configs/pdf_tools_config.el :mkdirp yes
:END:

Added [[https://github.com/vedang/pdf-tools][PDF Tools]] to replace ~DocView~.
There's also a [[https://pdftools.wiki/][wiki]] for it.
#+begin_src emacs-lisp
  ;; Load PDF Tools to replace DocView
  (use-package pdf-tools
    :straight nil  ;; loaded with guix package manage
    :defer t
    :commands (pdf-loader-install)
    :mode "\\.pdf\\'"
    :bind (:map pdf-view-mode-map
                ("j" . pdf-view-next-line-or-next-page)
                ("k" . pdf-view-previous-line-or-previous-page))
    :init
    ;; Install PDF Tools in all buffers
    (pdf-loader-install)
    :config (add-to-list 'revert-without-query ".pdf")

    ;; Disable linum mode in PDF Tools
    (add-hook 'pdf-view-mode-hook #'(lambda () (interactive) (display-line-numbers-mode -1)))
    (pet/leader-keys
      ;; Toggles - Modes
      "tmp"   '(pdf-view-mode :which-key "PDF View Mode")))

  ;; Enable bookmarking in pdf-view buffers
  (use-package saveplace-pdf-view
    :after pdf-tools
    :config
    (save-place-mode 1))

#+end_src
** Openwith
:PROPERTIES:
:header-args:emacs-lisp: :tangle ../C01_EmacsConfiguration/.emacs.d/package_configs/openwith_config.el :mkdirp yes
:END:

[[https://www.metalevel.at/misc/openwith.el][Openwith]] is a small package that opens ~external programs~ based on file extensions
#+begin_src emacs-lisp
  ;; Add Openwidth to use more sensible programs for certain file
  (use-package openwith
    :config
    (setq openwith-associations
          (list
           (list (openwith-make-extension-regexp
                  '("mpg" "mpeg" "mp3" "mp4"
                    "avi" "wmv" "wav" "mov" "flv"
                    "ogm" "ogg" "mkv"))
                 "mpv"
                 '(file))

           (list (openwith-make-extension-regexp
                  '("doc" "xls" "ppt" "odt" "ods" "odg" "odp"))
                 "libreoffice"
                 '(file))

           '("\\.lyx" "lyx" (file))

           '("\\.chm" "kchmviewer" (file))

           (list (openwith-make-extension-regexp
                  '("ps" "ps.gz" "dvi"))
                 "okular"
                 '(file))

           (list (openwith-make-extension-regexp
                  '("kdenlive"))
                 "kdenlive-accel"
                 '(file))

           (list (openwith-make-extension-regexp
                  '("kra"))
                 "krita"
                 '(file))

           (list (openwith-make-extension-regexp
                  '("blend" "blend1"))
                 "blender"
                 '(file))

           (list (openwith-make-extension-regexp
                  '("helio"))
                 "helio"
                 '(file))

           (list (openwith-make-extension-regexp
                  '("svg"))
                 "inkscape"
                 '(file))

           (list (openwith-make-extension-regexp
                  '("flp"))
                 "~/.local/bin/flstudio"
                 '(file))
           ))
    (setq openwith-confirm-invocation t)  ;; Avoid starting other processes by accident
    ;; Activate openwidth mode
    (openwith-mode 1))

#+end_src
* Quality of Live Extensions
** Collection of QoL Extensions
:PROPERTIES:
:header-args:emacs-lisp: :tangle ../C01_EmacsConfiguration/.emacs.d/package_configs/qol_collection_config.el :mkdirp yes
:END:
*** Executable Path Setup
~Exec Path from Shell~ is an [[id:3cf0fa83-18b3-4206-a109-f4606a94b8c1][Emacs]] [[id:1c44cf3c-6549-4e70-a3fd-491df7996dd5][Package]] that reads [[id:eb3164fe-2397-446a-8953-22356f3408db][Environment Variables]] from ~Bash~ or ~ZSH~.
Information can be found here: [[https://github.com/purcell/exec-path-from-shell][GitHub.com: Purcell - Exec Path from Shell]]
#+begin_src emacs-lisp
  ;; Package to setup Path Variable (and more) in Emacs
  (use-package exec-path-from-shell
    :config
    ;; Load binary directories like =.cargo/bin/= and =.local/bin= on Linux and OS X
    (when (memq window-system '(mac ns x))
    (exec-path-from-shell-initialize)))

  ;; ;; Read Path from Shell Setup when Emacs Server is launched through SystemD
  ;; (when (daemonp)
  ;;   (exec-path-from-shell-initialize))

  ;; Copy values of other Environment Variables
  ;; (dolist (var '("SSH_AUTH_SOCK" "SSH_AGENT_PID" "GPG_AGENT_INFO" "LANG" "LC_CTYPE" "NIX_SSL_CERT_FILE" "NIX_PATH"))
  ;;   (add-to-list 'exec-path-from-shell-variables var))

#+end_src
*** Easier Commenting

If you want to make ~commenting~ easier, the following package is very helpful. Despite the name, it is not only restricted to =evil-mode=
#+begin_src emacs-lisp
  ;; Easier Commenting, not just for evil-mode
  (use-package evil-nerd-commenter
    :bind ("M-/" . evilnc-comment-or-uncomment-lines))

#+end_src
*** Short Man Pages

The [[https://github.com/tldr-pages/tldr][tldr-pages]] project is a collection of community-maintained help pages for command-line tools, that aims to be a simpler, more approachable complement to traditional ~man pages~.
[[https://github.com/kuanyui/tldr.el][TLDR.el]] is a package that adds these packages to [[id:3cf0fa83-18b3-4206-a109-f4606a94b8c1][Emacs]]
#+begin_src emacs-lisp
  ;; Add TLDR Version of Man Pageship
  (use-package tldr)

#+end_src
*** Helpful Help Commands

[[https://github.com/Wilfred/helpful][Helpful]] adds a lot of very helpful (get it?) information to Emacs' =describe-= command buffers.  For example, if you use =describe-function=, you will not only get the documentation about the function, you will also see the source code of the function and where it gets used in other places in the [[id:3cf0fa83-18b3-4206-a109-f4606a94b8c1][Emacs]] configuration. It is very useful for figuring out how things work in [[id:3cf0fa83-18b3-4206-a109-f4606a94b8c1][Emacs]].
#+begin_src emacs-lisp
  ;; Use Helpful to get a better help buffer
  (use-package helpful
    :custom
    (counsel-describe-function-function
     #'helpful-callable)
    (counsel-describe-variable-function
     #'helpful-variable)
    :bind
    ([remap describe-function] . helpful-function)
    ([remap describe-symbol] . helpful-symbol)
    ([remap describe-command] . helpful-command)
    ([remap describe-variable] . helpful-variable)
    ([remap describe-key] . helpful-key))

#+end_src
*** Drag Stuff

[[https://github.com/rejeep/drag-stuff.el][Drag Stuff]] is a ~minor mode~ for [[id:3cf0fa83-18b3-4206-a109-f4606a94b8c1][Emacs]] that makes it possible to drag stuff (words, region, lines) around in Emacs.  When ‘drag-stuff-define-keys’ is enabled, then the following keybindings are set: =M-up=, =M-down=, =M-left=, and =M-right=.
#+begin_src emacs-lisp
  ;; Add Drag Stuff Mode
  (use-package drag-stuff
    :init
    ;(drag-stuff-global-mode 1)  ;; deactivated global variant since it gets a bit annoying in org mode
    (drag-stuff-define-keys)
    (evil-define-key 'visual drag-stuff-mode-map (kbd "K") 'drag-stuff-up)
    (evil-define-key 'visual drag-stuff-mode-map (kbd "J") 'drag-stuff-down)
    (evil-define-key 'visual drag-stuff-mode-map (kbd "H") 'drag-stuff-left)
    (evil-define-key 'visual drag-stuff-mode-map (kbd "L") 'drag-stuff-right)

    (pet/leader-keys
  	"tmd" '(drag-stuff-mode :wk "Drag Stuff Mode")))

#+end_src
*** Sudo-Edit

[[https://github.com/nflath/sudo-edit][sudo-edit]] gives us the ability to open files with sudo privileges or switch over to editing with sudo privileges if we initially opened the file without such privileges.
#+begin_src emacs-lisp :tangle no
  ;; Easily go into sudo mode
  (use-package sudo-edit)

#+end_src
** Multiple Cursors
:PROPERTIES:
:header-args:emacs-lisp: :tangle ../C01_EmacsConfiguration/.emacs.d/package_configs/multiple_cursors_config.el :mkdirp yes
:END:

~Multiple Cursors~ are a part of most *modern editors*.
Obviously [[id:3cf0fa83-18b3-4206-a109-f4606a94b8c1][Emacs]] has a package for that too:
#+begin_src emacs-lisp
  ;; Multiple cusors are a must. Make <return> insert a newline; multiple-cursors-mode can still be disabled with C-g.
  (use-package multiple-cursors
    :config
    (setq mc/always-run-for-all 1)
    (global-set-key (kbd "C-S-c C-S-c")
                    'mc/edit-lines)
    (global-set-key (kbd "C-<")
                    'mc/mark-previous-like-this)
    (global-set-key (kbd "C->")
                    'mc/mark-next-like-this)
    (global-set-key (kbd "C-c M-<")
                    'mc/mark-all-like-this)
    (global-set-key (kbd "s-D")
                    'mc/mark-all-dwim)
    (define-key mc/keymap (kbd
                           "<return>") nil))

#+end_src
** Undo-Tree
:PROPERTIES:
:header-args:emacs-lisp: :tangle ../C01_EmacsConfiguration/.emacs.d/package_configs/undo_tree_config.el :mkdirp yes
:END:

[[https://gitlab.com/tsc25/undo-tree][Undo-Tree]] is a minor mode that massively enhances the handling of undo/redo in [[id:3cf0fa83-18b3-4206-a109-f4606a94b8c1][Emacs]]
#+begin_src emacs-lisp
  ;; Level up Emacs Undo/Redo
  (use-package undo-tree
    :config
    (global-undo-tree-mode)
    (setq undo-tree-history-directory-alist `(("." . ,(concat pet/dotfiles-emacsconfig-dir "undo-tree/")))))

#+end_src
** Projectile
:PROPERTIES:
:header-args:emacs-lisp: :tangle ../C01_EmacsConfiguration/.emacs.d/package_configs/projectile_config.el :mkdirp yes
:END:
[[https://projectile.mx/][Projectile]] is a project management library for [[id:3cf0fa83-18b3-4206-a109-f4606a94b8c1][Emacs]] which makes it a lot easier to navigate around code projects for various languages.
Many packages integrate with Projectile so it's a good idea to have it installed even if you don't use its commands directly.
It should be noted that many projectile commands seem to not work if you have set =“fish”= as the =“shell-file-name”= for [[id:3cf0fa83-18b3-4206-a109-f4606a94b8c1][Emacs]].

#+begin_src emacs-lisp
  ;; Use Projectile for project management
  (use-package projectile
    :diminish projectile-mode
    :demand t
    :init
    ;; NOTE: Set this to the folder where you keep your Git repos!
    (when (file-directory-p "~/Projects/Programming")
      (setq projectile-project-search-path
            '("~/Projects/Programming")))
    (setq projectile-switch-project-action
          #'projectile-dired)

    ;; Activate Projectile
    (projectile-mode)
    ;; Setup default keybinding for projectile
    :bind-keymap
    ("C-c p" . projectile-command-map)
    :config
    ;; Specify a list of directories and files to ignore by projectile grep
    ;; Can interpret regular expressions
    (cl-loop for file in
             '()
             do
             (add-to-list 'projectile-globally-ignored-files file))
    (cl-loop for directory in
             '("backup")
             do
             (add-to-list 'projectile-globally-ignored-directories directory))

    ;; Add Projectile Functions to User Leader Keys
    (pet/leader-keys
      "p"  '(:ignore t :which-key "projects")
      ;; "pF"  'consult-ripgrep
      "pc"  'projectile-compile-project
      "pd"  'projectile-dired))

#+end_src
** YASnippets
:PROPERTIES:
:header-args:emacs-lisp: :tangle ../C01_EmacsConfiguration/.emacs.d/package_configs/yasnippets_config.el :mkdirp yes
:END:
*** Load Yasnippets

Load ~package~ =yasnippets= (should already come preinstalled, invocation is just to do the configuration).
[[id:296fc3bb-8f64-4615-a8ad-fadb207ee770][Yasnippets]] are an ~extension/improvement~ over the basic [[id:3cf0fa83-18b3-4206-a109-f4606a94b8c1][Emacs]] ~Skeletons~
Documentation can be found here: [[https://github.com/joaotavora/yasnippet][GitHub.com: Yasnippet]]
#+begin_src emacs-lisp
  ;; Yasnippets
  (use-package yasnippet
    :init
    ;; save Yasnippet dir
    (setq pet/yasnippet-dir
          (concat pet/dotfiles-emacsconfig-dir
                  "snippets"))

    :config
    ;; Set Yasnippet dir
    (setq yas-snippet-dirs '(pet/yasnippet-dir))

    ;; Activate Yasnippets globally
    (yas-global-mode 1)

    ;; Allow Stacked Expansion (Expansion within Expansion)
    ;; (setq yas-triggers-in-field t)

    ;; Enable snippets being shared between modes
    (add-hook 'yas-minor-mode-hook
              (lambda ()
                (yas-activate-extra-mode
                 'fundamental-mode))))

#+end_src
*** Yasnippet Snippets
#+begin_src emacs-lisp
  ;; Add some predefined snippets
  (use-package yasnippet-snippets
    :defer)

#+end_src
* Graphical User Interface Tweaks and Extensions
** All The Icons
:PROPERTIES:
:header-args:emacs-lisp: :tangle ../C01_EmacsConfiguration/.emacs.d/package_configs/all_the_icons_config.el :mkdirp yes
:END:

[[https://github.com/domtronn/all-the-icons.el][All-The-Icons]]
:NOTE:
The *first time* you load your configuration on a *new machine*, you'll need to run =M-x all-the-icons-install-font= so that mode line icons display correctly.
:END:
#+begin_src emacs-lisp
  ;; Use all-the-icons
  ;; required for doom modeline
  (use-package all-the-icons
    :if (display-graphic-p))

  ;; Adds icons to files and directories in dired
  (use-package all-the-icons-dired
    :hook
    (dired-mode . all-the-icons-dired-mode))

#+end_src
** Modelines
:PROPERTIES:
:header-args:emacs-lisp: :tangle ../C01_EmacsConfiguration/.emacs.d/package_configs/modeline_config.el :mkdirp yes
:END:
*** Doom Modeline

[[https://github.com/seagle0128/doom-modeline][doom-modeline]] is a very attractive and rich (yet still minimal) mode line configuration for [[id:3cf0fa83-18b3-4206-a109-f4606a94b8c1][Emacs]].  The default configuration is quite good but you can check out the [[https://github.com/seagle0128/doom-modeline#customize][configuration options]] for more things you can enable or disable.

#+begin_src emacs-lisp
  ;; Load doom modeline
  (use-package doom-modeline
    :after (all-the-icons)
    ;; Activate Doom Modeline
    :init (doom-modeline-mode 1)
    :config
    (setq doom-modeline-height 35                   ;; sets modeline height
          doom-modeline-bar-width 5                 ;; sets right bar width
          doom-modeline-persp-name t                ;; adds perspective name to modeline
          doom-modeline-window-width-limit nil
          doom-modeline-buffer-file-name-style 'truncate-with-project
          doom-modeline-minor-modes nil             ;; don’t try to display minor mode names
          doom-modeline-enable-word-count t         ;; display word count
          doom-modeline-buffer-encoding t           ;; show encoding for current buffer
          doom-modeline-buffer-modification-icon t  ;; indicate modification
          doom-modeline-env-python-executable "python"
          ;; needs display-time-mode to be one
          doom-modeline-time t
          doom-modeline-vcs-max-length 12           ;; length of VCS branch name displayed - default 12
          doom-modeline-persp-icon t))              ;; adds folder icon next to persp name

#+end_src
*** Telephone-Line

[[https://github.com/dbordak/telephone-line][Telephone-Line]] is an alternative Modeline inspired by ~Powerline~
#+begin_src emacs-lisp :tangle no
  ;; Load Telephone-Line
  (use-package telephone-line
    :init (telephone-line-mode 1))

#+end_src
** Themes
:PROPERTIES:
:header-args:emacs-lisp: :tangle ../C01_EmacsConfiguration/.emacs.d/package_configs/themes_config.el :mkdirp yes
:END:
*** Doom Themes

[[https://github.com/hlissner/emacs-doom-themes][doom-themes]] is a great set of themes with a lot of variety and support for many different Emacs modes.  Taking a look at the [[https://github.com/hlissner/emacs-doom-themes/tree/screenshots][screenshots]] might help you decide which one you like best.  You can also run =M-x counsel-load-theme= to choose between them easily.
#+begin_src emacs-lisp
    ;; Load Doom Themes
    (use-package doom-themes
    	:init (load-theme 'doom-dracula t)
    	:config
    	(setq doom-themes-enable-bold t    ; if nil, bold is universally disabled
    		  doom-themes-enable-italic t) ; if nil, italics is universally disabled
    	;; Enable custom neotree theme (all-the-icons must be installed!)
    	(doom-themes-neotree-config)
    	;; Corrects (and improves) org-mode's native fontification.
    	(doom-themes-org-config)
  	(doom-themes-visual-bell-config))

#+end_src
** Perspective
:PROPERTIES:
:header-args:emacs-lisp: :tangle ../C01_EmacsConfiguration/.emacs.d/package_configs/perspective_config.el :mkdirp yes
:END:

[[https://github.com/nex3/perspective-el][Perspective]] allows you to safe a specific window layout even across sessions
#+begin_src emacs-lisp
  ;; Add Perspective to use sets of
  (use-package perspective
    :demand t
    ;; Setup Keybindings
    ;; :bind (("C-M-k" . persp-switch)
    ;; 	   ("C-M-n" . persp-next)
    ;; 	   ("C-x k" . persp-kill-buffer*))
    :init
    (persp-mode)
    :custom
    ;; Start Perspective Mode
    (persp-mode-prefix-key (kbd "C-c M-p"))
    (persp-initial-frame-name "Main")
    ;; Set default file for states
    (persp-state-default-file
     (concat pet/dotfiles-emacsconfig-dir
               "perspective/default-state"))
    :config
    ;; Running `persp-mode' multiple times resets the perspective list...
    (unless (equal persp-mode t)
        (persp-mode))

    ;; Automatically save perspective states to file when Emacs exits.
    (add-hook 'kill-emacs-hook #'persp-state-save)


    ;; Add Perspective Functions to User Leader Keys
    (pet/leader-keys
    	"P"  '(:ignore t :which-key "Perspectives")
    	"Pn"  'persp-next
    	"Ps"  'persp-switch-to-buffer*
    	"Pk"  'persp-kill-buffer*))

#+end_src
** Dashboard
:PROPERTIES:
:header-args:emacs-lisp: :tangle ../C01_EmacsConfiguration/.emacs.d/package_configs/dashboard_config.el :mkdirp yes
:END:
*** Helper Functions

These functions were taken from:
[[https://github.com/gopar/.emacs.d][GitHub.com: Gopar - Emacs.d]]
The [[id:8fb7b917-debe-4d37-a726-4b45f93b913c][Ledger Catgories]] are specified [[file:~/.dotfiles-private/000_OrgFiles/EmacsPrivateVariables.org::*Ledger Variables][here]].
#+begin_src emacs-lisp
  ;; Function to insert vocabulary
  (defun pet/dashboard-insert-vocabulary (list-size)
    (dashboard-insert-heading "Word of the Day:"
  							nil
  							(all-the-icons-faicon "newspaper-o"
  												  :height 1.2
  												  :v-adjust 0.0
  												  :face 'dashboard-heading))
    (insert "\n")
    (let ((random-line nil)
  		(lines nil))
  	(with-temp-buffer
  	  (insert-file-contents (concat user-emacs-directory "words"))
  	  (goto-char (point-min))
  	  (setq lines (split-string (buffer-string) "\n" t))
  	  (setq random-line (nth (random (length lines)) lines))
  	  (setq random-line (string-join (split-string random-line) " ")))
  	(insert "    " random-line)))

  ;; Function to insert ledger bal
  (defun pet/dashboard-ledger-monthly-balances (list-size)
    "Return the monthly balance by using ledger"
    (interactive)
    (dashboard-insert-heading "Monthly Balance:"
  							nil
  							(all-the-icons-faicon "money"
  												  :height 1.2
  												  :v-adjust 0.0
  												  :face 'dashboard-heading))
    (insert "\n")
    (let* ((current-month (format-time-string "%Y/%m"))
  		 (cmd (format "ledger bal --flat --monthly --period %s %s "
  					  current-month
  					  (mapconcat 'identity pet/ledger-categories " "))))
  	(insert (shell-command-to-string cmd))))

#+end_src
*** Load Dashboard

[[https://github.com/emacs-dashboard/emacs-dashboard][Emacs Dashboard]] adds a start up screen to [[id:3cf0fa83-18b3-4206-a109-f4606a94b8c1][Index Emacs]]
#+begin_src emacs-lisp
  ;; Add Dashboard to Emacs
  (use-package dashboard
    :after (all-the-icons)
    :init      ;; tweak dashboard config before loading it
    (setq dashboard-set-heading-icons t)
    (setq dashboard-set-navigator t)
    (setq dashboard-week-agenda nil)
    (setq dashboard-set-file-icons t)
    (setq dashboard-icon-type 'all-the-icons)  ;; Default is nerd-icons
    (setq dashboard-banner-logo-title "Surveillance creates a prison in the mind")
    ;; use standard emacs logo as banner
    (setq dashboard-startup-banner 'logo)
    ;; Set custom banner
    ;; (setq dashboard-startup-banner "~/.emacs.d/emacs-dash.png")
    (setq dashboard-center-content t) ;; set to 'nil' for uncentered content
    (setq dashboard-show-shortcuts t)  ;; show shortcuts
    (setq dashboard-projects-backend 'projectile)  ;; default ’projectile’
    ;; (dashboard-agenda-sort-strategy '(priority-down))
    (setq dashboard-items '((recents . 5)
                            (agenda . 5 )
                            (bookmarks . 3)
                            (projects . 3)
  						  (registers . 3)
  						  ;; (vocabulary)  ;; Needs vocabulary file
  						  (monthly-balance)))
    (setq dashboard-item-generators '((monthly-balance . pet/dashboard-ledger-monthly-balances)
  									(vocabulary . pet/dashboard-insert-vocabulary)
  									(recents . dashboard-insert-recents)
  									(bookmarks . dashboard-insert-bookmarks)
  									(projects . dashboard-insert-projects)
  									(agenda . dashboard-insert-agenda)
  									(registers . dashboard-insert-registers)))
    :config
    (dashboard-setup-startup-hook)
    (dashboard-modify-heading-icons '((recents . "file-text")
                                      (bookmarks . "book")))
    ;; Make Emacsclient start up into dashboard
    (setq initial-buffer-choice (lambda () (get-buffer "*dashboard*"))))

#+end_src
** Ivy with Counsel and Prescient
:PROPERTIES:
:header-args:emacs-lisp: :tangle ../C01_EmacsConfiguration/.emacs.d/package_configs/ivy_config.el :mkdirp yes
:END:
*** Description
[[https://oremacs.com/swiper/][Ivy]] is an excellent completion framework for Emacs.  It provides a minimal yet powerful selection menu that appears when you open files, switch buffers, and for many other tasks in Emacs.

~Counsel~ is a customized set of commands to replace =find-file= with =counsel-find-file=, etc which provide useful commands for each of the default completion commands.

[[https://github.com/Yevgnen/ivy-rich][ivy-rich]] adds extra columns to a few of the Counsel commands to provide more information about each item.
*** Ivy
#+begin_src emacs-lisp
  ;; Load Ivy Completion Framework
  (use-package ivy
    :diminish
    :custom
    (setq ivy-use-virtual-buffers t)
    (setq ivy-count-format "(%d/%d) ")
    (setq enable-recursive-minibuffers t)
    :bind (("C-s" . swiper)
             ("C-r" . swiper)
             :map ivy-minibuffer-map
             ("TAB" . ivy-alt-done)
             ("C-l" . ivy-alt-done)
             ("C-j" . ivy-next-line)
             ("C-k" . ivy-previous-line)
             ("C-RET" . ivy-immediate-done)
             :map ivy-switch-buffer-map
             ("C-k" . ivy-previous-line)
             ("C-l" . ivy-done)
             ("C-d" . ivy-switch-buffer-kill)
             :map ivy-reverse-i-search-map
             ("C-k" . ivy-previous-line)
             ("C-d" . ivy-reverse-i-search-kill))
    :config
    (ivy-mode 1))

#+end_src
*** Counsel
#+begin_src emacs-lisp
  ;; Add Counsel for customized find files etc..
  (use-package counsel
    :after ivy
    :diminish
    :bind (("C-M-j" . 'counsel-switch-buffer)
             :map minibuffer-local-map
             ("C-r" . 'counsel-minibuffer-history))
    :config
    (counsel-mode 1)
    (setq ivy-initial-inputs-alist nil) ;; removes starting ^ regex in M-x

    ;; Add Counsel function to leader key space
    (pet/leader-keys
    	"r"   '(ivy-resume :which-key "ivy resume")

    	"ff"  '(counsel-find-file :which-key "open file")
    	"C-f" 'counsel-find-file
    	"fr"  '(counsel-recentf :which-key "recent files")
    	"fR"  '(revert-buffer :which-key "revert file")
    	"fj"  '(counsel-file-jump :which-key "jump to file")
    	"pf"  'counsel-projectile-find-file
    	"ps"  'counsel-projectile-switch-project
    	"pF"  'counsel-projectile-rg
    	"pp"  'counsel-projectile
    	"pd"  'projectile-dired))

#+end_src
*** Prescient

[[https://github.com/raxod502/prescient.el][Prescient]] makes [[id:3cf0fa83-18b3-4206-a109-f4606a94b8c1][Emacs]] store your recent history when accessing menus (like =C-h= or =M-x=)
#+begin_src emacs-lisp
  ;; Add Prescient for spooky Emacs Memory (history)
  (use-package prescient
	:after counsel
	:config
	(prescient-persist-mode 1))

  ;; Enable Prescient in Ivy
  (use-package ivy-prescient
	:after prescient
	:config
	(ivy-prescient-mode 1))

#+end_src
*** Extensions
**** Ivy-Rich
#+begin_src emacs-lisp
  ;; Ivy-Rich: Add Descriptions alongside M-x commands
  (use-package ivy-rich
    :after ivy
    :init
    (ivy-rich-mode 1)
    :custom
    (ivy-virtual-abbreviate 'full
                          ivy-rich-switch-buffer-align-virtual-buffer t
                          ivy-rich-path-style 'abbrev)
    :config
    (ivy-set-display-transformer 'ivy-switch-buffer
                                 'ivy-rich-switch-buffer-transformer))

#+end_src
**** All-The-Icons-Ivy-Rich
#+begin_src emacs-lisp
  ;; Add All-The-Icons to Ivy-Rich
  (use-package all-the-icons-ivy-rich
    :init (all-the-icons-ivy-rich-mode 1))

#+end_src
**** Counsel-Projectile
#+begin_src emacs-lisp
  ;; Projectile Counsel Integration
  (use-package counsel-projectile
    :after projectile
    :config (counsel-projectile-mode))

#+end_src
*** Ivy BibTex
Add ~Bibtex~ support to [[https://oremacs.com/swiper/][Ivy]] via [[https://github.com/tmalsburg/helm-bibtex][Ivy-BibTex]]
#+begin_src emacs-lisp
  ;; Add BibTex completion support to Ivy
  (use-package ivy-bibtex
  	:config
  	;; Set Bibtex Bibliography Files
  	(setq bibtex-completion-bibliography
  		  (list
  		   pet/main-bib
  		   ))

  	;; Set Bibtex Completion Library Path
  	(setq bibtex-completion-library-path
  		  (list
  		   pet/bibliography-dir
  		   ))

  	;; Set Bibtex Completion Notes Path
  	(setq bibtex-completion-notes-path
  		  "Projects/bibliography/notes/")

  	;; Add Keywords Field to Completion Serach
  	(setq bibtex-completion-additional-search-fields '(keywords))

  	;; ;; Bibtex Notes Completion Template
  	;; (setq bibtex-completion-notes-template-multiple-files
  	;; "* ${author-or-editor}, ${title}, ${journal}, (${year})  :${=type=}:  \n\nSee   [[cite\:${=key=}]]  \n")

  	;; Display Format for Completions
  	;; (setq bibtex-completion-display-formats
  	;;	  '((article       . "${=has-pdf=:1}${=has-note=:1} ${year:4} ${author:36} ${title:*} ${journal:40}")
  	;;		(inbook        . "${=has-pdf=:1}${=has-note=:1} ${year:4} ${author:36} ${title:*} Chapter ${chapter:32}")
  	;;		(incollection  . "${=has-pdf=:1}${=has-note=:1} ${year:4} ${author:36} ${title:*} ${booktitle:40}")
  	;;		(inproceedings . "${=has-pdf=:1}${=has-note=:1} ${year:4} ${author:36} ${title:*} ${booktitle:40}")
  	;;		(t             . "${=has-pdf=:1}${=has-note=:1} ${year:4} ${author:36} ${title:*}")))

  	;;; Adjust automatic generation of bibtex key
  	;;(setq bibtex-autokey-year-length 4
  	;;	  bibtex-autokey-name-year-separator "-"
  	;;	  bibtex-autokey-year-title-separator "-"
  	;;	  bibtex-autokey-titleword-separator "-"
  	;;	  bibtex-autokey-titlewords 2
  	;;	  bibtex-autokey-titlewords-stretch 1
  	;;	  bibtex-autokey-titleword-length 5)

  	;; (setq bibtex-completion-pdf-open-function
  	;; 	  (lambda (fpath)
  	;; 		(call-process "open" nil 0 nil fpath))))

  	)

#+end_src
** Helm
:PROPERTIES:
:header-args:emacs-lisp: :tangle ../C01_EmacsConfiguration/.emacs.d/package_configs/helm_config.el :mkdirp yes
:END:
*** Load Helm

[[https://github.com/emacs-helm/helm/wiki][Helm]] is an alternative completion framework that is very modular and offers a bunch of extensions
#+begin_src emacs-lisp
  ;; Load Helm Completion
  (use-package helm
    :init
    (helm-mode 1))

#+end_src
*** Helm Extensions
**** Helm-mu

[[https://github.com/emacs-helm/helm-mu][Helm-Mu]] adds a ~Helm~ Frontend to ~Mu4e~
#+begin_src emacs-lisp
  ;; Add mu4e support to helm
  (use-package helm-mu)

#+end_src
** Hydra
:PROPERTIES:
:header-args:emacs-lisp: :tangle ../C01_EmacsConfiguration/.emacs.d/package_configs/hydra_config.el :mkdirp yes
:END:
*** Description

~Hydra~ is an [[id:3cf0fa83-18b3-4206-a109-f4606a94b8c1][Emacs]] [[id:1c44cf3c-6549-4e70-a3fd-491df7996dd5][Package]] that helps with ~keybindings~ by enabling you to create *virtual namespaces* for *repeated commands*.

For example, imagine that you have bound =C-c j= and =C-c k= in your config and you want to call them in some (arbitrary) sequence. ~Hydra~ allows you to bind your functions in a way that pressing =C-c jjkk3j5k= is *equivalent to* pressing =C-c j C-c j C-c k C-c k M-3 C-c j M-5 C-c k=. *Any key other* than =j= or =k= *exits this state*.

- ~Colors~ have a special meaning with ~hydras~ (=:color= ~option~). See the list below:

  |----------+----------------------------|
  | Color    | Toggle                     |
  |----------+----------------------------|
  | red      |                            |
  | blue     | :exit t                    |
  | amaranth | :foreign-keys warn         |
  | teal     | :foreign-keys warn :exit t |
  | pink     | :foreign-keys run          |
  |----------+----------------------------|

- ~Hints~ are displayed next to the keys. If you add a ~Docstring~ you might want to disable that. Use =:hint nil= for that.

~Documentation~ can be found here: [[https://github.com/abo-abo/hydra][GitHub.com: Hydra]]
*** Loading Hydra Package
#+begin_src emacs-lisp
  ;; Load Hydra Package
  (use-package hydra
  	:config
  	;; Add leader key Menu
  	(pet/leader-keys
  	  "h" '(:ignore t :which-key "Hydras")))

#+end_src
*** Hydra Definitions
**** Text Scale Hydra
#+begin_src emacs-lisp
  ;; Define Text Scale Hydra
  (defhydra hydra-text-scale (:timeout 4)
    "Scale text"
    ("j" text-scale-increase "in")
    ("k" text-scale-decrease "out")
    ("q" nil "finished" :exit t))

  (pet/leader-keys
    "hs" '(hydra-text-scale/body :which-key "Scale text"))

#+end_src
**** Buffer Menu Hydra
#+begin_src emacs-lisp
  ;; Hydra for Buffer Menu functions
  (defhydra hydra-buffer-menu (
                               :hint nil
                               :timeout 10
                               ;; :color pink
                               )
    "
  ^Mark^             ^Unmark^           ^Actions^          ^Search
  ^^^^^^^^-----------------------------------------------------------------
  _m_: mark          _u_: unmark        _x_: execute       _R_: re-isearch
  _s_: save          _U_: unmark up     _b_: bury          _I_: isearch
  _d_: delete        ^ ^                _g_: refresh       _O_: multi-occur
  _D_: delete up     ^ ^                _T_: files only: % -28`Buffer-menu-files-only
  _~_: modified
  "
    ("m" Buffer-menu-mark)
    ("u" Buffer-menu-unmark)
    ("U" Buffer-menu-backup-unmark)
    ("d" Buffer-menu-delete)
    ("D" Buffer-menu-delete-backwards)
    ("s" Buffer-menu-save)
    ("~" Buffer-menu-not-modified)
    ("x" Buffer-menu-execute)
    ("b" Buffer-menu-bury)
    ("g" revert-buffer)
    ("T" Buffer-menu-toggle-files-only)
    ("O" Buffer-menu-multi-occur :color blue)
    ("I" Buffer-menu-isearch-buffers :color blue)
    ("R" Buffer-menu-isearch-buffers-regexp :color blue)
    ("c" nil "cancel")
    ("v" Buffer-menu-select "select" :color blue)
    ("o" Buffer-menu-other-window "other-window" :color blue)
    ("q" quit-window "quit" :color blue))

  ;; Access Hydra in Buffer Menu with '.'
  (define-key Buffer-menu-mode-map "." 'hydra-buffer-menu/body)

#+end_src
**** Bookmark Menu Hydra
#+begin_src emacs-lisp
  ;; Bookmark Menu
  (defhydra hydra-bookmark-menu (
								 :color pink
										:hint nil
										:timeout 10)
	"

		^^^Mark^             ^Actions^            ^Search^            ^Annotations^         ^Open Bookmark
		^^^^^^^^-----------------------------------------------------------------------------------------------------
		_m_: mark         _x_: execute          _/_: isearch             _a_: show         _o_   on other window
		_u_: unmark       _r_: rename           _l_: locate              _A_: show all     _C-o_ switch other window
		_U_: unmark up    _R_: relocate bmk     _S_: show filenames      _e_: edit         _1_   on full window
		_d_: delete       _w_: write bmk list   _T_: hide filenames      ^ ^               _2_   on split vertical
		_D_: delete up    _i_: import bmk list  _t_: toggle filenames    ^ ^               _5_   on other frame
		"
	("m" bookmark-bmenu-mark)
	("u" bookmark-bmenu-unmark)
	("U" bookmark-bmenu-backup-unmark)
	("d" bookmark-bmenu-delete)
	("D" bookmark-bmenu-delete-backwards)
	("x" bookmark-bmenu-execute-deletions)
	("r" bookmark-bmenu-rename)
	("R" bookmark-bmenu-relocate)
	("w" bookmark-bmenu-save)                   ;; 'write' bookmark list
	("i" bookmark-bmenu-load)                   ;; 'import' bookmark list
	("/" bookmark-bmenu-search)
	("l" bookmark-bmenu-locate)
	("S" bookmark-bmenu-show-filenames)
	("T" bookmark-bmenu-hide-filenames)
	("t" bookmark-bmenu-toggle-filenames)
	("a" bookmark-bmenu-show-annotation)
	("A" bookmark-bmenu-show-all-annotations)
	("e" bookmark-bmenu-edit-annotation)
	("c" nil "cancel" :exit t)
	("s" bookmark-bmenu-select "select" :color blue)
	("o" bookmark-bmenu-other-window :color blue)
	("C-o" bookmark-bmenu-switch-window :color blue)
	("1" bookmark-bmenu-1-window :color blue)
	("2" bookmark-bmenu-2-window :color blue)
	("5" bookmark-bmenu-other-frame :color blue)
	("q" quit-window "quit bm list" :color blue))

  ;; Access Menu through '.' in Bookmark List
  (with-eval-after-load "bookmark"
	(define-key bookmark-bmenu-mode-map
				"." 'hydra-bookmark-menu/body))

#+end_src
**** Apropos Hydra
#+begin_src emacs-lisp
  ;; Apropos Hydra
  (defhydra hydra-apropos (
                           ;; :color blue
                           :hint nil)
    "
  ^Apropos
  ^^^^^^^^-----------------------
  _a_propos        _c_ommand
  _d_ocumentation  _l_ibrary
  _v_ariable       _u_ser-option
  ^ ^          valu_e_
  "
    ("a" apropos)
    ("d" apropos-documentation)
    ("v" apropos-variable)
    ("c" apropos-command)
    ("l" apropos-library)
    ("u" apropos-user-option)
    ("e" apropos-value))
  ;; Recommended binding:
  ;; (global-set-key (kbd "C-c h") 'hydra-apropos/body)

  ;; Add to Leader keys
  (pet/leader-keys
    "ha" '(hydra-apropos/body :which-key "Apropos"))

#+end_src
**** Window Management Hydra
***** Helper Functions
#+begin_src emacs-lisp
  ;; Window Management Helpers
  (require 'windmove)

  ;; Move Splitter left
  (defun pet/move-splitter-left (arg)
	"Move window splitter left."
	(interactive "p")
	(if (let ((windmove-wrap-around))
		  (windmove-find-other-window 'right))
		(shrink-window-horizontally arg)
	  (enlarge-window-horizontally arg)))

  ;; Move Splitter left
  (defun pet/move-splitter-right (arg)
	  "Move window splitter right."
	  (interactive "p")
	  (if (let ((windmove-wrap-around))
			(windmove-find-other-window 'right))
		  (enlarge-window-horizontally arg)
		(shrink-window-horizontally arg)))

   ;; Move Splitter Up
  (defun pet/move-splitter-up (arg)
	"Move window splitter up."
	(interactive "p")
	(if (let ((windmove-wrap-around))
		  (windmove-find-other-window 'up))
		(enlarge-window arg)
	  (shrink-window arg)))

  ;; Move Splitter Down
  (defun pet/move-splitter-down (arg)
	"Move window splitter down."
	(interactive "p")
	(if (let ((windmove-wrap-around))
		  (windmove-find-other-window 'up))
		(shrink-window arg)
	  (enlarge-window arg)))

#+end_src
***** Hydra Definition
#+begin_src emacs-lisp
  ;; Define Window Management Hydra
  (defhydra hydra-window (:hint nil)
	"
	  Movement^^        ^Split^         ^Switch^		^Resize^
	  ----------------------------------------------------------------
	  _M-<left>_  ←	_v_ertical    	_b_uffer		_<left>_  X←
	  _M-<down>_  ↓   	_x_ horizontal	_f_ind files	_<down>_  X↓
	  _M-<up>_    ↑   	_z_ undo      	_a_ce 1	    	_<up>_    X↑
	  _M-<right>_ →   	_Z_ reset      	_s_wap	     	_<right>_ X→
	  _F_ollow Mode    	_D_lt Other   	_S_ave	     max_i_mize
	  _SPC_ cancel	    _o_nly this   	_d_elete
	  "
	;; Movement
	("M-<left>"  windmove-left)
	("M-<down>"  windmove-down)
	("M-<up>"    windmove-up)
	("M-<right>" windmove-right)

	;; Resize
	("<left>"  pet/move-splitter-left)
	("<down>"  pet/move-splitter-down)
	("<right>" pet/move-splitter-right)
	("<up>"    pet/move-splitter-up)

	("b" list-buffers)
	("f" find-files)
	("F" follow-mode)
	("a" (lambda ()
		   (interactive)
		   (ace-window 1)
			   (add-hook 'ace-window-end-once-hook
						 'hydra-window/body))
	 )
	("v" (lambda ()
		   (interactive)
		   (split-window-right)
		   (windmove-right))
	 )
	("x" (lambda ()
		   (interactive)
		   (split-window-below)
		   (windmove-down))
	 )
	("s" (lambda ()
		   (interactive)
		   (ace-window 4)
		   (add-hook 'ace-window-end-once-hook
					 'hydra-window/body)))
	("S" save-buffer)
	("d" delete-window)
	("D" (lambda ()
		   (interactive)
		   (ace-window 16)
		   (add-hook 'ace-window-end-once-hook
					 'hydra-window/body))
	 )
	("o" delete-other-windows)
	("i" ace-maximize-window)
	("z" (progn
		   (winner-undo)
		   (setq this-command 'winner-undo))
	 )
	("Z" winner-redo)
	("SPC" nil)
	)

  ;; Add to Leader keys
  (pet/leader-keys
	"hw" '(hydra-window/body :which-key "Window Management")
	)

#+end_src
**** Multiple Cursors Hydra
#+begin_src emacs-lisp
  ;; hydra multiple cursors
  (defhydra hydra-multiple-cursors (:hint nil)
    "
       ^Up^            ^Down^             ^Other^
  --------------------------------------------------------
  [_p_]   Previous    [_n_]   Next    [_l_] Edit lines
  [_P_]   Skip        [_N_]   Skip    [_a_] Mark all
  [_M-p_] Unmark      [_M-n_] Unmark  [_r_] Mark by regexp
  ^ ^                 ^ ^             [_d_] Mark all defun
  ^ ^                 ^ ^             [_q_] Quit
  "
    ("l" mc/edit-lines :exit t)
    ("a" mc/mark-all-like-this :exit t)
    ("n" mc/mark-next-like-this)
    ("N" mc/skip-to-next-like-this)
    ("M-n" mc/unmark-next-like-this)
    ("p" mc/mark-previous-like-this)
    ("P" mc/skip-to-previous-like-this)
    ("M-p" mc/unmark-previous-like-this)
    ("r" mc/mark-all-in-region-regexp :exit t)
    ("d" mc/mark-all-like-this-in-defun :exit t)
    ("q" nil))

  ;; Add to Leader keys
  (pet/leader-keys
    "hm" '(hydra-multiple-cursors/body :which-key "Multiple Cursors"))

#+end_src
**** Editing Toggles Hydra
#+begin_src emacs-lisp
  ;; Editing Toggles
  (defhydra hydra-editing-visuals (
						  :color pink
								 :hint nil
								 )
	"
  ^Editing Visuals
  ^^^^^^-------------------------------------------------------------------------
  _a_ abbrev-mode:                         %`abbrev-mode
  _C_ display-fill-column-indicator-mode:  %`display-fill-column-indicator-mode
  _d_ debug-on-error:                      %`debug-on-error
  _f_ auto-fill-mode:                      %`auto-fill-function
  _F_ variable-pitch-mode
  _i_ toggle-input-method
  _n_ display-line-numbers-mode:           %`display-line-numbers-mode
  _M_ doom-modeline-mode:                  %`doom-modeline-mode
  _R_ read-only-mode
  _t_ truncate-lines:                      %`truncate-lines
  _T_ counsel-load-theme
  _v_ visual-line-mode:                    %`visual-line-mode
  _w_ whitespace-mode:                     %`whitespace-mode
  "
	("a" abbrev-mode)
	("C" display-fill-column-indicator-mode)
	("d" toggle-debug-on-error)
	("f" auto-fill-mode)
	("F" variable-pitch-mode)
	("i" toggle-input-method)
	("t" toggle-truncate-lines)
	("T" counsel-load-theme)
	("v" visual-line-mode)
	("n" display-line-numbers-mode)
	("M" doom-modeline-mode)
	("w" whitespace-mode)
	("R" read-only-mode)
	("q" nil "quit" :exit 1))

  ;; (global-set-key (kbd "C-c C-v") 'hydra-editing-toggles/body)

  ;; Add to Key Space
  (pet/leader-keys
	"eh" '(hydra-editing-visuals/body :which-key "Editing Visuals")
	"T"  '(hydra-editing-visuals/body :which-key "Toggle Hydra")
	"ht" '(hydra-editing-visuals/body :which-key "Editing Visuals"))

#+end_src
**** Global Org Mode Hydra
#+begin_src emacs-lisp :tangle no
  ;; Global Org Mode Functionaliy via Hydra
  (defhydra hydra-global-org-menu (
								   :hint nil
										 :color pink
										 :timeout 10
										 )
	"
		^Org Utilities

		^Timer^                ^Clock^              ^Capture
		^^^^^^-------------------------------------------------------------------------
		 _t_: Start         _w_: Clock-In          _c_: Capture
		 _s_: Stop          _o_: Clock-Out         _l_: Last Capture
		 _r_: Set           _j_: Clock-Goto        ^ ^
		 _p_: Print

		 _q_: Quit
		 "

	  ("t" org-timer-start)
	  ("s" org-timer-stop)
	  ;; This one requires you be in an orgmode doc, as it sets the timer for the header
	  ("r" org-timer-set-timer)
	  ;; output timer value to buffer
	  ("p" org-timer)
	  ;; used with (org-clock-persistence-insinuate) (setq org-clock-persist t)
	  ("w" (org-clock-in '(4)))
	  ;; you might also want (setq org-log-note-clock-out t)
	  ("o" org-clock-out)
	  ;; global visit the clocked task
	  ("j" org-clock-goto)
	  ;; Don't forget to define the captures you want http://orgmode.org/manual/Capture.html
	  ("c" org-capture)
	  ("l" org-capture-goto-last-stored)
	  ("q" nil)
	  )

  (pet/leader-keys
	"ou" '(hydra-global-org-menu/body :which-key "Org Global Utilities")
	"ho" '(hydra-global-org-menu/body :which-key "Org Global Hydra"))

#+end_src
**** EBDB Mode Hydra

DISABLED FOR NOW
#+begin_src emacs-lisp :tangle no
  ;; Hydra for Contact Management
  (defhydra hydra-ebdb-menu (
							 :hint nil
								   :color pink
								   )
	"
		^EBDB Utilities

		^Records^                ^Fields^              ^Capture
		^^^^^^-------------------------------------------------------------------------
		_c_  Create
		_C_  Ext Create
  "
	("c" ebdb-create-record)
	("C" ebdb-create-record-extended)
	(";" ebdb-edit-foo "Notes")
	("m" ebdb-mail "Mail")
	("M" ebdb-mail-each "Mail Each")
	("h" ebdb-info "Info Menu")
	("?" ebdb-help "Help")
	("e" ebdb-edit-field "Edit Field")
	("TAB" ebdb-next-field "Next Field")
	("^" ebdb-search-pop "Search Pop")
	("P" ebdb-prev-field "Prev Field")
	("s" ebdb-save-ebdb "Save Databases")
	("+-t" ebdb-search-tags "Search Tags")
	("+-m" ebdb-search-mail "Search Mail")
	("p" ebdb-prev-record "Prev Record")
	("n" ebdb-next-record "Next Record")
	("+-p" ebdb-search-phone "Search Phone")
	("d-c" ebdb-copy-records "Copy Records")
	("o" ebdb-omit-records "Omit Records")
	("d-m" ebdb-move-records "Move Records")
	("A" ebdb-mail-aliases "Mail Aliases")
	("b-c" ebdb-clone-buffer "Clone Buffer")
	("i" ebdb-insert-field "Insert Field")
	("RET" ebdb-record-action "Record Action")
	("b-r" ebdb-rename-buffer "Rename Buffer")
	("+-a" ebdb-search-address "Search Address")
	("!" ebdb-search-invert "Search Invert")
	("+-c" ebdb-search-modified "Search Modified")
	("d-r" ebdb-reload-database "Reload Database")
	("r" ebdb-reformat-records "Reformat Records")
	("I" ebdb-cite-records-ebdb "Cite Records")
	("d-d" ebdb-disable-database "Disable Database")
	("+-d" ebdb-search-duplicates "Search Duplicates")
	("w-m" ebdb-copy-mail-as-kill "Copy Mail as Kill")
	("#" ebdb-record-mark "Mark Record")
	("d-e" ebdb-customize-database "Customize Database")
	("C-#" ebdb-unmark-all-records "Unmark all Records")
	("+-x" ebdb-search-user-fields "Search User Fields")
	("+-C" ebdb-search-record-class "Search Record Class")
	("w-f" ebdb-copy-fields-as-kill "Copy Fields as Kill")
	("C-x n w" ebdb-display-all-records "Display all Records")
	("+ o" ebdb-search-organization "Search Organization")
	("E" ebdb-edit-field-customize "Edit Field Customize")
	("F" ebdb-format-these-records "Format These Records")
	("f" ebdb-format-to-tmp-buff "Format to Tmp Buffer")
	("/ 1" ebdb-search-single-record "Searc Single Record")
	("w r" ebdb-copy-records-as-kill "Copy Records as Kill")
	("t" ebdb-toggle-records-format "Toggle Records Format")
	("R" ebdb-create-record-and-role "Create Record and Role")
	("C-k" ebdb-delete-field-or-record "Delete Field or Record")
	("C-x n d" ebdb-display-current-record "Display Current Record")
	("M-#" ebdb-toggle-all-record-marks "Toggle all Record Marks")
	("c" ebdb-toggle-all-records-format "Toggle All Records Format")
	("q" "Quit Database")
	("SPC" "Exit" :exit t))

#+end_src
**** Mu4e Hydra
#+begin_src emacs-lisp
  ;; Mu4e Hydra
  (defhydra hydra-mu4e-headers (
								:color blue
									   :hint nil
									   )
	"
   ^General^   | ^Search^           | _!_: read    | _#_: deferred  | ^Switches^
  -^^----------+-^^-----------------| _?_: unread  | _%_: pattern   |-^^------------------
  _n_: next    | _s_: search        | _r_: refile  | _&_: custom    | _O_: sorting
  _p_: prev    | _S_: edit prev qry | _u_: unmk    | _+_: flag      | _P_: threading
  _]_: n unred | _/_: narrow search | _U_: unmk *  | _-_: unflag    | _Q_: full-search
  _[_: p unred | _b_: search bkmk   | _d_: trash   | _T_: thr       | _V_: skip dups
  _y_: sw view | _B_: edit bkmk     | _D_: delete  | _t_: subthr    | _W_: include-related
  _R_: reply   | _{_: previous qry  | _m_: move    |-^^-------------+-^^------------------
  _C_: compose | _}_: next query    | _a_: action  | _|_: to shell  | _´_: update, reindex
  _F_: forward | _C-+_: show more   | _A_: mk4actn | _H_: help      | _;_: context-switch
  _h_: ?mode   | _C--_: show less   | _*_: *thing  | _q_: quit hdrs | _j_: jump2maildir "

	;; general
	("n" mu4e-headers-next)
	("p" mu4e-headers-previous)
	("[" mu4e-select-next-unread)
	("]" mu4e-select-previous-unread)
	("y" mu4e-select-other-view)
	("R" mu4e-compose-reply)
	("C" mu4e-compose-new)
	("F" mu4e-compose-forward)

	;; search
	("s" mu4e-headers-search)
	("S" mu4e-headers-search-edit)
	("/" mu4e-headers-search-narrow)
	("b" mu4e-headers-search-bookmark)
	("B" mu4e-headers-search-bookmark-edit)
	("{" mu4e-headers-search-prev :color pink)      ; differs from built-in - make sure to add them later
	("}" mu4e-headers-search-next :color pink)      ; differs from built-in - make sure to add them later
	("C-+" mu4e-headers-split-view-grow)
	("C--" mu4e-headers-split-view-shrink)

	;; mark stuff
	("!" mu4e-headers-mark-for-read)
	("?" mu4e-headers-mark-for-unread)
	("r" mu4e-headers-mark-for-refile)
	("u" mu4e-headers-mark-for-unmark)
	("U" mu4e-mark-unmark-all)
	("d" mu4e-headers-mark-for-trash)
	("D" mu4e-headers-mark-for-delete)
	("m" mu4e-headers-mark-for-move)
	("a" mu4e-headers-action)                  ; not really a mark per-se
	("A" mu4e-headers-mark-for-action)
	("*" mu4e-headers-mark-for-something)


	("#" mu4e-mark-resolve-deferred-marks)
	("%" mu4e-headers-mark-pattern)
	("&" mu4e-headers-mark-custom)
	("+" mu4e-headers-mark-for-flag)
	("-" mu4e-headers-mark-for-unflag)
	("t" mu4e-headers-mark-subthread)
	("T" mu4e-headers-mark-thread)

	;; miscellany
	("q" mu4e~headers-quit-buffer)
	("H" mu4e-display-manual)
	("h" describe-mode)
	("|" mu4e-view-pipe)                       ; does not seem built-in any longer

	;; switches
	("O" mu4e-headers-change-sorting)
	("P" mu4e-headers-toggle-threading)
	("Q" mu4e-headers-toggle-full-search)
	("V" mu4e-headers-toggle-skip-duplicates)
	("W" mu4e-headers-toggle-include-related)

	;; more miscellany
	("´" mu4e-update-mail-and-index)           ; differs from built-in
	(";" mu4e-context-switch)
	("j" mu4e~headers-jump-to-maildir)

	("." nil))

#+end_src
*** Hydra Exensions
**** Ident Tools
[[https://gitlab.com/emacs-stuff/indent-tools/][Ident-Tools]] adds a [[*Hydra][hydra]] to manage indentations - helpful for [[id:8b26358a-672f-43c1-8507-1b388b3a31cd][languages]] like [[id:d76cab21-70db-4332-9b40-cb6b6af6643f][Python]] or [[id:cf227bfa-d401-4f12-b0ad-2fd1a233f206][YAML]].
#+begin_src emacs-lisp
  ;; Add Indent Tools for languages with identation based structures
  (use-package indent-tools
	:hook
	(python-mode .  (lambda () (define-key python-mode-map (kbd "C-c >") 'indent-tools-hydra/body)))
	(yaml-mode .  (lambda () (define-key yaml-mode-map (kbd "C-c >") 'indent-tools-hydra/body))))

#+end_src
** Treemacs Mode
:PROPERTIES:
:header-args:emacs-lisp: :tangle ../C01_EmacsConfiguration/.emacs.d/package_configs/treemacs_config.el :mkdirp yes
:END:
*** Load Treemacs

[[https://github.com/Alexander-Miller/treemacs][Treemacs]] is a handy tree-style *file directory viewer* that's very similar to what you are used from commercial IDEs.
It's got good integration with =Projectile=
#+begin_src emacs-lisp
  (use-package treemacs
    :defer t
    :init
    (with-eval-after-load 'winum
      (define-key winum-keymap (kbd "M-0") #'treemacs-select-window))
    :config
    (progn
      (setq treemacs-collapse-dirs                   (if treemacs-python-executable 3 0)
            treemacs-deferred-git-apply-delay        0.5
            treemacs-directory-name-transformer      #'identity
            treemacs-display-in-side-window          t
            treemacs-eldoc-display                   'simple
            treemacs-file-event-delay                2000
            treemacs-file-extension-regex            treemacs-last-period-regex-value
            treemacs-file-follow-delay               0.2
            treemacs-file-name-transformer           #'identity
            treemacs-follow-after-init               t
            treemacs-expand-after-init               t
            treemacs-find-workspace-method           'find-for-file-or-pick-first
            treemacs-git-command-pipe                ""
            treemacs-goto-tag-strategy               'refetch-index
            treemacs-header-scroll-indicators        '(nil . "^^^^^^")
            treemacs-hide-dot-git-directory          t
            treemacs-indentation                     2
            treemacs-indentation-string              " "
  		  ;; ensure treemacs is never othher window when switching buffers
            treemacs-is-never-other-window           t
            treemacs-max-git-entries                 5000
            treemacs-missing-project-action          'ask
            treemacs-move-forward-on-expand          nil
            treemacs-no-png-images                   nil
            treemacs-no-delete-other-windows         t
            treemacs-project-follow-cleanup          nil
            treemacs-persist-file                    (expand-file-name ".cache/treemacs-persist" user-emacs-directory)
            treemacs-position                        'left
            treemacs-read-string-input               'from-child-frame
            treemacs-recenter-distance               0.1
            treemacs-recenter-after-file-follow      nil
            treemacs-recenter-after-tag-follow       nil
            treemacs-recenter-after-project-jump     'always
            treemacs-recenter-after-project-expand   'on-distance
            treemacs-litter-directories              '("/node_modules" "/.venv" "/.cask")
            treemacs-project-follow-into-home        nil
            treemacs-show-cursor                     nil
            treemacs-show-hidden-files               t
            treemacs-silent-filewatch                nil
            treemacs-silent-refresh                  nil
            treemacs-sorting                         'alphabetic-asc
            treemacs-select-when-already-in-treemacs 'move-back
            treemacs-space-between-root-nodes        t
            treemacs-tag-follow-cleanup              t
            treemacs-tag-follow-delay                1.5
            treemacs-text-scale                      nil
            treemacs-user-mode-line-format           nil
            treemacs-user-header-line-format         nil
            treemacs-wide-toggle-width               70
            treemacs-width                           35
            treemacs-width-increment                 1
            treemacs-width-is-initially-locked       t
            treemacs-workspace-switch-cleanup        nil)

      ;; The default width and height of the icons is 22 pixels. If you are
      ;; using a Hi-DPI display, uncomment this to double the icon size.
      ;;(treemacs-resize-icons 44)

      (treemacs-follow-mode t)
      (treemacs-filewatch-mode t)
      (treemacs-fringe-indicator-mode 'always)
      (when treemacs-python-executable
        (treemacs-git-commit-diff-mode t))

      (pcase (cons (not (null (executable-find "git")))
                   (not (null treemacs-python-executable)))
        (`(t . t)
         (treemacs-git-mode 'deferred))
        (`(t . _)
         (treemacs-git-mode 'simple)))

      (treemacs-hide-gitignored-files-mode nil))
    :bind
    (:map global-map
          ("M-0"       . treemacs-select-window)
          ("C-x t 1"   . treemacs-delete-other-windows)
          ("C-x t t"   . treemacs)
          ("C-x t d"   . treemacs-select-directory)
          ("C-x t B"   . treemacs-bookmark)
          ("C-x t C-t" . treemacs-find-file)
          ("C-x t M-t" . treemacs-find-tag)
  	    ([f8] . treemacs)
  		("C-<f8>" . treemacs-select-window)))

#+end_src
*** Treemacs-Evil
#+begin_src emacs-lisp
  ;; Enable Evil in Treemacs
  (use-package treemacs-evil
    :after (treemacs evil))

#+end_src
*** Treemacs-Magit
#+begin_src emacs-lisp
  ;; Enable Magit in Treemacs
  (use-package treemacs-magit
    :after (treemacs magit))

#+end_src
*** Treemacs-Projectile
#+begin_src emacs-lisp
  ;; Add Projectile Projects to Treemacs
  (use-package treemacs-projectile
    :after (treemacs projectile))

#+end_src
*** Treemacs-Tab-Bar
#+begin_src emacs-lisp
  ;; Unique Treemacs Buffers in Tab Bar Views
  (use-package treemacs-tab-bar
    :after (treemacs)
    :config (treemacs-set-scope-type 'Tabs))

#+end_src
*** Treemacs-Perspective
#+begin_src emacs-lisp
  ;; Unique Treemacs Buffers in Perspective Views
  (use-package treemacs-perspective
    :after (treemacs perspective)
    :config (treemacs-set-scope-type 'Perspectives))

#+end_src
*** Treemacs-Persp
#+begin_src emacs-lisp :tangle no
  ;; Unique Treemacs Buffers in Perspective Views
  (use-package treemacs-persp ;; if you use persp-mode vs. perspective.el
    :after (treemacs persp-mode) ;;vs perspective
    :config (treemacs-set-scope-type 'Perspectives))

#+end_src
*** Treemacs Icons in Dired Buffers
#+begin_src emacs-lisp :tangle no
  ;; Add Treemacs icons to Dired
  (use-package treemacs-icons-dired
    :hook (dired-mode . treemacs-icons-dired-enable-once))

#+end_src
*** All the Icons in Treemacs
#+begin_src emacs-lisp :tangle no
  ;; Add All The Icons to Treemacs
  (use-package treemacs-all-the-icons
    :after (treemacs all-the-icons))

#+end_src
*** Treemacs Leader Keys
#+begin_src emacs-lisp
    ;; Add shortcut for treemacs to
    ;; personal keyspace
    (pet/leader-keys
     "lt"  '(:ignore t :which-key "treemacs")
     "ltt" 'treemacs
     "ltw" 'treemacs-select-window)

#+end_src
** Neotree
:PROPERTIES:
:header-args:emacs-lisp: :tangle ../C01_EmacsConfiguration/.emacs.d/package_configs/neotree_config.el :mkdirp yes
:END:

[[https://github.com/jaypei/emacs-neotree][Neotree]] is a file tree viewer.
When you open neotree, it jumps to the current file thanks to =neo-smart-open=.
The =neo-window-fixed-size= setting makes the ~neotree~ width be adjustable.

~NeoTree~ provides following themes:

+ =classic=
+ =ascii=
+ =arrow=
+ =icons=
+ =nerd=

Theme can be configured by setting “two” themes for =neo-theme=: one for the ~GUI~ and one for the ~terminal~.

|----------------+---------------------------+------------|
| COMMAND        | DESCRIPTION               | KEYBINDING |
|----------------+---------------------------+------------|
| neotree-toggle | Toggle neotree            | SPC t n    |
| neotree- dir   | Open directory in neotree | SPC d n    |
|----------------+---------------------------+------------|

#+begin_src emacs-lisp :tangle no
  (use-package neotree
    :config
    (setq neo-smart-open t
          neo-show-hidden-files t
          neo-window-width 55
          neo-window-fixed-size nil
          inhibit-compacting-font-caches t
          projectile-switch-project-action 'neotree-projectile-action)
    ;; truncate long file names in neotree
    (add-hook 'neo-after-create-hook
  			#'(lambda (_)
  				(with-current-buffer (get-buffer neo-buffer-name)
                    (setq truncate-lines t)
                    (setq word-wrap nil)
                    (make-local-variable 'auto-hscroll-mode)
                    (setq auto-hscroll-mode nil))))

    ;; Add shortcut for treemacs to
    ;; personal keyspace
    (pet/leader-keys
  	"t n" '(neotree-toggle :wk "Toggle neotree file viewer")
  	"d n" '(neotree-dir :wk "Open directory in neotree"))

#+end_src
** Beacon
:PROPERTIES:
:header-args:emacs-lisp: :tangle ../C01_EmacsConfiguration/.emacs.d/package_configs/beacon_config.el :mkdirp yes
:END:
Documentation can be found here: [[https://github.com/Malabarba/beacon][GitHub.com: beacon]]
#+begin_src emacs-lisp
  ;; applies beacon effect to the highlighted line on page scrolls
  (use-package beacon
     :config
     ;(setq beacon-color 0.4)
     (beacon-mode 1))

#+end_src
** GUI Extensions
:PROPERTIES:
:header-args:emacs-lisp: :tangle ../C01_EmacsConfiguration/.emacs.d/package_configs/gui_extensions_config.el :mkdirp yes
:END:
*** Command Log Mode

[[https://github.com/lewang/command-log-mode][command-log-mode]] is useful for displaying a panel showing each key binding you use in a panel on the right side of the frame.  Great for live streams and screencasts!
#+begin_src emacs-lisp
  ;; Enable Command Log Mode
  (use-package command-log-mode)

#+end_src
*** Visual Fill Column
Add [[https://codeberg.org/joostkremers/visual-fill-column][Visual Fill Column Mode]] to make centering text in buffers better
#+begin_src emacs-lisp
  ;; Visual Fill Column to center text
  (use-package visual-fill-column
  	:config
  	;; Load fill column when visual line mode
  	(add-hook 'visual-line-mode-hook #'visual-fill-column-mode)
  	;; Give more space to content, default uses value of fill-column variable
  	(setq-default visual-fill-column-width 130)
  	;; Automatically center text in visual fill column
  	(setq-default visual-fill-column-center-text t)

  	;; Add functionality to leader keys
  	(pet/leader-keys
  	  "tmV"   '(visual-fill-column-mode :which-key "Visual Fill Column")))

#+end_src
*** Writeroom
[[https://github.com/joostkremers/writeroom-mode][Writeroom]] adds a special mode for 'distraction-free writing'.
It is built on top of the [[*Visual Fill Column][Visual Fill Colum Mode]] above.
#+begin_src emacs-lisp
  ;; Add Writeroom Mode
  (use-package writeroom-mode
	:config
		(pet/leader-keys
	  "tmW"   '(writeroom :which-key "Writeroom Mode")))

#+end_src
*** Visual Regular Expressions

[[https://github.com/benma/visual-regexp.el][Visual-Regexp]] is a third party package that builds on emacs lisp [[id:26419d86-c777-4765-9dd1-9353f17a0716][regular expression]] functionality.
It enables highlighting of ~Regexp Groups~ to better understand the [[id:26419d86-c777-4765-9dd1-9353f17a0716][expressions]] during ~build-up~
#+begin_src emacs-lisp
  ;; Visually Mark Regexp
  (use-package visual-regexp)

#+end_src
*** Highlight Indentation
[[https://github.com/antonj/Highlight-Indentation-for-Emacs][Highlight-Indentation]] adds a useful visual hint to show indentations in source code - helpful for [[id:8b26358a-672f-43c1-8507-1b388b3a31cd][languages]] like [[id:d76cab21-70db-4332-9b40-cb6b6af6643f][Python]] or [[id:cf227bfa-d401-4f12-b0ad-2fd1a233f206][YAML]].
#+begin_src emacs-lisp
  ;; Add Indentation Guideline - usefull for languages like python or yaml
  (use-package highlight-indentation
	:hook
	;; Activate Guideline for programming modes
	(prog-mode . highlight-indentation-mode))
	;; :config
	;; (set-face-background 'highlight-indentation-face "#e3e3d3")
	;; (set-face-background 'highlight-indentation-current-column-face "#c3b3b3"))

#+end_src
*** Rainbow Mode

[[https://github.com/emacsmirror/rainbow-mode][Rainbow-Mode]] displays the ~actual color~ as a ~background~ for any [[id:b414f8b5-42d6-4856-bdb3-fab5423317a0][hex color value]] (ex. =#ffffff=).
The code block enables ~rainbow-mode~ in all ~programming modes~ (~prog-mode~) as well as ~org-mode~.
#+begin_src emacs-lisp
  ;; Highlight Hex Strings with matching Colors
  (use-package rainbow-mode
    :diminish
    :hook org-mode prog-mode)

#+end_src
*** Rainbow Delimiters

[[https://github.com/Fanael/rainbow-delimiters][rainbow-delimiters]] is useful in programming modes because it colorizes nested parentheses and brackets according to their nesting depth.  This makes it a lot easier to visually match parentheses in Emacs Lisp code without having to count them yourself.
#+begin_src emacs-lisp
  ;; Add rainbow delimiters for better readability
  (use-package rainbow-delimiters
    :hook (prog-mode . rainbow-delimiters-mode))

#+end_src
*** Matching Parenthesis

[[id:3cf0fa83-18b3-4206-a109-f4606a94b8c1][Emacs]] highlights matching parenthesis by default.
This Setting is meant to make that highlighting stand out more
#+begin_src emacs-lisp :tangle no
  ;; Customize highlighting of matching parenthesis
  (use-package paren
    :config
    (set-face-attribute
     'show-paren-match-expression nil :background "#363e4a")
    (show-paren-mode 1))

#+end_src
*** Terminal 256Color Support
#+begin_src emacs-lisp
  ;; add 256 color support
  (use-package eterm-256color
    :hook (term-mode . eterm-256color-mode))

#+end_src
*** Display Emojis
[[https://github.com/iqbalansari/emacs-emojify][Emojify]] is an [[id:3cf0fa83-18b3-4206-a109-f4606a94b8c1][Emacs]] extension to display ~emojis. It can display github style emojis like :smile: or plain ascii ones like :).
[[id:40f3f142-cf2a-44f0-a9fb-da5f5bf448cc][Unicode Emojis]] können auch ohne dieses Paket schon angezeigt werden
#+begin_src emacs-lisp
  ;; Extend Emacs Emoji capability (apart from Unicode)
  (use-package emojify
    ;; if you want to enable emojis globally:
    :hook (after-init . global-emojify-mode))

#+end_src
*** Minimap Mode

[[https://github.com/dengste/minimap][Minimap]] adds a minimap sidebar to [[id:3cf0fa83-18b3-4206-a109-f4606a94b8c1][Emacs]]
#+begin_src emacs-lisp
  ;; Add Minimap to Emacs
  (use-package minimap
    :config
    ;; Set minimap to show on the right
    (setq minimap-window-location 'right)

    ;; Make Minimap available in most text modes
    (add-to-list 'minimap-major-modes 'text-mode)

    ;; Add Minimap to Keyspace for Toggles - Modes
    (pet/leader-keys
  	"tmm"   '(minimap-mode :which-key "Minimap Mode")))

#+end_src
*** Solaire Mode
#+begin_src emacs-lisp
    ;; Load Solaire - Distinguish file buffers with background
    (use-package solaire-mode
      :hook (after-init . solaire-global-mode)
      :config
      (push '(treemacs-window-background-face . solaire-default-face) solaire-mode-remap-alist)
      (push '(treemacs-hl-line-face . solair-hl-line-face) solaire-mode-remap-alist))

#+end_src
*** Padding

[[https://github.com/protesilaos/spacious-padding][Spacious-Padding]] adds padding to Emacs Windows and Frames. Makes it look a lot nicer.
#+begin_src emacs-lisp
  ;; Add Padding to make the GUI pop
  (use-package spacious-padding
    :hook
    (after-init . spacious-padding-mode))

#+end_src
*** Golden-Ratio

[[https://github.com/roman/golden-ratio.el][Golden-Ratio]] helps on this issue by resizing automatically the windows you are working on to the size specified in the ~"Golden Ratio"~.
The behaviour can be adjusted by a couple of variables like =golden-ratio-max-width=.
#+begin_src emacs-lisp
  ;; Automatically adjusts the focused window
  (use-package golden-ratio
    :hook (after-init . golden-ratio-mode)
    :custom
    (golden-ratio-exclude-modes '(occur-mode)))

#+end_src
*** Fireplace

Make your editor a little cozier with [[https://github.com/johanvts/emacs-fireplace][Emacs-Fireplace]]
#+begin_src emacs-lisp
  ;; Totally useless but i love it
  (use-package fireplace)

#+end_src
* Developement Tools
** Magit
:PROPERTIES:
:header-args:emacs-lisp: :tangle ../C01_EmacsConfiguration/.emacs.d/package_configs/magit_config.el :mkdirp yes
:END:

[[https://magit.vc/][Magit]] is one of the best Git interfaces. Common Git operations are easy to execute quickly using Magit's command panel system.
#+begin_src emacs-lisp
  (use-package magit
    :bind ("C-x g" . magit-status)
    :commands (magit-status magit-get-current-branch)
    :init
    ;; (add-to-list 'display-buffer-alist
    ;;              '("magit-diff*"
    ;;                display-buffer-in-side-window
    ;;                (side . right)
    ;;                (slot . 3)
    ;;                (window-parameters . ((no-delete-other-windows . t)))
    ;;                (dedicated . t)))

    (add-to-list 'display-buffer-alist
              `(,(make-display-buffer-matcher-function '(magit-mode))
                (display-buffer-reuse-mode-window
                 display-buffer-in-direction)
                (mode magit-mode)
                (window . root)
                (window-width . 0.15)
                (direction . left)))
    :config
    ;; Adjust display buffer setting
    ;; (setq magit-display-buffer-function
  	;; 	#'magit-display-buffer-same-window-except-diff-v1)
    (setq magit-display-buffer-function #'display-buffer)

    ;; Add Magit Commands to Leader Key Space
    (pet/leader-keys
  	"g"   '(:ignore t :which-key "git")
  	"gs"  'magit-status
  	"gd"  'magit-diff-unstaged
  	"gc"  'magit-branch-or-checkout
  	"gl"   '(:ignore t :which-key "log")
  	"glc" 'magit-log-current
  	"glf" 'magit-log-buffer-file
  	"gb"  'magit-branch
  	"gP"  'magit-push-current
  	"gp"  'magit-pull-branch
  	"gf"  'magit-fetch
  	"gF"  'magit-fetch-all
  	"gr"  'magit-rebase))

#+end_src
** Consult
:PROPERTIES:
:header-args:emacs-lisp: :tangle ../C01_EmacsConfiguration/.emacs.d/package_configs/consult_config.el :mkdirp yes
:END:
[[https://github.com/minad/consult][Consult]] is a Completion Engine that's fully compatible with [[id:3cf0fa83-18b3-4206-a109-f4606a94b8c1][Emacs]] Buitlin Completion Engine
#+begin_src emacs-lisp
  ;; Load Consult
  (use-package consult)

#+end_src
** Company Mode
:PROPERTIES:
:header-args:emacs-lisp: :tangle ../C01_EmacsConfiguration/.emacs.d/package_configs/company_config.el :mkdirp yes
:END:
*** Load Company Mode

[[https://company-mode.github.io/][Company Mode]] is one of the *most useful* [[id:127b78f9-ac8e-4ce0-a316-0850559c44e4][Modes]] that *enhances* [[id:3cf0fa83-18b3-4206-a109-f4606a94b8c1][Emacs]] ~Autocompletion Capabilities~
#+begin_src emacs-lisp
  ;; Helper Functions (for hooks mostly)
  (defun pet/company-text-mode ()
    "Sets 'company-mode' for 'text-mode'"
    ;; Activate completion after 3 letters in text mode
    (setq company-minimum-prefix-length 3))

  ;; Load Company Mode for Auto Completion
  (use-package company
    :defer 2
    :diminish
    :init
    (setq company-begin-commands '(self-insert-command))
    (setq company-minimum-prefix-length 2)
    (setq company-show-numbers t)   ;; Show numbers in tooltip
    (global-company-mode 1)         ;; activate company mode
    (company-tng-mode 1)            ;; make company perform completions with tab

    ;; Disable Company Mode in Strings or Comment
    (setq company-idle-delay
      (lambda () (if (company-in-string-or-comment) nil 0.3)))

    ;; Set hooks
    (add-hook 'text-mode-hook 'pet/company-text-mode)

    ;; Enable Cycling Options back to the Beginning
    (setq company-selection-wrap-around t)

    ;; Align Annotations (paramenters, arguments, etc..) right of tooltip
    (setq company-tooltip-align-annotations t)

    ;; Allow Prefix Length to be change per buffer
    (make-variable-buffer-local 'company-minimum-prefix-length)

    ;; Add Company Mode to Leader Keys
    (pet/leader-keys
      "tmc"  '(global-company-mode :which-key "Global Company Mode")))

#+end_src
*** Company Additions
**** Backends
***** Shell/Bash
****** Company Shell
~Documentation~ can be found here: [[https://github.com/Alexander-Miller/company-shell][GitHub.com: Company Shell]]
#+begin_src emacs-lisp
  ;; Add Company Extension for Bash and Shell
  (use-package company-shell
    :config
    (add-to-list 'company-backends '(company-shell company-shell-env)))

#+end_src
***** LaTeX
****** Company Math
This is an extension for [[id:62eadd2d-023b-4d03-8eb0-527528f6e224][LaTeX]]. ~Documentation~ can be found here: [[https://github.com/vspinu/company-math][GitHub.com: Company-Math]]
#+begin_src emacs-lisp
  ;; local configuration for TeX modes
  (defun pet/company-latex-mode ()
    "Sets 'company-mode' for 'text-mode'"
    ;; Add Backands
    (setq-local company-backends
                (append '((company-math-symbols-latex company-latex-commands))
                        company-backends)))

  ;; Add Company Extension for LaTeX Math
  (use-package company-math
    :config
    ;; Add hooks to Modes
    ;; Tex Mode
    (add-hook 'tex-mode-hook 'pet/company-latex-mode)
    ;; Org Mode
    (add-hook 'org-mode-hook 'pet/company-latex-mode)

    ;; global activation of the unicode symbol completion
    (add-to-list 'company-backends 'company-math-symbols-unicode))

#+end_src
***** C/C++/C#
****** Company C-Headers
This is an ~Extension~ for [[id:ba074e3c-58a2-4d3a-b1ec-4475993eaa99][C/C++/C#]] for ~Company Mode~.
~Documentation~ can be found here: [[https://github.com/randomphrase/company-c-headers][GitHub.com: Company-C-Headers]]
#+begin_src emacs-lisp :tangle no
  ;; Add Company Extension for C/C++
  (use-package company-c-headers)

#+end_src
***** Python
****** Company Jedi

This is an ~Extension~ for [[id:d76cab21-70db-4332-9b40-cb6b6af6643f][Python]] for ~Company Mode~.
~Documentation~ can be found here: [[https://github.com/emacsorphanage/company-jedi][GitHub.com: Company Jedi]]
#+begin_src emacs-lisp
  ;; local configuration for Python modes
  (defun pet/company-python-mode ()
    "Sets 'company-mode' for 'text-mode'"
    ;; Activate completion after 1 letters in python mode
    (setq company-minimum-prefix-length 1)
    ;; Add Jedi to Company Backends
    (add-to-list 'company-backends 'company-jedi))

  ;; Add Company Extension for Python
  (use-package company-jedi
    :config
    (add-hook 'python-mode-hook 'pet/company-python-mode))

#+end_src
***** Lua
This is an ~Extension~ for Lua for ~Company Mode~. ~Documentation~ can be found here: [[https://github.com/ptrv/company-lua][GitHub.com: Company-Lua]]
#+begin_src emacs-lisp
  ;; local configuration for Python modes
  (defun pet/company-lua-mode ()
    "Sets 'company-mode' for 'text-mode'"
    ;; Activate completion after 1 letters in python mode
    (setq company-minimum-prefix-length 1)
    ;; Add Lua to Company Backends
    (setq-local company-backends '((company-lua
                                    company-etags
                                    company-dabbrev-code
                                    company-yasnippet))))


    ;; Add Company Extension for Lua
    (use-package company-lua
      :config
      (add-hook 'lua-mode-hook 'pet/company-lua-mode))

#+end_src

**** Frontends
***** Company Box

~Company Box~ is an *alternative* ~Frontend~ that enables options like *different colors* for *different backends* and more.
Information can be found here: [[https://github.com/sebastiencs/company-box][GitHub.com: Company-Box]]
#+begin_src emacs-lisp
  ;; Add Alternative Frontend
  (use-package company-box
    :after company
    :diminish        ;; Don’t show mode in minibuffer
    :hook (company-mode . company-box-mode))

#+end_src
** Dev Tool Collection
:PROPERTIES:
:header-args:emacs-lisp: :tangle ../C01_EmacsConfiguration/.emacs.d/package_configs/dev_tools_collection_config.el :mkdirp yes
:END:
*** Flycheck

[[https://www.flycheck.org/en/latest/user/quickstart.html][Flycheck]] adds syntax checking capagilities.
It needs should be loaded together with =lsp-mode= or =eglot=.
You could also load it globally.
#+begin_src emacs-lisp :tangle no
  ;; Enable Flycheck for syntax checking.
  ;; Defer loading until used with lsp-mode
  (use-package flycheck
    :defer t
    :diminish
    :init (global-flycheck-mode))
    ;; :hook (lsp-mode . flycheck-mode)
    ;; (emacs-lisp-mode . flycheck-mode))

#+end_src
*** Git Time Machine

[[https://codeberg.org/pidu/git-timemachine][git-timemachine]] is a program that allows you to move backwards and forwards through a file’s commits.
=‘SPC g t’= will open the ~time machine~ on a file if it is in a git repo.
Then, while in ~normal mode~, you can use =‘CTRL-j’= and =‘CTRL-k’= to move backwards and forwards through the commits.
#+begin_src emacs-lisp
  ;;  Add Git Timemachine
  (use-package git-timemachine
    :after (git-timemachine evil)
    :hook (evil-normalize-keymaps . git-timemachine-hook)
    :config
      (evil-define-key 'normal git-timemachine-mode-map (kbd "C-j") 'git-timemachine-show-previous-revision)
      (evil-define-key 'normal git-timemachine-mode-map (kbd "C-k") 'git-timemachine-show-next-revision)

  	(pet/leader-keys
  	  "g t" '(git-timemachine :wk "Git time machine")))

#+end_src
*** Highlight Todo

[[https://github.com/tarsius/hl-todo][Hl-Todo]] highlights a specified set of keywords in comments and strings
#+begin_src emacs-lisp
  (use-package hl-todo
    :hook (;; (org-mode . hl-todo-mode)  ;; Not needed with Org Modern
           (prog-mode . hl-todo-mode))
    :config
    (setq hl-todo-highlight-punctuation ":"
          hl-todo-keyword-faces
          `(("TODO"       warning bold)
            ("FIXME"      error bold)
            ("HACK"       font-lock-constant-face bold)
            ("REVIEW"     font-lock-keyword-face bold)
            ("NOTE"       success bold)
            ("DEPRECATED" font-lock-doc-face bold))))

#+end_src
*** Origami Mode

[[https://github.com/gregsexton/origami.el][Origami]] is a text folding minor mode for [[id:3cf0fa83-18b3-4206-a109-f4606a94b8c1][Emacs]].
With this minor mode enabled, you can collapse and expand regions of text.
Seems to be *deprecated*
#+begin_src emacs-lisp :tangle no
  ;; Add Origami Mode for Folding
  (use-package origami
	:hook (yaml-mode . origami-mode)
	      (yaml-mode . highlight-indentation-mode)
	:bind (:map origami-mode-map
				("<tab>" . origami-recursively-toggle-node)
				("S-<tab>" . origami-toggle-all-nodes)
				("C-c C-n" . origami-next-fold)
				("C-c C-p" . origami-previous-fold)
				("C-c C-S-_" . origami-undo)
				("C-c C-S-M-_" . origami-redo)))

#+end_src
*** Citar
**** Load Citar

[[https://github.com/emacs-citar/citar][Citar]] provides a completing-read front-end to browse and act on ~BibTeX~, ~BibLaTeX~, and ~CSL~ [[id:460f9462-9a7b-4172-af3b-fb424b6e85b6][JSON]] ~bibliographic data~, and [[id:62eadd2d-023b-4d03-8eb0-527528f6e224][LaTeX]], markdown, and =org-cite= editing support.
:NOTE:
This section is partially inspired by: [[https://kristofferbalintona.me/posts/202206141852][KristofferBalintona.me: Org-Cite]]
:END:
#+begin_src emacs-lisp
  ;; Add Citar completion buffer for citations
  (use-package citar
    ;; The `:straight' keyword is not necessary. However, I do this to set a value
    ;; for the `:includes' keyword. This keyword tells use-package that those
    ;; package(s) are provided by this package, and not to search for them on
    ;; Melpa for download. Alternatively, you can set the `:straight' keyword to
    ;; nil in those package(s) use-package declaration.
    :straight (citar :type git :host github :repo "emacs-citar/citar" :includes (citar-org))
    :custom
    ;; A list of bib files. A good idea would be having its value be identical to
    ;; that of `org-cite-global-bibliography'. For me, I have all my bib file(s)
    ;; as a list of strings in `kb/bib-files'.
    (citar-bibliography pet/main-bib)

    ;; List of directories for reference nodes
    (citar-notes-paths (list pet/org-dir))

    (citar-open-note-function 'orb-citar-edit-note) ; Open notes in `org-roam'
    ;; (citar-at-point-function 'embark-act)           ; If use `embark'

    ;; Add Keybindings
    :general
    (:keymaps 'org-mode-map
  			:prefix "C-c b"
  			"b" '(citar-insert-citation :wk "Insert citation")
  			"r" '(citar-insert-reference :wk "Insert reference")
  			"o" '(citar-open-notes :wk "Open note")))

#+end_src
**** Citar Org Integration
#+begin_src emacs-lisp
  ;; Use `citar' with `org-cite'
  (use-package citar-org
  	:after oc
  	:custom
  	(org-cite-insert-processor 'citar)
  	(org-cite-follow-processor 'citar)
  	(org-cite-activate-processor 'citar))

#+end_src
*** Apheleia
[[https://github.com/radian-software/apheleia][Apheleia]] formats code automatically according to rules set by [[https://github.com/psf/black][Black]], [[https://prettier.io/][Prettier]] or [[https://pkg.go.dev/cmd/gofmt][GoFMT]] and so on.

:NOTE:
You need to have the underlying ~Code Formatters~ like [[https://github.com/psf/black][Black]], [[https://prettier.io/][Prettier]] or [[https://pkg.go.dev/cmd/gofmt][GoFMT]] installed, to use them with this [[id:1c44cf3c-6549-4e70-a3fd-491df7996dd5][Package]]
:END:
#+begin_src emacs-lisp :tangle no
  ;; Add Apheleia Code Formatter
  (use-package apheleia
	:config (apheleia-global-mode 1))

#+end_src
** DevDocs
:PROPERTIES:
:header-args:emacs-lisp: :tangle ../C01_EmacsConfiguration/.emacs.d/package_configs/devdocs_config.el :mkdirp yes
:END:

[[https://github.com/astoff/devdocs.el][DevDocs]] is a documentation viewer for [[id:3cf0fa83-18b3-4206-a109-f4606a94b8c1][Emacs]] similar to the built-in Info browser, but geared towards ~documentation~ distributed by the [[https://devdocs.io/][DevDocs]] website.
The custom function was taken from [[https://github.com/gopar/.emacs.d][GitHub.com: Gopar - Emacs.d]]
#+begin_src emacs-lisp
  (use-package devdocs
    :defer
    :bind ("C-c M-d" . pet/devdocs-lookup)
    :init
    (add-to-list 'display-buffer-alist
                 '("\\*devdocs\\*"
                   display-buffer-in-side-window
                   (side . right)
                   (slot . 3)
                   (window-parameters . ((no-delete-other-windows . t)))
                   (dedicated . t)))

    ;; Specify the directory to install devdocs to -- default is ’~/.emacs.d/devdocs’
    (setq devdocs-data-dir (concat pet/dotfiles-emacsconfig-dir "devdocs"))

    (defun pet/devdocs-lookup (&optional ask-docs)
      "Light wrapper around `devdocs-lookup` which pre-populates the function input with thing at point"
      (interactive "P")
      (let ((query (thing-at-point 'symbol t)))
        (devdocs-lookup ask-docs query)))

    ;; Narrow down the options by setting up hooks for language modes
    :hook ((python-mode . (lambda () (setq-local devdocs-current-docs
                                        '("django~4.2" "django_rest_framework" "python~3.12" "postgresql~16" "sqlite"))))
           (web-mode . (lambda () (setq-local devdocs-current-docs '("vue~3"
                                                                     "vue_router~4"
                                                                     "javascript"
                                                                     "typescript"
                                                                     "vitest"
                                                                     "moment"
                                                                     "tailwindcss"
                                                                     "html"
                                                                     "css"))))
           (typescript-mode . (lambda () (setq-local devdocs-current-docs '("vue~3"
                                                                            "vue_router~4"
                                                                            "javascript"
                                                                            "typescript"
                                                                            "vitest"
                                                                            "moment"))))))

#+end_src
** Language Support
*** Highlighting and Formatting
**** Traditional Language Modes
:PROPERTIES:
:header-args:emacs-lisp: :tangle ../C01_EmacsConfiguration/.emacs.d/package_configs/language_modes_config.el :mkdirp yes
:END:
***** Octave/Matlab

Just a short config adjusting the =auto-mode-alist=
#+begin_src emacs-lisp
  ;; Load Octave Mode automatically for specified files
  (setq auto-mode-alist
	(cons '("\\.m$" . octave-mode) auto-mode-alist))
  (setq auto-mode-alist
	(cons '("\\.sci$" . octave-mode) auto-mode-alist))

  ;; Setup Octave Mode
  (add-hook 'octave-mode-hook
		(lambda ()
		  (abbrev-mode 1)
		  (auto-fill-mode 1)
		  (if (eq window-system 'x)
		  (font-lock-mode 1))))

  ;; Use Infodocs within Emacs
  (autoload 'octave-help "octave-hlp" nil t)

#+end_src
***** LaTeX

Improve [[id:62eadd2d-023b-4d03-8eb0-527528f6e224][LaTeX]] support for [[id:3cf0fa83-18b3-4206-a109-f4606a94b8c1][Emacs]]
Lsp for latex should not be needed since its part of [[https://www.gnu.org/software/auctex/documentation.html][AUCTex]]
#+begin_src  emacs-lisp
  ;; Integrated environment for TeX
  (use-package tex-site
	:straight auctex
	:config
	;; Add Reftex Support to AUCTeX
	(setq reftex-plug-into-AUCTeX t)
	(setq reftex-default-bibliography
		  (list
		   pet/main-bib))
	;; Automatically insert math environment with '$'
	(setq TeX-electric-math t)
	;; Autocomplete command on '\'
	(setq TeX-electric-escape t)
	;; Autoinsert braces after '^' and '_' in math mode
	(setq TeX-electric-sub-and-superscript t))

  ;; Specify viewer programs
  (setq TeX-view-program-selection
		'(((output-dvi has-no-display-manager) "dvi2tty")
		  ((output-dvi style-pstricks) "dvips and gv")
		  (output-dvi "xdvi")
		  (output-pdf "Okular")
		  (output-pdf "PDF Tools")
		  ;; (output-pdf "Evince")
		  (output-html "xdg-open")))


  ;; Specify Viewer Calls
  (setq TeX-view-program-list '(("PDF Tools" TeX-pdf-tools-sync-view)))

  ;; Activate TeX source correlate Mode
  (setq TeX-source-correlate-mode t)
  ;; Starts server for inverse search
  (setq TeX-source-correlate-start-server t)

  ;; Hook to automatically refresh output buffer
  (add-hook 'TeX-after-compilation-finished-functions
			#'TeX-revert-document-buffer)

  ;; enable auto saving tex files
  (setq TeX-auto-save t)
  ;; enable completion and multifile structure (include/input)
  (setq TeX-parse-self t)
  (setq-default TeX-master nil)

  ;; set $ to insert math environment
  ;; ... for plain TeX
  (add-hook 'plain-TeX-mode-hook
			(lambda () (set (make-local-variable 'TeX-electric-math)
							(cons "$" "$"))))
  ;; ... for LaTeX
  (add-hook 'LaTeX-mode-hook
			(lambda () (set (make-local-variable 'TeX-electric-math)
							(cons "\\(" "\\)"))))

  ;; Activate source correlate mode
  (add-hook 'plain-TeX-mode-hook
			(lambda () (setq TeX-source-correlate-mode t)))

  ;; Load RefTeX...
  ;; ... with AUCTeX LaTeX mode
  (add-hook 'LaTeX-mode-hook 'turn-on-reftex)
  ;; ... with with Emacs latex mode
  (add-hook 'latex-mode-hook 'turn-on-reftex)

  ;; Enable auto completion of right braces (")}]\)\]\}")
  ;; Use 'C-u 1' or 'C-q' before to disable
  (setq LaTeX-electric-left-right-brace t)

  ;; LatexMK support for AUCTeX
  ;; (use-package auctex-latexmk)

  ;; Useful features for LaTeX-mode
  ;;(use-package latex-extra)

  ;; Fast input methods for LaTeX environments and math
  (use-package cdlatex
	:bind
	(:map LaTeX-mode-map
		  ("C-#" . cdlatex-mode))
	:config
	;; Maybe add hook to autoload cdlatex
	;; (add-hook 'LaTeX-mode-hook #'turn-on-cdlatex)
	;; (add-hook 'org-mode-hook #'turn-on-org-cdlatex)

	;; Added personal keybinding
	(pet/leader-keys
		  "tmc" '(cdlatex-mode
				  :which-key "CDLaTeX Minor Mode")))

#+end_src
***** Python
Improve [[id:d76cab21-70db-4332-9b40-cb6b6af6643f][Python]] functionality of [[id:3cf0fa83-18b3-4206-a109-f4606a94b8c1][Emacs]]

The commented lines are for distributions like Ubuntu, where =python= referes to python 2 and python 3 need to be called by =python3=

=Pyrigth= is a ~language server~ written in C# that is a lot faster then the normal pyls, but it is not fully open-source.
A better alternative is =jedi=
Python debugger is set to =debugpy= (don't forget to pip install =debugpy= - alternative to "ptvsd>=4.2"), because it is recommended over the default ptsd
#+begin_src emacs-lisp
  ;; Set Default Indentation for Python
  (setq-default python-indent-offset 4)

	;;;; Customize Python Mode for emacs, add lsp
  ;;(add-hook 'python-mode-hook 'lsp-deferred)
  ;;  :custom
  ;;  (python-shell-interpreter "python")
  ;;  (dab-python-executable "python")
  ;;  (dab-python-debugger 'debugpy)
  ;;  :config
  ;;  (require 'dab-python)
  ;;  )

  ;; ;; Enable Virtual Environment Support
  ;; (use-package pyvenv
  ;; 	:config
  ;; 	(pyvenv-mode 1))

#+end_src
***** Rust
Add [[https://github.com/rust-lang/rust-mode][Rust Mode]] to support the [[id:a3286d40-db6c-4757-a586-bcfbedd7afa2][Rust Programming Language]]
#+begin_src emacs-lisp
  ;; Add Support for Rust
  (use-package rust-mode)

#+end_src
***** PHP
~Documentation~ can be found here: [[https://github.com/emacs-php/php-mode][GitHub.com: PHP Mode]]
#+begin_src emacs-lisp
  ;; Load PHP Package
  (use-package php-mode)

  ;; Load Org PHP Support
  ;; (use-package ob-php)

#+end_src
***** Lua
#+begin_src emacs-lisp
  ;; Add Mode for Lua
  (use-package lua-mode)

#+end_src
***** Julia
Add [[https://github.com/JuliaEditorSupport/julia-emacs][Julia Mode]] to support the [[id:156ecd0f-2d32-48e4-8e8e-132831dae624][Julia Programming Language]]
#+begin_src emacs-lisp
  ;; Add Support for the Julia Programming Language
  (use-package julia-mode)

#+end_src
***** Zig
Add [[https://github.com/ziglang/zig-mode][Zig-Mode]] to support the [[https://ziglang.org/][Zig Programming Language]], a modern ~system's~ [[id:8b26358a-672f-43c1-8507-1b388b3a31cd][programming language]]
#+begin_src emacs-lisp
  ;; Add Support for Nix Language and Nix Configurations
  (use-package zig-mode
	:mode ("\\.zig\\'"))

#+end_src
***** Nix
Add [[https://github.com/NixOS/nix-mode][Nix-Mode]] to support the [[https://nixos.org/][Nix Language]] for the ~customization~ of [[id:2a8642c6-544c-4ffc-bb95-348bd5a24ee5][NixOS]]
#+begin_src emacs-lisp
  ;; Add Support for Nix Language and Nix Configurations
  (use-package nix-mode
	:mode ("\\.nix\\'" "\\.nix.in\\'"))
  ;; Viewing Nix .drv Files
  (use-package nix-drv-mode
	:straight nil ;; already loaded with nix-mode
	:ensure nix-mode
	:mode "\\.drv\\'")
  ;; Viewing Nix .drv Files
  (use-package nix-flake
	:straight nil ;; already loaded with nix-mode
	:ensure nix-mode)
  ;; Provides Interactive Shell to call nix functions
  (use-package nix-shell
	:straight nil ;; already loaded with nix-mode
	:ensure nix-mode
	:commands (nix-shell-unpack nix-shell-configure nix-shell-build))
  ;; Adds a REPL for Nix (plus interface for company)
  (use-package nix-repl
	:straight nil ;; already loaded with nix-mode
	:ensure nix-mode
	:commands (nix-repl))

#+end_src
***** Web Mode
~Web-Mode~ is an *alternative* [[id:127b78f9-ac8e-4ce0-a316-0850559c44e4][Mode]] for editing [[id:df751d5b-04e3-4cb2-83de-76a6e39943d6][HTML]] Documents in [[id:3cf0fa83-18b3-4206-a109-f4606a94b8c1][Emacs]]
~Documentation~ can be found here: [[https://web-mode.org/][Web-Mode.org]]
#+begin_src emacs-lisp :tangle no
  ;; Add alternative Mode for HTML Developement
  (use-package web-mode
    :init
    (setq-default web-mode-code-indent-offset 2)
    ;; (setq web-mode-engines-alist '(("django" . "\\.html\\'")))

    ;; :hook (web-mode . (lambda ()
    ;;                     (highlight-indentation-mode -1)
    ;;                     (electric-pair-local-mode -1)))
    :custom
    (web-mode-script-padding 0)
    (web-mode-enable-current-element-highlight t)
    (web-mode-enable-current-column-highlight t)
    (web-mode-markup-indent-offset 2)
    (web-mode-css-indent-offset 2)
    (web-mode-sql-indent-offset 2)
    :mode (("\\.vue\\'" . web-mode)
  		 ("\\.html\\'" . web-mode)))

#+end_src
***** ESS Mode
[[https://ess.r-project.org/][ESS Mode]] (~Emacs Speaks Statistics~) is an [[id:3cf0fa83-18b3-4206-a109-f4606a94b8c1][Emacs]] [[id:127b78f9-ac8e-4ce0-a316-0850559c44e4][Mode]] meant for ~Programming~ with [[id:8b26358a-672f-43c1-8507-1b388b3a31cd][Languages]] meant for ~statistical Computation~ like [[id:c64bc74b-bc42-4208-bf36-3c6832392de9][R]], ~S~, ~SAS~, ~SPSS~
#+begin_src emacs-lisp
  ;; Load Support for statistical Computation
  (use-package ess)

#+end_src
****** ESS Smart Equals

=ess-smart-equals= is a ~package extension~ for ~ESS Mode~ to make some ~Quality of Life adjustments~ like *automatic* ~closing braces~, inserting =<-= for ='='= and more.
~Documentation~ can be found here: [[https://github.com/genovese/ess-smart-equals][GitHub.com: ess-smart-equals]]
#+begin_src emacs-lisp
  ;; Helper Package for assignment operators and more in ESS
  (use-package ess-smart-equals
    ;; Add additional support (automatic pared braces etc..)
    :init   (setq ess-smart-equals-extra-ops '(brace paren percent))
    ;; Load moade with ESS
    :after  (:any ess-r-mode inferior-ess-r-mode ess-r-transcript-mode)
    ;; Activate modoe
    :config (ess-smart-equals-activate))

#+end_src
****** ESS R Insert Obj
=ess-r-insert-obj= is a ~package extension~ for ~ESS Mode~ to improve the interaction with the ~completion framework~ provided by the [[id:c64bc74b-bc42-4208-bf36-3c6832392de9][R]] [[id:c7d7135a-3f11-4fea-8bcf-e3e83318f453][Package]] =tidyverse=
~Documentation~ can be found here: [[https://github.com/ShuguangSun/ess-r-insert-obj][GitHub.com: ess-r-insert-obj]]
#+begin_src emacs-lisp
  ;; improve interaction between ESS and R Package 'tidyverse'
  (use-package ess-r-insert-obj)

#+end_src
****** ESS View Data

=ess-view-data= is a ~package extension~ for ~ESS Mode~ to do data views and manipulation similar to the [[id:c64bc74b-bc42-4208-bf36-3c6832392de9][R]] [[id:c7d7135a-3f11-4fea-8bcf-e3e83318f453][Package]] =tidyverse=
~Documentation~ can be found here: [[https://github.com/ShuguangSun/ess-view-data][GitHub.com: ess-view-data]]
#+begin_src emacs-lisp
  ;; Tidyverse-like data views and manipulations
  (use-package ess-view-data)

#+end_src
***** CSV

Add support for ~CSV-like~ files in [[id:3cf0fa83-18b3-4206-a109-f4606a94b8c1][Emacs]]
~Repository~ can be found here: [[https://git.savannah.gnu.org/cgit/emacs/elpa.git/?h=externals/csv-mode][Git.Savannah.GNU.org: csv-mode]]
#+begin_src emacs-lisp
  ;; Major mode for editing comma/char separated values
  (use-package csv-mode)

#+end_src
***** YAML

Add support for [[id:cf227bfa-d401-4f12-b0ad-2fd1a233f206][YAML]] ~Files~
#+begin_src emacs-lisp
  ;; Add support for YAML files
  (use-package yaml-mode
    :mode "\\.ya?ml\\'")

#+end_src
***** Gnuplot Mode

~Gnuplot Mode~ adds support for ~Gnuplot~ to [[id:3cf0fa83-18b3-4206-a109-f4606a94b8c1][Emacs]]
~Documentation~ can be found here: [[https://github.com/mkmcc/gnuplot-mode][GitHub.com: Gnuplot-Mode]]
#+begin_src emacs-lisp
  ;; Add Gnuplot Support
  (use-package gnuplot-mode
	:config
	;; Use this if gnuplot is not /usr/bin/gnuplot
	(setq gnuplot-program "/usr/bin/gnuplot")

	;; automatically enter gnuplot mode
	(setq auto-mode-alist
		  (append '(("\\.\\(gp\\|gnuplot\\)$" . gnuplot-mode)) auto-mode-alist)))

#+end_src
***** PlantUML

You can find the ~Documentation~ here: [[https://github.com/skuro/plantuml-mode][GitHub.com: PlantUML-Mode]]
#+begin_src emacs-lisp
  ;; Add PlantUML Support
  (use-package plantuml-mode
    :config
    ;; Set Execution Mode to Render with Local Binary
    (setq plantuml-executable-path "/usr/bin/plantuml")
    (setq plantuml-default-exec-mode 'executable)
    ;; Set load path condition
    :mode "\\.pl?a?n?t?uml\\'")

#+end_src
**** Treesitter Language Modes
:PROPERTIES:
:header-args:emacs-lisp: :tangle ../C01_EmacsConfiguration/.emacs.d/package_configs/language_ts_modes_config.el :mkdirp yes
:END:

[[https://github.com/tree-sitter/tree-sitter][Tree-sitter]] is a library that transforms structured texts like source code and markdown into a ~concrete syntax tree~.
It basically replaces [[id:26419d86-c777-4765-9dd1-9353f17a0716][RegExp]] based ~code parsers~ in most modern ~IDEs~.
Mastering Emacs has written pretty good guides that go into more detail about it:
- [[https://www.masteringemacs.org/article/tree-sitter-complications-of-parsing-languages][MasteringEmacs.org: Tree-Sitter Complications of Parsing Languages]]
- [[https://www.masteringemacs.org/article/how-to-get-started-tree-sitter][MasteringEmacs.org: How to get Started with Tree-Sitter]]

[[id:3cf0fa83-18b3-4206-a109-f4606a94b8c1][Emacs]] supports ~tree-sitter~ out of the box since ~Version 29~.
If you are on an older version, look into using [[https://emacs-tree-sitter.github.io/][Emacs-Tree-Sitter]]


***** Language Mode Sources List

The list below specifies a ~source repositories~ for various languages.
You can add them by typing =M-x treesit-install-language-grammar=

Alternatively you can download a precompiled list of language grammars here:
+ [[https://github.com/emacs-tree-sitter/tree-sitter-langs][GitHub.com: Emacs-Tree-Sitter - Tree-Sitter Language Grammars]]

:NOTE:
This is not a complete list of languages, nor does it aim to be.
You can probably find a more up-to-date list of language modules here:
[[https://tree-sitter.github.io/tree-sitter/][GitHub.io: Tree-Sitter]]
:END:
#+begin_src emacs-lisp
  (setq treesit-language-source-alist
        '((bash "https://github.com/tree-sitter/tree-sitter-bash")
        (c "https://github.com/tree-sitter/tree-sitter-c")
        (cpp "https://github.com/tree-sitter/tree-sitter-cpp")
        (c-sharp "https://github.com/tree-sitter/tree-sitter-c-sharp")
        (commonlisp "https://github.com/theHamsta/tree-sitter-commonlisp")
        (cmake "https://github.com/uyha/tree-sitter-cmake")
        (css "https://github.com/tree-sitter/tree-sitter-css")
        (dockerfile "https://github.com/camdencheek/tree-sitter-dockerfile")
        (elisp "https://github.com/Wilfred/tree-sitter-elisp")
        (erlang "https://github.com/WhatsApp/tree-sitter-erlang/")
        (go "https://github.com/tree-sitter/tree-sitter-go")
        (gitignore "https://github.com/shunsambongi/tree-sitter-gitignore")
        (graphql "https://github.com/bkegley/tree-sitter-graphql")
        (haskell "https://github.com/tree-sitter/tree-sitter-haskell")
        (html "https://github.com/tree-sitter/tree-sitter-html")
        (java "https://github.com/tree-sitter/tree-sitter-java")
        (javascript "https://github.com/tree-sitter/tree-sitter-javascript" "master" "src")
        (jq "https://github.com/flurie/tree-sitter-jq")
        (json "https://github.com/tree-sitter/tree-sitter-json")
        (json5 "https://github.com/Joakker/tree-sitter-json5")
        (julia "https://github.com/tree-sitter/tree-sitter-julia")
        (latex "https://github.com/latex-lsp/tree-sitter-latex")
        (llvm "https://github.com/benwilliamgraham/tree-sitter-llvm")
        (lua "https://github.com/Azganoth/tree-sitter-lua")
        (make "https://github.com/alemuller/tree-sitter-make")
        (markdown "https://github.com/ikatyang/tree-sitter-markdown")
        (meson "https://github.com/staysail/tree-sitter-meson")  ;; There is an alternative which supposedly heavily diverges from the official tree-sitter grammer: https://github.com/Decodetalkers/tree-sitter-meson
        (kotlin "https://github.com/fwcd/tree-sitter-kotlin")
        (nix "https://github.com/nix-community/tree-sitter-nix")
        (objc "https://github.com/jiyee/tree-sitter-objc")
        (ocaml "https://github.com/tree-sitter/tree-sitter-ocaml")
        (org "https://github.com/milisims/tree-sitter-org")
        (perl "https://github.com/tree-sitter-perl/tree-sitter-perl") ;; Another option is: https://github.com/ganezdragon/tree-sitter-perl
        (python "https://github.com/tree-sitter/tree-sitter-python")
        (php "https://github.com/tree-sitter/tree-sitter-php")
        (r "https://github.com/r-lib/tree-sitter-r")
        (regex "https://github.com/tree-sitter/tree-sitter-regex")
        (ruby "https://github.com/tree-sitter/tree-sitter-ruby")
        (rust "https://github.com/tree-sitter/tree-sitter-rust")
        (scheme "https://github.com/6cdh/tree-sitter-scheme")
        (sexp "https://github.com/AbstractMachinesLab/tree-sitter-sexp")
        (sql "https://github.com/m-novikov/tree-sitter-sql")   ;; Focus on PostgreSQL Syntax
        (sqlite "https://github.com/dhcmrlchtdj/tree-sitter-sqlite")
        (toml "https://github.com/tree-sitter/tree-sitter-toml")
        (tsx "https://github.com/tree-sitter/tree-sitter-typescript" "master" "tsx/src")
        (typescript "https://github.com/tree-sitter/tree-sitter-typescript" "master" "typescript/src")
        (yaml "https://github.com/ikatyang/tree-sitter-yaml")
        (zig "https://github.com/maxxnino/tree-sitter-zig")))

#+end_src

***** Remap Major Modes

Remaps old ~regexp-based~ [[id:127b78f9-ac8e-4ce0-a316-0850559c44e4][Major Modes]] to their =-ts-= counterpart.
This is a little hacky, but does the trick for now.
Once these modes work sufficiently enough, the old modes will be swapped over.
#+begin_src emacs-lisp
  ;; Remap Major modes to TS Counterpars
  (setq major-mode-remap-alist
        '((yaml-mode . yaml-ts-mode)
  		(c-mode . c-ts-mode)
  		(go-mode . go-ts-mode)
  		(bash-mode . bash-ts-mode)
  		(nix-mode . nix-ts-mode)
  		(js2-mode . js-ts-mode)
  		(html-mode . html-ts-mode)
  		(typescript-mode . typescript-ts-mode)
  		(json-mode . json-ts-mode)
  		(css-mode . css-ts-mode)
  		(rust-mode . rust-ts-mode)
  		;; (zig-mode . zig-ts-mode)
  		(python-mode . python-ts-mode)))

#+end_src
***** Nix TS Mode
#+begin_src emacs-lisp
  ;; Add Nix support to tree-sitter
  (use-package nix-ts-mode
    :mode "\\.nix\\'")

#+end_src
***** Zig TS Mode
#+begin_src emacs-lisp
  ;; Add Nix support to tree-sitter
  (use-package zig-ts-mode
    :mode "\\.zig\\'")

#+end_src
*** Language Servers
**** LSP Mode
:PROPERTIES:
:header-args:emacs-lisp: :tangle ../C01_EmacsConfiguration/.emacs.d/package_configs/lsp_mode_config.el :mkdirp yes
:END:
***** Setup
We use the [[ https://emacs-lsp.github.io/lsp-mode/][lsp-mode]] to enable ~IDE-like functionality~ for many different programming languages via “language servers” that speak the *Language Server Protocol*.
Before trying to set up =lsp-mode= for a particular language, check out the documentation for your language so that you can learn which [[https://emacs-lsp.github.io/lsp-mode/page/languages/][language servers are available]] and how to install them.

The lsp-keymap-prefix setting enables you to define a prefix for where lsp-mode’s default keybindings will be added. I highly recommend using the prefix to find out what you can do with lsp-mode in a buffer.

The which-key integration adds helpful descriptions of the various keys so you should be able to learn a lot just by pressing C-c s in a lsp-mode buffer and trying different things that you find there.

#+begin_src emacs-lisp
  ;; Add Language Server Support
  (use-package lsp-mode
    ;; :hook ((c-mode          ;; clangd
    ;;         c++-mode        ;; clangd
    ;;         c-or-c++-mode   ;; clangd
    ;;         python-mode     ;; pyright
    ;;         typescript-mode ;; ts-ls (tsserver wrapper)
    ;;         js-mode         ;; ts-ls (tsserver wrapper)
    ;;         web-mode        ;; ts-ls/HTML/CSS
    ;;         ) . lsp-deferred)
    :commands (lsp lsp-deferred)
    :bind (:map lsp-mode-map
        ("M-TAB" . completion-at-point))
    :custom (lsp-headerline-breadcrumb-enable nil)
    :config (lsp-enable-which-key-integration t)
    ;; automatically set project root as determined by projectile
    ;; (setq lsp-auto-guess-root t)
    ;; Disable logging of all language server message for performance
    (setq lsp-log-io nil)
    ;; Set LSP Restart to auto (interactive by default)
    ;; (setq lsp-restart 'auto-restart)
    ;; disable symbol references
    (setq lsp-enable-symbol-highlighting nil)
    ;; disable on type formatting
    (setq lsp-enable-on-type-formatting nil)
    ;; disable signature conditions and documentation
    (setq lsp-signature-auto-activate nil)
    (setq lsp-signature-render-documentation nil)
    ;; disable eldoc hook
    (setq lsp-eldoc-hook nil)
    ;; disable modeline informations
    (setq lsp-modeline-code-actions-enable nil)
    (setq lsp-modeline-diagnostics-enable nil)
    ;; disable breadcrumb/headerline
    (setq lsp-headerline-breadcrumb-enable nil)
    ;; disable semantic tokens
    (setq lsp-semantic-tokens-enable nil)
    ;; disable code folding
    (setq lsp-enable-folding nil)
    ;; dont enable imenu automatically
    (setq lsp-enable-imenu nil)
    ;; disable snippet completion
    (setq lsp-enable-snippet nil)
    ;; Set delay (0.5 is default)
    (setq lsp-idle-delay 0.5)
    ;; Increase amount of data read from process for lsp (1MB)
    (setq read-process-output-max (* 1024 1024))

    ;; Add Lsp Functions to Leader Keys
    (pet/leader-keys
      "tld" 'xref-find-definitions
      "tlr" 'xref-find-references
      ;; "tln" 'lsp-ui-find-next-reference
      ;; "tlp" 'lsp-ui-find-prev-reference
      "tls" 'counsel-imenu
      ;; "tle" 'lsp-ui-flycheck-list
      ;; "tlS" 'lsp-ui-sideline-mode
      "tlX" 'lsp-execute-code-action)

#+end_src
***** Consult LSP
[[https://github.com/gagbo/consult-lsp][Consult-LSP]] adds ~LSP Mode~ support to ~Consult~
***** lsp-ui

=lsp-ui= is a set of UI enhancements built on top of lsp-mode which make Emacs feel even more like an IDE. Check out the screenshots on the [[https://emacs-lsp.github.io/lsp-ui/][lsp-ui homepage]] to see examples of what it can do.

#+begin_src emacs-lisp :tangle no
  ;; Add lsp ui for higher level ui options
  (use-package lsp-ui
   :commands lsp-ui-mode
   ;; :hook (lsp-mode . lsp-ui-mode)
   ;; Show lsp info on sideline
   :config
   (setq lsp-ui-doc-enable nil)
   (setq lsp-ui-doc-header t)
   (setq lsp-ui-doc-include-signature t)
   (setq lsp-ui-doc-border (face-foreground 'default))
   (setq lsp-ui-sideline-show-code-actions t)
   ;; (setq lsp-ui-sideline-enable t)
   ;; (setq lsp-ui-sideline-show-hover nil)
   ;; (setq lsp-ui-doc-position 'bottom)
   (setq lsp-ui-sideline-delay 0.05))

#+end_src
***** lsp-treemacs

+ =lsp-treemacs= provides nice tree views for different aspects of your code like symbols in a file, references of a symbol, or diagnostic messages (errors and warnings) that are found in your code.

Try these commands with =M-x=:

 - =lsp-treemacs-symbols= - Show a tree view of the symbols in the current file
 - =lsp-treemacs-references= - Show a tree view for the references of the symbol under the cursor
 - =lsp-treemacs-error-list= - Show a tree view for the diagnostic messages in the project

This package is built on the =treemacs= ~package~ which might be of some interest to you if you like to have a file browser at the left side of your screen in your editor.

#+begin_src emacs-lisp
  ;; Extend lsp and treemacs integration
  (use-package lsp-treemacs
    :after (lsp treemacs))

#+end_src
***** Debugging

There's a companion mode for =lps-mode= specifically for debugging
Dap stands for Debug Adapter
#+begin_src emacs-lisp
  (use-package dap-mode
    :after lsp-mode
    :config (dap-auto-configure-mode))
  ;;(use-package dap-mode
  ;;  :after lsp-mode
  ;;  :custom
  ;;  (lsp-enable-dap-auto-configure nil)
  ;;  :config
  ;;  (dap-ui-mode 1)
  ;;  (dap-tooltip-mode 1)
  ;;  (require 'dap-node)
  ;;  (dap-node-setup))

#+end_src
***** LSP-Mode Languages
****** Python
#+begin_src emacs-lisp
  ;; Setup lsp-pyright Server
  (use-package lsp-pyright
	:hook (python-mode . (lambda () (require 'lsp-pyright)))
	;; Use Python 3 in case Python 2 is installed as well
	:init (when (executable-find "python3")
			(setq lsp-pyright-python-executable-cmd "python3"))
	)



#+end_src
****** LaTeX
~LSP Options~ for [[id:62eadd2d-023b-4d03-8eb0-527528f6e224][LaTeX]]:
+ [[https://github.com/latex-lsp/texlab][GitHub: LaTeX-LSP - texlab]]
+ [[https://github.com/astoff/digestif][GitHub.com: Astoff - digestif]]
#+begin_src emacs-lisp
  ;; Lsp-Mode Settings for LaTeX
  (setq lsp-tex-server 'digestif) ;; Use Digestif
  ;; (setq lsp-tex-server 'texlab) ;; Use texlab instead

#+end_src
**** Eglot
:PROPERTIES:
:header-args:emacs-lisp: :tangle ../C01_EmacsConfiguration/.emacs.d/package_configs/eglot_config.el :mkdirp yes
:END:
***** Setup
[[https://github.com/joaotavora/eglot][Eglot]] comes preconfigured with [[id:3cf0fa83-18b3-4206-a109-f4606a94b8c1][Emacs]] since Version 29
#+begin_src emacs-lisp
  ;; add language-servers
  (with-eval-after-load 'eglot
    (add-to-list 'eglot-server-programs
                 '((rust-mode rust-ts-mode) . ("rust-analyzer" ))))

#+end_src
***** Consult Eglot
[[https://github.com/gagbo/consult-lsp][Consult-Eglot]] adds ~Eglot~ support to ~Consult~
***** Eglot Languages
#+begin_src emacs-lisp
  ;; Automatically start eglot for listed languages
  (cl-loop for lang in
           '(;; Python
             python-mode-hook
             python-ts-mode-hook

  		   ;; C Lang
  		   c-mode-hook
  		   c-ts-mode-hook

  		   ;; C++ Lang
  		   c++-mode-hook
  		   c++-ts-mode-hook
  		   c-or-c++-mode-hook
  		   c-or-c++-ts-mode-hook

  		   ;; Rust
  		   rust-ts-mode

  		   ;; Go
  		   go-ts-mode

  		   ;; Lua
  		   lua-ts-mode

  		   ;; HTML
  		   html-mode
  		   html-ts-mode

  		   ;; CSS
  		   css-mode
  		   css-ts-mode

  		   ;; JSON
  		   json-ts-mode

  		   ;; YAML
             yaml-ts-mode)
           do
           (add-hook lang 'eglot-ensure))

#+end_src
*** Language Servers
**** LSP Mode
:PROPERTIES:
:header-args:emacs-lisp: :tangle ../C01_EmacsConfiguration/.emacs.d/package_configs/lsp_mode_config.el :mkdirp yes
:END:
***** Setup
We use the [[ https://emacs-lsp.github.io/lsp-mode/][lsp-mode]] to enable ~IDE-like functionality~ for many different programming languages via “language servers” that speak the *Language Server Protocol*.
Before trying to set up =lsp-mode= for a particular language, check out the documentation for your language so that you can learn which [[https://emacs-lsp.github.io/lsp-mode/page/languages/][language servers are available]] and how to install them.

The lsp-keymap-prefix setting enables you to define a prefix for where lsp-mode’s default keybindings will be added. I highly recommend using the prefix to find out what you can do with lsp-mode in a buffer.

The which-key integration adds helpful descriptions of the various keys so you should be able to learn a lot just by pressing C-c s in a lsp-mode buffer and trying different things that you find there.

#+begin_src emacs-lisp
  ;; Add Language Server Support
  (use-package lsp-mode
    ;; :hook ((c-mode          ;; clangd
    ;;         c++-mode        ;; clangd
    ;;         c-or-c++-mode   ;; clangd
    ;;         python-mode     ;; pyright
    ;;         typescript-mode ;; ts-ls (tsserver wrapper)
    ;;         js-mode         ;; ts-ls (tsserver wrapper)
    ;;         web-mode        ;; ts-ls/HTML/CSS
    ;;         ) . lsp-deferred)
    :commands (lsp lsp-deferred)
    :bind (:map lsp-mode-map
        ("M-TAB" . completion-at-point))
    :custom (lsp-headerline-breadcrumb-enable nil)
    :config (lsp-enable-which-key-integration t)
    ;; automatically set project root as determined by projectile
    ;; (setq lsp-auto-guess-root t)
    ;; Disable logging of all language server message for performance
    (setq lsp-log-io nil)
    ;; Set LSP Restart to auto (interactive by default)
    ;; (setq lsp-restart 'auto-restart)
    ;; disable symbol references
    (setq lsp-enable-symbol-highlighting nil)
    ;; disable on type formatting
    (setq lsp-enable-on-type-formatting nil)
    ;; disable signature conditions and documentation
    (setq lsp-signature-auto-activate nil)
    (setq lsp-signature-render-documentation nil)
    ;; disable eldoc hook
    (setq lsp-eldoc-hook nil)
    ;; disable modeline informations
    (setq lsp-modeline-code-actions-enable nil)
    (setq lsp-modeline-diagnostics-enable nil)
    ;; disable breadcrumb/headerline
    (setq lsp-headerline-breadcrumb-enable nil)
    ;; disable semantic tokens
    (setq lsp-semantic-tokens-enable nil)
    ;; disable code folding
    (setq lsp-enable-folding nil)
    ;; dont enable imenu automatically
    (setq lsp-enable-imenu nil)
    ;; disable snippet completion
    (setq lsp-enable-snippet nil)
    ;; Set delay (0.5 is default)
    (setq lsp-idle-delay 0.5)
    ;; Increase amount of data read from process for lsp (1MB)
    (setq read-process-output-max (* 1024 1024))

    ;; Add Lsp Functions to Leader Keys
    (pet/leader-keys
      "tld" 'xref-find-definitions
      "tlr" 'xref-find-references
      ;; "tln" 'lsp-ui-find-next-reference
      ;; "tlp" 'lsp-ui-find-prev-reference
      "tls" 'counsel-imenu
      ;; "tle" 'lsp-ui-flycheck-list
      ;; "tlS" 'lsp-ui-sideline-mode
      "tlX" 'lsp-execute-code-action)

#+end_src
***** Consult LSP
[[https://github.com/gagbo/consult-lsp][Consult-LSP]] adds ~LSP Mode~ support to ~Consult~
***** lsp-ui

=lsp-ui= is a set of UI enhancements built on top of lsp-mode which make Emacs feel even more like an IDE. Check out the screenshots on the [[https://emacs-lsp.github.io/lsp-ui/][lsp-ui homepage]] to see examples of what it can do.

#+begin_src emacs-lisp :tangle no
  ;; Add lsp ui for higher level ui options
  (use-package lsp-ui
   :commands lsp-ui-mode
   ;; :hook (lsp-mode . lsp-ui-mode)
   ;; Show lsp info on sideline
   :config
   (setq lsp-ui-doc-enable nil)
   (setq lsp-ui-doc-header t)
   (setq lsp-ui-doc-include-signature t)
   (setq lsp-ui-doc-border (face-foreground 'default))
   (setq lsp-ui-sideline-show-code-actions t)
   ;; (setq lsp-ui-sideline-enable t)
   ;; (setq lsp-ui-sideline-show-hover nil)
   ;; (setq lsp-ui-doc-position 'bottom)
   (setq lsp-ui-sideline-delay 0.05))

#+end_src
***** lsp-treemacs

+ =lsp-treemacs= provides nice tree views for different aspects of your code like symbols in a file, references of a symbol, or diagnostic messages (errors and warnings) that are found in your code.

Try these commands with =M-x=:

 - =lsp-treemacs-symbols= - Show a tree view of the symbols in the current file
 - =lsp-treemacs-references= - Show a tree view for the references of the symbol under the cursor
 - =lsp-treemacs-error-list= - Show a tree view for the diagnostic messages in the project

This package is built on the =treemacs= ~package~ which might be of some interest to you if you like to have a file browser at the left side of your screen in your editor.

#+begin_src emacs-lisp
  ;; Extend lsp and treemacs integration
  (use-package lsp-treemacs
    :after (lsp treemacs))

#+end_src
***** Debugging

There's a companion mode for =lps-mode= specifically for debugging
Dap stands for Debug Adapter
#+begin_src emacs-lisp
  (use-package dap-mode
    :after lsp-mode
    :config (dap-auto-configure-mode))
  ;;(use-package dap-mode
  ;;  :after lsp-mode
  ;;  :custom
  ;;  (lsp-enable-dap-auto-configure nil)
  ;;  :config
  ;;  (dap-ui-mode 1)
  ;;  (dap-tooltip-mode 1)
  ;;  (require 'dap-node)
  ;;  (dap-node-setup))

#+end_src
***** LSP-Mode Languages
****** Python
#+begin_src emacs-lisp
  ;; Setup lsp-pyright Server
  (use-package lsp-pyright
	:hook (python-mode . (lambda () (require 'lsp-pyright)))
	;; Use Python 3 in case Python 2 is installed as well
	:init (when (executable-find "python3")
			(setq lsp-pyright-python-executable-cmd "python3"))
	)



#+end_src
****** LaTeX
~LSP Options~ for [[id:62eadd2d-023b-4d03-8eb0-527528f6e224][LaTeX]]:
+ [[https://github.com/latex-lsp/texlab][GitHub: LaTeX-LSP - texlab]]
+ [[https://github.com/astoff/digestif][GitHub.com: Astoff - digestif]]
#+begin_src emacs-lisp
  ;; Lsp-Mode Settings for LaTeX
  (setq lsp-tex-server 'digestif) ;; Use Digestif
  ;; (setq lsp-tex-server 'texlab) ;; Use texlab instead

#+end_src
**** Eglot
:PROPERTIES:
:header-args:emacs-lisp: :tangle ../C01_EmacsConfiguration/.emacs.d/package_configs/eglot_config.el :mkdirp yes
:END:
***** Setup
[[https://github.com/joaotavora/eglot][Eglot]] comes preconfigured with [[id:3cf0fa83-18b3-4206-a109-f4606a94b8c1][Emacs]] since Version 29
#+begin_src emacs-lisp
  ;; add language-servers
  (with-eval-after-load 'eglot
    (add-to-list 'eglot-server-programs
                 '((rust-mode rust-ts-mode) . ("rust-analyzer" ))))

#+end_src
***** Consult Eglot
[[https://github.com/gagbo/consult-lsp][Consult-Eglot]] adds ~Eglot~ support to ~Consult~
***** Eglot Languages
#+begin_src emacs-lisp
  ;; Automatically start eglot for listed languages
  (cl-loop for lang in
           '(;; Python
             python-mode-hook
             python-ts-mode-hook

  		   ;; C Lang
  		   c-mode-hook
  		   c-ts-mode-hook

  		   ;; C++ Lang
  		   c++-mode-hook
  		   c++-ts-mode-hook
  		   c-or-c++-mode-hook
  		   c-or-c++-ts-mode-hook

  		   ;; Rust
  		   rust-ts-mode

  		   ;; Go
  		   go-ts-mode

  		   ;; Lua
  		   lua-ts-mode

  		   ;; HTML
  		   html-mode
  		   html-ts-mode

  		   ;; CSS
  		   css-mode
  		   css-ts-mode

  		   ;; JSON
  		   json-ts-mode

  		   ;; YAML
             yaml-ts-mode)
           do
           (add-hook lang 'eglot-ensure))

#+end_src
* Terminal Modes
** Vterm
:PROPERTIES:
:header-args:emacs-lisp: :tangle ../C01_EmacsConfiguration/.emacs.d/package_configs/vterm_config.el :mkdirp yes
:END:
*** Load Vterm
~vterm~ is a terminal emulater that is written in C and handles the shell, meaning that Emacs is just a wrapper handling formatting of its output. It's normally a lot faster than the normal term mode

You can find the documentation here: [[https://github.com/akermu/emacs-libvterm]]

#+begin_src emacs-lisp
  (use-package vterm
    :commands vterm
    :config
    ;; uncomment this line if you want to use zsh
    ;; (setq vterm-shell "zsh")
    ;; set maximum lines of output to be stored in RAM
    (setq vterm-max-scrollback 10000)
    ;; Adjust vterm window management
    (add-to-list 'display-buffer-alist
  			   '("\\*vterm\\*" display-buffer-reuse-mode-window
  				 ;; change to `t' to not reuse same window
  				 (inhibit-same-window . nil)
  				 (mode vterm-mode vterm-copy-mode))))

#+end_src
*** Vterm-Toggle

[[https://github.com/jixiuf/vterm-toggle][vterm-toggle]] toggles between the ~vterm buffer~ and whatever buffer you are editing.
#+begin_src emacs-lisp
  (use-package vterm-toggle
    :after vterm
    :config
    ;; When running programs in Vterm and in 'normal' mode, make sure that ESC
    ;; kills the program as it would in most standard terminal programs.
    (evil-define-key 'normal vterm-mode-map (kbd "<escape>") 'vterm--self-insert)
    (setq vterm-toggle-fullscreen-p nil)
    (setq vterm-toggle-scope 'project)
    (add-to-list 'display-buffer-alist
                 '((lambda (buffer-or-name _)
                     (let ((buffer (get-buffer buffer-or-name)))
                       (with-current-buffer buffer
                         (or (equal major-mode 'vterm-mode)
                             (string-prefix-p vterm-buffer-name (buffer-name buffer))))))
                   (display-buffer-reuse-window display-buffer-at-bottom)
                   ;;(display-buffer-reuse-window display-buffer-in-direction)
                   ;;display-buffer-in-direction/direction/dedicated is added in emacs27
                   ;;(direction . bottom)
                   ;;(dedicated . t) ;dedicated is supported in emacs27
                   (reusable-frames . visible)
                   (window-height . 0.4))))

#+end_src
** Eshell
:PROPERTIES:
:header-args:emacs-lisp: :tangle ../C01_EmacsConfiguration/.emacs.d/package_configs/eshell_config.el :mkdirp yes
:END:

~Eshell~ is a variation of the normal "shell" mode and is a lot more customizable.
Looking at current developement, it might also be a lot more relevant in the future, as a "emacs-friendly" alternative to "vterm"

#+begin_src emacs-lisp

  ;; adds git related prompt elements to eshell
  (use-package eshell-git-prompt)

  (use-package eshell
    :config
    ;; Set the prompt theme to powerline
    (eshell-git-prompt-use-theme 'powerline))

#+end_src

For documentation on *eshell-git-prompt* look here: [[https://github.com/xuchunyang/eshell-git-prompt]]

* Org Mode
:PROPERTIES:
:header-args:emacs-lisp: :tangle ../C01_EmacsConfiguration/.emacs.d/package_configs/org_config.el :mkdirp yes
:END:
[[id:8510330a-9746-4684-ba60-04255df37924][Org Mode]] is one of *THE* killer-features of [[id:3cf0fa83-18b3-4206-a109-f4606a94b8c1][Emacs]].  It is a rich document editor, project planner, task and time tracker, blogging engine, and literate coding utility all wrapped up in one package.
** Org Font Faces

The =pet/org-font-setup= function configures various text faces to tweak the sizes of headings and use variable width fonts in most cases so that it looks more like we're editing a document in =org-mode=.  We switch back to fixed width (monospace) fonts for code blocks and tables so that they display correctly.
#+begin_src emacs-lisp
  ;; Helper Functions for Org
  (defun pet/org-font-setup ()
	;; Set faces for heading levels
	(dolist (face '((org-level-1 . 1.2)
			(org-level-2 . 1.15)
			(org-level-3 . 1.1)
			(org-level-4 . 1.05)
			(org-level-5 . 1.02)
			(org-level-6 . 1.0)
			(org-level-7 . 1.0)
			(org-level-8 . 1.0)))
	  (set-face-attribute
	   (car face)
	   nil
	   :font "Cantarell"
	   :weight 'regular
	   :height (cdr face)))

	;; Ensure that anything that should be
	;; fixed-pitch in Org files appears that way
	(set-face-attribute 'org-block nil
			:foreground nil
			:inherit 'fixed-pitch)
	(set-face-attribute 'org-code nil
			:inherit '(shadow fixed-pitch))
	(set-face-attribute 'org-table nil
			:inherit '(shadow fixed-pitch))
	(set-face-attribute 'org-verbatim nil
			:inherit '(shadow fixed-pitch))
	(set-face-attribute 'org-special-keyword nil
			:inherit '(font-lock-comment-face
				   fixed-pitch))
	(set-face-attribute 'org-meta-line nil
			:inherit '(font-lock-comment-face fixed-pitch))
	(set-face-attribute 'org-checkbox nil
			:inherit 'fixed-pitch))

  ;; Replace list hyphen with dot
  (defun pet/org-replace-hyphen ()
	(font-lock-add-keywords
	 'org-mode '(("^ *\\([-]\\) "
		  (0 (prog1 () (compose-region
				(match-beginning 1)
				(match-end 1) "•"))))))
	)

  ;; Helper Function to quickly toggle Babel Confirm Evaluation
  (defun pet/org-toggle-babel-confirm-evaluate ()
  (interactive)
  "Toogle org-babel-confirm-evaluate on/ff"
  (if org-confirm-babel-evaluate
	  (setq org-confirm-babel-evaluate nil)
	(setq org-confirm-babel-evaluate t))
  (print (concat "Org Babel Confirm State: "
		 (format "%s" org-confirm-babel-evaluate))))

#+end_src
** Org Plus Contrib
:NOTE:
The ~Package~ is listed as =org-plus-contrib=
:END:
#+begin_src emacs-lisp
   ;; Add Org Contrib Packages
   (use-package org-contrib)

#+end_src
** Vanilla Org Config
*** Load Plain Org
#+begin_src emacs-lisp
  ;; Setting Up Org Mode
  (use-package org
  :ensure org-plus-contrib
  :straight nil
  :bind (("C-c l" . org-store-link))
  :hook (org-mode . org-indent-mode)
  :custom
  (org-cite-export-processors
   '((md . (csl "chicago-fullnote-bibliography.csl"))   ; Footnote reliant
     (latex . biblatex)                                 ; For humanities
     (odt . (csl "chicago-fullnote-bibliography.csl"))  ; Footnote reliant
     (t . (csl "modern-language-association.csl"))      ; Fallback
     ))
  ;; Add Citation Directory
  (org-cite-csl-styles-dir
   (concat pet/temp-dir "X6_Citation_Styles/"))
  :custom-face
  ;; Have citation link faces look closer to as they were for `org-ref'
  (org-cite ((t (:foreground "DarkSeaGreen4"))))
  (org-cite-key ((t (:foreground "forest green" :slant italic))))
  )

#+end_src
*** Load Org Modules
#+begin_src emacs-lisp
  ;; Add additional Export Options
  (require 'ox-beamer)       ;; LaTeX beamer
  (require 'ox-koma-letter)  ;; LaTeX KOMA Script
  (require 'ox-md)           ;; Markdown
  (require 'ox-texinfo)      ;; Texinfo
  (require 'ox-man)          ;; Man Page
  (require 'ox-org)          ;; Org Format

  ;; Add additional Babel Support
  (require 'ob-ledger)       ;; Ledger

  ;; Add additional Citation Support
  (require 'oc-basic)        ;; Basic
  (require 'oc-bibtex)       ;; Bibtex
  (require 'oc-biblatex)     ;; Biblatex
  (require 'oc-csl)          ;; CSL

#+end_src
*** General Org Settings
#+begin_src emacs-lisp
  (setq org-ellipsis " ▾")

  ;; Default directory for Org Files for Captures and Agenda
  (setq org-directory pet/org-dir)

  ;; Set Org Clock Sound File
  (setq org-clock-sound (concat pet/org-dir "sounds/Erfolg.wav"))
  ;; (setq org-clock-sound t)

  ;; Startup with inline images displayed
  (setq org-startup-with-inline-images t)

  ;; Enable helper function replacing hyphen
  (pet/org-replace-hyphen)

  ;; The default here is 999, which is a little to constricting for SQL and such
  (setq org-table-convert-region-max-lines 9999)

  ;; The following prevents <> from auto-pairing when electric-pair-mode is on.
  ;; Otherwise, org-tempo is broken when you try to <s TAB...
  (add-hook 'org-mode-hook
            (lambda ()
              (setq-local electric-pair-inhibit-predicate
                          `(lambda (c)
                             (if (char-equal c ?<) t (,electric-pair-inhibit-predicate c))))))

  ;; ;; Set src block automatic indent to 0 instead of 2.
  ;; (setq org-edit-src-content-indentation 0)

#+end_src
*** Org Agenda Settings

:NOTE:
This section was heavily inspired by [[https://codeberg.org/librephoenix/nixos-config/][LibrePhoenix]]
:END:
#+begin_src emacs-lisp
  ;; Sane org agenda settings
  (setq org-agenda-span 1            ;; Number of days in overview (default is 10)
  	  org-agenda-start-date "+0d"  ;; Only display from current day
  	  org-agenda-skip-deadline-if-done t
  	  org-agenda-skip-scheduled-if-done t
  	  org-agenda-skip-scheduled-if-deadline-is-shown t
  	  org-agenda-skip-timestamp-if-deadline-is-shown t)

  ;; Removes the lines and grids in the org agenda
  ;;(setq org-agenda-current-time-string "")
  ;;(setq org-agenda-time-grid '((daily) () "" ""))

  ;; Specify Agenda Files
  (setq org-agenda-files
  	  ;;(cons (concat pet/org-dir "journal")
  	  ;; Add Files a starting with "personal-"
  	  (directory-files pet/org-dir t
  					   "personal-\\(tasks\\|mail\\|chores\\|contracts\\)-?[A-Za-z]*.org")
  	  ;;)
  	  )

  ;; This line will remove all tags from the agenda view
  ;;(setq org-agenda-hide-tags-regexp ".*")

  ;; change prefix string in agenda
  (setq org-agenda-prefix-format
  	'((agenda . "  %?-2i %t ")
  	  (todo . " %i %-12:c")
  	  (tags . " %i %-12:c")
  	  (search . " %i %-12:c")))

  (setq org-agenda-start-with-log-mode t)

  ;; Use custom hook to center agenda view
  (add-hook 'org-agenda-mode-hook 'pet/org-agenda-open-hook)

  ;; Set icons for specified categories
  (setq org-agenda-category-icon-alist
  	  `(("Studies" ,(list (all-the-icons-faicon "graduation-cap" :height 0.8)) nil nil :ascent center)
  		("Family" ,(list (all-the-icons-faicon "home" :v-adjust 0.005)) nil nil :ascent center)
  		("Medical" ,(list (all-the-icons-faicon "medkit" :v-adjust 0.005)) nil nil :ascent center)
  		("Personal" ,(list (all-the-icons-material "person" :height 0.9)) nil nil :ascent center)))

#+end_src
*** Org Todo Settings
#+begin_src emacs-lisp
  ;; Use Drawer to store Information aboutTodo State Changes
  (setq org-log-done 'time)
  (setq org-log-into-drawer t)

  ;; Add Custom TODO Keywords - in 2 seperate Sequences
  (setq org-todo-keywords
        ;; Sequence 1
        '((sequence "TODO(t)" "NEXT(n)" "|" "DONE(d!)")
    	    ;; Sequence 2
    	    (sequence "MEET(m)")
    	    ;; Sequence 3
    	    (sequence "BACKLOG(b)" "PLAN(p)" "READY(r)"
    		          "ACTIVE(a)" "REVIEW(v)" "WAIT(w@/!)"
    		          "HOLD(h)" "|" "COMPLETED(c)" "CANC(k@)")))

#+end_src
*** Org File Apps
#+begin_src emacs-lisp
  ;; Customize Apps for Filelinks
  (cl-loop for type in
  		 '(;; Open PDFs with Zathura
  		   ;; ("\\.pdf\\'" . "zathura %s") ;
  		   ;; Open PDFs with PDF Tools
  		   ("\\.pdf\\'" . "pdf-tools %s")
  		   ;; Open Pictures with sxiv
  		   ("\\.png\\'" . "sxiv %s")
  		   ("\\.jpg\\'" . "sxiv %s")
  		   ("\\.jpeg\\'" . "sxiv %s")
  		   ("\\.svg\\'" . "sxiv %s")
  		   ;; Open Youtube links with freetube
  		   ("\\.\\*youtu\\.\\*" . "freetube %s"))
  		 do
  		 (add-to-list 'org-file-apps type))

#+end_src
*** Org Tag List
#+begin_src emacs-lisp
  ;; Set Keywords with shortcuts
  (setq org-tag-alist
    '((:startgroup)
  	;; Put mutually exclusive tags here
  	(:endgroup)
  	("@errand" . ?E)
  	("@home" . ?H)
  	("@work" . ?W)
  	("@study" . ?S)
  	("agenda" . ?a)
  	("planning" . ?p)
  	("publish" . ?P)
  	("batch" . ?b)
  	("note" . ?n)
  	("idea" . ?i)))

#+end_src
*** Org Refile Targets
#+begin_src emacs-lisp
  ;; Set Refile Targets to be considered, Emphasis on Archive
  (setq org-refile-targets
    '((nil :maxlevel . 9)
  	("~/Org/personal-archive.org" :maxlevel . 1)
  	("~/Org/personal-tasks.org" :maxlevel . 1)
  	("~/Org/personal-sources.org" :maxlevel . 1)
  	("~/Backup/Web-Bookmarks/1-bookmarks-import.org" :maxlevel . 9)
  	("~/Backup/Web-Bookmarks/2-bookmarks-export.org" :maxlevel . 9)))

  ;; Allow Creation of Parent nodes but ask for confirmation
  (setq org-refile-allow-creating-parent-nodes 'confirm)

  ;; Save Org buffers after refiling!
  (advice-add 'org-refile :after 'org-save-all-org-buffers)

#+end_src
*** Org Leader Keys
#+begin_src emacs-lisp
  (pet/leader-keys
    "ot" '(:ignore t :which-key "Toggle")
    "otb" '(pet/org-toggle-babel-confirm-evaluate
  	  :which-key "Babel Confirm Evaluation")
    "otc" '(org-cdlatex-mode
  	  :which-key "Org CDLaTeX Minor Mode")
    "oti" '(org-toggle-inline-images
  	  :which-key "Inline Images")
    "otp" '(org-toggle-pretty-entities
  	  :which-key "Pretty entities")
    "oi" '(:ignore t :which-key "Import")
    "oit" '(org-table-import
  	  :which-key "Table")
    "oa"  '(org-agenda :which-key "Org Agenda"))

#+end_src
** Org Mode LaTeX Tweaks
*** Org LaTeX Settings
#+begin_src emacs-lisp
  ;; Setup inline previewing of latex fragments
  (setq org-latex-create-formula-image-program
    'imagemagick)

  ;; Set Latex PDF Export Process
  (setq org-latex-pdf-process
  	  (list
  	   "latexmk -shell-escape -bibtex -f -pdf -%latex -interaction=nonstopmode -output-directory=%o %f"
  	   "latexmk -f -pdf -%latex -interaction=nonstopmode -output-directory=%o %f"))

  ;; Add global Bibliography Source
  (setq org-cite-global-bibliography
  	  (list
  	   pet/main-bib))

  ;; Bigger LaTeX Previews
  (plist-put org-format-latex-options :scale 1.5)

  ;; Load language packages for pdflatex of lualatex / xelatex compilers
  (add-to-list 'org-latex-packages-alist
    			 ;; Language Support
    			 '("AUTO" "babel" t ("pdflatex" "xelatex" "lualatex")))
  (add-to-list 'org-latex-packages-alist
    			 ;; Language Support
    			 '("AUTO" "polyglossia" t ("xelatex" "lualatex")))
  (add-to-list 'org-latex-packages-alist
    			 ;; For Modern Fonts, Vektorschrift
    			 '("" "lmodern" t ("pdflatex" "xelatex" "lualatex")))
  (add-to-list 'org-latex-packages-alist
    			 ;; Tabellen mit variabler Breite
    			 '("" "tabularx" t ("pdflatex" "xelatex" "lualatex")))
  (add-to-list 'org-latex-packages-alist
    			 ;; Source Code Lists
    			 '("" "listings" t ("pdflatex" "xelatex" "lualatex")))
  (add-to-list 'org-latex-packages-alist
    			 ;; Support for more file names for graphics package
    			 '("" "grffile" t ("pdflatex" "xelatex" "lualatex")))
  (add-to-list 'org-latex-packages-alist
    			 ;; Mathematical Enhancer
    			 '("" "amsmath" t ("pdflatex" "xelatex" "lualatex")))
  (add-to-list 'org-latex-packages-alist
    			 ;; Mathematical Enhancer
    			 '("" "amsthm" t ("pdflatex" "xelatex" "lualatex")))
  (add-to-list 'org-latex-packages-alist
    			 ;; Mathematical Enhancer
    			 '("" "amssymb" t ("pdflatex" "xelatex" "lualatex")))
  (add-to-list 'org-latex-packages-alist
    			 ;; Allows adjusting of counter in enumerate environment
    			 '("" "enumerate" t ("pdflatex" "xelatex" "lualatex")))
  (add-to-list 'org-latex-packages-alist
    			 ;; For Modern Fonts, Vektorschrift
    			 '("" "lmodern" t ("pdflatex" "xelatex" "lualatex")))
  (add-to-list 'org-latex-packages-alist
    			 ;; Fix typessetting in amsmath, extend amsmath
    			 '("fixamsmath, dissallowspace" "mathtools" t
    			   ("pdflatex" "xelatex" "lualatex")))
  (add-to-list 'org-latex-packages-alist
    			 ;; More Symbols
    			 '("" "marvosym" t ("pdflatex" "xelatex" "lualatex")))
  (add-to-list 'org-latex-packages-alist
    			 ;; Even More Math Symbols
    			 '("" "esint" t ("pdflatex" "xelatex" "lualatex")))
  (add-to-list 'org-latex-packages-alist
    			 ;; Color Support and Adjustment functionality
    			 '("" "color" t ("pdflatex" "xelatex" "lualatex")))
  (add-to-list 'org-latex-packages-alist
    			 ;; Adds more color variations, more options for color specification
    			 '("svgnames, dvipsnames" "xcolor" t ("pdflatex" "xelatex" "lualatex")))

#+end_src
*** Org LaTeX Export Classes
**** Basic Classes
#+begin_src emacs-lisp
  ;; Org LaTeX Setup
  (eval-after-load 'ox-latex
  '(progn
     ;; Plain Article Class
     (add-to-list 'org-latex-classes
  				'("plain-article"
  				  "\\documentclass{article}
  			[NO-DEFAULT-PACKAGES]
  			[PACKAGES]
  			[EXTRA]"
  				  ("\\section{%s}" . "\\section*{%s}")
  				  ("\\subsection{%s}" . "\\subsection*{%s}")
  				  ("\\subsubsection{%s}" . "\\subsubsection*{%s}")
  				  ("\\paragraph{%s}" . "\\paragraph*{%s}")
  				  ("\\subparagraph{%s}" . "\\subparagraph*{%s}")))

     ;; CV Class
     (add-to-list 'org-latex-classes
  				'("moderncv"
  				  "\\documentclass[11pt,
  				  a4paper,
  				  sans,
  				  ]{moderncv}
  		   [NO-DEFAULT-PACKAGES]
  		   [NO-PACKAGES]
  		   [EXTRA]"
  				  ("\\section{%s}" . "\\section*{%s}")
  				  ("\\subsection{%s}" . "\\subsection*{%s}")
  				  ("\\subsubsection{%s}" . "\\subsubsection*{%s}")
  				  ("\\paragraph{%s}" . "\\paragraph*{%s}")
  				  ("\\subparagraph{%s}" . "\\subparagraph*{%s}")))))

#+end_src
**** Koma Classes
#+begin_src emacs-lisp
  ;; Org LaTeX Setup
  (eval-after-load 'ox-latex
  '(progn
     ;; Add Koma Article
     (add-to-list 'org-latex-classes
  				'("scrartcl"
  				  "\\documentclass[a4paper,
  			parskip=half,%
  			fromalign=right,
  			fromrule=false,
  			11pt
  			]{scrartcl}
  	   [DEFAULT-PACKAGES]
  	   [PACKAGES]
  	   [EXTRA]"
  				  ("\\section{%s}" . "\\section*{%s}")
  				  ("\\subsection{%s}" . "\\subsection*{%s}")
  				  ("\\subsubsection{%s}" . "\\subsubsection*{%s}")
  				  ("\\paragraph{%s}" . "\\paragraph*{%s}")
  				  ("\\subparagraph{%s}" . "\\subparagraph*{%s}")))
     ;; Alternative Koma Article Name
     (add-to-list 'org-latex-classes
  				'("koma-article"
  				  "\\documentclass[a4paper,
  			parskip=half,%
  			fromalign=right,
  			fromrule=false,
  			11pt
  			]{scrartcl}
  	   [DEFAULT-PACKAGES]
  	   [NO-PACKAGES]
  	   [EXTRA]"
  				  ("\\section{%s}" . "\\section*{%s}")
  				  ("\\subsection{%s}" . "\\subsection*{%s}")
  				  ("\\subsubsection{%s}" . "\\subsubsection*{%s}")
  				  ("\\paragraph{%s}" . "\\paragraph*{%s}")
  				  ("\\subparagraph{%s}" . "\\subparagraph*{%s}")))

     ;; Add Koma Report
     (add-to-list 'org-latex-classes
  				'("scrreprt"
  				  "\\documentclass[a4paper,
  			parskip=half,%
  			fromalign=right,
  			fromrule=false,
  			11pt
  			]{scrreprt}
  	   [DEFAULT-PACKAGES]
  	   [PACKAGES]
  	   [EXTRA]"
  				  ("\\part{%s}" . "\\part*{%s}")
  				  ("\\chapter{%s}" . "\\chapter*{%s}")
  				  ("\\section{%s}" . "\\section*{%s}")
  				  ("\\subsection{%s}" . "\\subsection*{%s}")
  				  ("\\subsubsection{%s}" . "\\subsubsection*{%s}")
  				  ("\\paragraph{%s}" . "\\paragraph*{%s}")
  				  ("\\subparagraph{%s}" . "\\subparagraph*{%s}")))
     ;; Alternative Koma Report name
     (add-to-list 'org-latex-classes
  				'("koma-report"
  				  "\\documentclass[a4paper,
  			parskip=half,%
  			fromalign=right,
  			fromrule=false,
  			11pt
  			]{scrreprt}
  	   [DEFAULT-PACKAGES]
  	   [NO-PACKAGES]
  	   [EXTRA]"
  				  ("\\part{%s}" . "\\part*{%s}")
  				  ("\\chapter{%s}" . "\\chapter*{%s}")
  				  ("\\section{%s}" . "\\section*{%s}")
  				  ("\\subsection{%s}" . "\\subsection*{%s}")
  				  ("\\subsubsection{%s}" . "\\subsubsection*{%s}")
  				  ("\\paragraph{%s}" . "\\paragraph*{%s}")
  				  ("\\subparagraph{%s}" . "\\subparagraph*{%s}")))
     ;; Alternative Koma Report Structure
     (add-to-list 'org-latex-classes
  				'("koma-report-shortened"
  				  "\\documentclass[a4paper,
  			parskip=half,%
  			fromalign=right,
  			fromrule=false,
  			11pt
  			]{scrreprt}
  	   [DEFAULT-PACKAGES]
  	   [NO-PACKAGES]
  	   [EXTRA]"
  				  ("\\chapter{%s}" . "\\chapter*{%s}")
  				  ("\\section{%s}" . "\\section*{%s}")
  				  ("\\subsection{%s}" . "\\subsection*{%s}")
  				  ("\\subsubsection{%s}" . "\\subsubsection*{%s}")
  				  ("\\paragraph{%s}" . "\\paragraph*{%s}")
  				  ("\\subparagraph{%s}" . "\\subparagraph*{%s}")))


     ;; Add Koma Book
     (add-to-list 'org-latex-classes
  				'("scrbook"
  				  "\\documentclass[a4paper,
  			parskip=half,%
  			fromalign=right,
  			fromrule=false,
  			11pt
  			]{scrbook}
  	   [DEFAULT-PACKAGES]
  	   [PACKAGES]
  	   [EXTRA]"
  				  ("\\part{%s}" . "\\part*{%s}")
  				  ("\\chapter{%s}" . "\\chapter*{%s}")
  				  ("\\section{%s}" . "\\section*{%s}")
  				  ("\\subsection{%s}" . "\\subsection*{%s}")
  				  ("\\subsubsection{%s}" . "\\subsubsection*{%s}")
  				  ("\\paragraph{%s}" . "\\paragraph*{%s}")
  				  ("\\subparagraph{%s}" . "\\subparagraph*{%s}")))
     ;; Alternative Koma Book name
     (add-to-list 'org-latex-classes
  				'("koma-book"
  				  "\\documentclass[a4paper,
  			parskip=half,%
  			fromalign=right,
  			fromrule=false,
  			11pt
  			]{scrbook}
  	   [DEFAULT-PACKAGES]
  	   [NO-PACKAGES]
  	   [EXTRA]"
  				  ("\\part{%s}" . "\\part*{%s}")
  				  ("\\chapter{%s}" . "\\chapter*{%s}")
  				  ("\\section{%s}" . "\\section*{%s}")
  				  ("\\subsection{%s}" . "\\subsection*{%s}")
  				  ("\\subsubsection{%s}" . "\\subsubsection*{%s}")
  				  ("\\paragraph{%s}" . "\\paragraph*{%s}")
  				  ("\\subparagraph{%s}" . "\\subparagraph*{%s}")))))

#+end_src
**** Koma Letter
#+begin_src emacs-lisp
  ;; Koma Letter Export Classes
  (eval-after-load 'ox-koma-letter
    '(progn
       (add-to-list 'org-latex-classes
    				'("scrlttr2"
    				  "\\documentclass\{scrlttr2\}
     \[DEFAULT-PACKAGES]
     \[PACKAGES]
     \[EXTRA]"))
       (add-to-list 'org-latex-classes
    				'("scrlttr2-german"
    				  "\\documentclass[a4paper,
    			parskip=half,%
    			fromalign=right,
    			fromrule=false,
    			11pt,
    			ngerman]{scrlttr2}
    	   [NO-DEFAULT-PACKAGES]
    	   [PACKAGES]
    	   [EXTRA]"
    				  ("\\section{%s}" . "\\section*{%s}")
    				  ("\\subsection{%s}" . "\\subsection*{%s}")
    				  ("\\subsubsection{%s}" . "\\subsubsection*{%s}")
    				  ("\\paragraph{%s}" . "\\paragraph*{%s}")
    				  ("\\subparagraph{%s}" . "\\subparagraph*{%s}")))
       (add-to-list 'org-latex-classes
    				'("koma-letter"
    				  "\\documentclass[a4paper,
    			parskip=half,
    			fromalign=right,
    			fromrule=true,
    			11pt,
    			ngerman
    			]{scrlttr2}
    	   [NO-DEFAULT-PACKAGES]
    	   [PACKAGES]
    	   [EXTRA]"
    				  ("\\section{%s}" . "\\section*{%s}")
    				  ("\\subsection{%s}" . "\\subsection*{%s}")
    				  ("\\subsubsection{%s}" . "\\subsubsection*{%s}")
    				  ("\\paragraph{%s}" . "\\paragraph*{%s}")
    				  ("\\subparagraph{%s}" . "\\subparagraph*{%s}")))

       ;; Set Default Letter Class
       (setq org-koma-letter-default-class "scrlttr2")
       ;; Use Backaddress by default
       (setq org-koma-letter-use-backaddress t)))

#+end_src
** Org Babel Languages
*** Additional Org Babel Language Support
**** Org Babel Rust
Load [[https://github.com/micanzhang/ob-rust/tree/be059d231fafeb24a658db212a55ccdc55c0c500][GitHub.com: MicanzHang - ob-rust]]
:NOTE:
This Package currently requires =rust-script= to be installed.
To add it run (asuming =rust= or =rustup= are installed):
#+begin_src shell
  cargo install rust-script
#+end_src
:END:
#+begin_src emacs-lisp
  ;; Load Rust Support for Org Mode
  (use-package ob-rust)

#+end_src
**** Org Babel Nix
Load [[https://codeberg.org/theesm/ob-nix][CodeBerg.org: Theesm - ob-nix]]
#+begin_src emacs-lisp
  ;; Load Nix Support for Org Mode
  (use-package ob-nix)

#+end_src
**** Use Ipython with Org
The package [[https://github.com/gregsexton/ob-ipython][ob-ipython]] is require get [[id:5fe7783f-d441-40a9-983c-7f671966c6e1][ipython]]-like functionality in [[id:8510330a-9746-4684-ba60-04255df37924][Org Mode]] WIP

#+begin_src emacs-lisp :tangle no
  ;; (use-package ob-ipython)

#+end_src
*** Org Babel Language Configuration
To execute or export code in =org-mode= code blocks, you'll need to set up =org-babel-load-languages= for each language you'd like to use. [[file:~/Projects/InfoFiles/Emacs/Worg/org-contrib/babel/languages/index.org][Org Babel Supported Languages]] documents all of the languages that you can use with =org-babel=.

#+begin_src emacs-lisp
  ;; (require 'ob-ledger)
  ;; (require-package 'ob-ipython)

  ;; enable/disable languages for org-babel
  (org-babel-do-load-languages
    'org-babel-load-languages
    '((emacs-lisp . t)    ;; Elisp
      (lisp . t)          ;; Lisp
      (clojure . t)       ;; Clojure
      (scheme . t)        ;; Scheme
      (python . t)        ;; Python
      ;; (ipython . t)       ;; IPython

      ;;  the following two require ob-c
      (C . t)             ;; C

      (perl . t)          ;; Perl
      ;; (php . t)           ;; PHP
      (R . t)             ;; R
      ;; (Ruby . t)          ;; Ruby
      (rust . t)          ;; Rust
      (julia . t)         ;; Julia Programmin Language
      (lua . t)           ;; Lua Programming Language
      (shell . t)         ;; Command Line Programs
      (latex . t)         ;; LaTeX
      (nix . t)           ;; Nix
      (sql . t)           ;; SQL
      (sqlite . t)        ;; SQLite
      (octave . t)        ;; Octave
      (makefile . t)          ;; GNU Make
      (gnuplot . t)       ;; Gnuplot
      (awk . t)           ;; awk
      (sed . t)           ;; GNUsed
      (css . t)           ;; CSS
      (plantuml . t)      ;; PlantUML
      (ledger . t)        ;; Ledger CLI
      ))

  ;; Add conf-unix to be recognized
  (push '("conf-unix" . conf-unix) org-src-lang-modes)

#+end_src
** Structure Templates

[[id:8510330a-9746-4684-ba60-04255df37924][Org Mode]]’s =structure templates= feature enables you to quickly insert code blocks into your Org files in combination with =org-tempo= by typing =<= followed by the template name like el or py and then press TAB. For example, to insert an empty ~emacs-lisp~ block below, you can type =<se= and press TAB to expand into such a block.

The second part to the [[id:59b9aa51-d637-43f5-b4c6-645bc7be0bc9][cons cell]] to contain the *name* of the ~language~ as it is known by [[https://orgmode.org/worg/org-contrib/babel/languages/index.html][Org Babel]]. (see =org-src-lang-modes=)

~Org-tempo~ is not a separate package but a module within ~org-mode~ that can be enabled.
~Org-tempo~ allows for =‘<s’= followed by =TAB= to expand to a =begin_src=-~tag~.

+ Other ~expansions~ available include (Typing the below + =TAB=):

|-------+-----------------------------------------|
| Short | Expands to …                            |
|-------+-----------------------------------------|
| <a    | ’#+BEGIN_EXPORT ascii’ … ‘#+END_EXPORT  |
| <c    | ’#+BEGIN_CENTER’ … ‘#+END_CENTER’       |
| <C    | ’#+BEGIN_COMMENT’ … ‘#+END_COMMENT’     |
| <e    | ’#+BEGIN_EXAMPLE’ … ‘#+END_EXAMPLE’     |
| <E    | ’#+BEGIN_EXPORT’ … ‘#+END_EXPORT’       |
| <h    | ’#+BEGIN_EXPORT html’ … ‘#+END_EXPORT’  |
| <l    | ’#+BEGIN_EXPORT latex’ … ‘#+END_EXPORT’ |
| <q    | ’#+BEGIN_QUOTE’ … ‘#+END_QUOTE’         |
| <s    | ’#+BEGIN_SRC’ … ‘#+END_SRC’             |
| <v    | ’#+BEGIN_VERSE’ … ‘#+END_VERSE’         |
|-------+-----------------------------------------|

#+begin_src emacs-lisp
  ;; Load Org-Tempo Module (needed as of Org 9.2)
  (require 'org-tempo)

  ;; Setup Source Block Templates
  (cl-loop for block in
		   '(;; AWK
			 ("aw"   . "src awk")
			 ;; C and Cpp
			 ("cs"   . "src C")
			 ("cp"   . "src C++")
			 ;; Emacs-Lisp
			 ("el"   . "src emacs-lisp")
			 ;; JSON
			 ("json" . "src json")
			 ;; Lua
			 ("lua"  . "src lua")
			 ;; Ledger
			 ("ldg"  . "src ledger :noweb yes")
			 ;; LaTeX
			 ("ltx"   . "src latex")
			 ;; Nix
			 ("nix"   . "src nix")
			 ;; Makefile
			 ("mf"   . "src makefile")
			 ;; Octave
			 ("oc"   . "src octave")
			 ;; Perl
			 ("perl" . "src perl")
			 ;; PHP
			 ("ph"   . "src php")
			 ;; Python
			 ("py"   . "src python")
			 ;; Scheme
			 ("sc"   . "src scheme")
			 ;; Shell
			 ("sh"   . "src shell")
			 ;; SQL
			 ("sql"   . "src sql")
			 ;; YAML
			 ("yaml" . "src yaml")
			 ;; R
			 ("rp"   . "src R")                                  ;; pure R
			 ("rr"   . "src R :results both output")             ;; R with output
			 ("rs"   . "src R :session :results both output")    ;; R with output
			 ;; Rust
			 ("ru"   . "src rust ")    ;; pure rust

			 ;; ("go" . "src go")
			 ;; ("ip" . "src ipython :session :async :exports both :results raw drawer")
			 ;; ("ts" . "src typescript"))
			 ;; This is an alternative Block
			 ;; For IPython
			 ;; ("si" . "src ipython :session :async :results output")
			 )
		   do
		   (add-to-list
			'org-structure-template-alist block))

#+end_src
** Capture Templates

=Capture templates= are a handy tool in the org mode toolbox, however the syntax for setting them up can sometimes be tricky.
The package =DOCT= tries to ease the setup. If you need more input, here's the [[https://github.com/progfolio/doct][doc]]
Other than that, the *documentation* for =capture templates= is [[https://orgmode.org/manual/Capture.html#Capture][here]]
#+begin_src emacs-lisp
  ;; Org-Capture
  (use-package org-capture
    :straight nil
    :init

    ;; Org Capture helper Variables

    ;; Save default Org Capture Template Dir
    (setq pet/org-cap-temp-dir
          (concat pet/temp-dir
                  (convert-standard-filename
                   "X1_Emacs_Templates/Org_Capture_Templates/"
                   )))

    ;; Org Capture helper Function

    ;; Get filename and store at current directory
    (defun pet/get-file-name-without-extension ()
      "Ask user for filename"
      (interactive)
      (let ((name (read-string "Filename: ")))
        (expand-file-name name))
      )
    ;; Get filename with ".org" and store at current directory
    (defun pet/get-org-file-name ()
      "Ask user for filename"
      (interactive)
      (let ((name (read-string "Filename: ")))
        (expand-file-name
         (format "%s.org" name)))
      )

    :config
    ;; Set default file for capture if not specified
    (setq org-default-notes-file
          (concat pet/home-dir "Projects/Notes/notes.org"))

    (setq org-capture-templates
          ;; Acronym captures
          `(("a" "Acronyms" table-line
             (file+headline "~/Org/acronyms.org" "Inbox")
             "| %^{ACRONYM} | %^{DEFINITION} | %^{DESCRIPTION}|")

            ;; Documents
            ("d" "Documents")
            ("dl" "Letter")
            ("dlf" "Letter Form" plain (file pet/get-org-file-name)
             "%[~/.dotfiles/00_OrgFiles/Templates/Capture-LetterTemp.org]"
             :if-new (file "${slug}.org" "#+TITLE: ${title}\n")
             :unnarrowed t
             )
            ("dlh" "Letter Home" plain (file pet/get-org-file-name)
             "%[~/Templates/X1_Emacs_Templates/Capture-LetterTemp-Filled-Home-Real.org]"
             :if-new (file "${slug}.org" "#+TITLE: ${title}\n")
             :unnarrowed t
             )
            ("do" "Org File")
            ("dod" "Default Org File"
             plain
             (file pet/get-org-writing-file-name)
             "#+TITLE: ${title}\n%[~/Templates/X1_Emacs_Templates/Org_Capture_Templates/default-org-file.orgctemp]"
             :unnarrowed t
             )


            ;; Email captures
            ("e" "Email")
            ("em" "Make email note" entry
             (file+headline "~/Org/personal-tasks.org" "Mail correspondence")
             ,(concat "* TODO [#A] %:subject :mail:\n"
                      "SCHEDULED: %t\n:"
                      "PROPERTIES:\n:CONTEXT: %a\n:END:\n\n"
                      "%i%?"))
            ("ef" "Follow Up" entry (file+olp "~/Org/personal-mail.org" "Follow Up")
             "* TODO Follow up with %:fromname on %a\nSCHEDULED:%t\nDEADLINE: %(org-insert-time-stamp (org-read-date nil t \"+2d\"))\n\n%i \n\n" :immediate-finish t)
            ("er" "Read Later" entry (file+olp "~/Org/personal-mail.org" "Read Later")
             "* TODO Read %:subject %a\nSCHEDULED:%t\nDEADLINE: %(org-insert-time-stamp (org-read-date nil t \"+2d\"))\n\n%i \n\n" :immediate-finish t)


         ;; Journal captures
            ("j" "Journal Entries")
            ("jj" "Journal" entry
             (file+olp+datetree "~/Org/journal/journal.org")
             "\n* %<%I:%M %p> - Journal :journal:\n\n%?\n\n"
             ;; ,(dw/read-file-as-string "~/Notes/Templates/Daily.org")
             :clock-in :clock-resume
             :empty-lines 1)
            ("jm" "Meeting" entry
             (file+olp+datetree "~/Org/journal/journal.org")
             "* %<%I:%M %p> - %a :meetings:\n\n%?\n\n"
             :clock-in :clock-resume
             :empty-lines 1)

            ;; Checklist captures
            ("l" "Lists")

            ("ls" "Shopping List" checkitem
             (file+olp "~/Org/lists-shopping.org" "Inbox")
             "[ ] %^{Itemname}")

            ("ll" "Literature" checkitem
             (file+olp "~/Org/lists-literature.org" "Inbox")
             "[ ] %^{Author} - %^{Titel}")

            ("lm" "Music" checkitem
             (file+olp "~/Org/lists-music.org" "Inbox")
             "[ ] %^{Interpret} - %^{Title}")

            ("q" "Quotes" entry
             (file+olp "~/Org/quotes.org" "Inbox")
             "* %^{Originator}\n\n#+begin_quote\n%?\n#+end_quote")

            ("t" "Tasks / Projects")
            ("tt" "TODO Task" entry (file+olp
                                     "~/Org/personal-tasks.org" "Inbox")
             "* TODO %?\n  %U\n  %a\n  %i" :empty-lines 1)
            ("tb" "Basic task for future review" entry
             (file+headline "~/Org/personal-tasks.org" "Inbox")
             ,(concat "* %^{Title}\n"
                      ":PROPERTIES:\n"
                      ":CAPTURED: %U\n"
                      ":END:\n\n"
                      "%i%l"))
            ("ts" "Task with a due date (scheduled)" entry
             (file+headline "~/Org/personal-tasks.org" "Inbox")
             ,(concat "* %^{Scope of task||TODO|STUDY|MEET} %^{Title} %^g\n"
                      "SCHEDULED: %^t\n"
                      ":PROPERTIES:\n:CAPTURED: %U\n:END:\n\n"
                      "%i%?"))
            ("td" "Task with a due date (deadline)" entry
             (file+headline "~/Org/personal-tasks.org" "Inbox")
             ,(concat "* %^{Scope of task||TODO|STUDY|MEET} %^{Title} %^g\n"
                      "DEADLINE: %^t\n"
                      ":PROPERTIES:\n:CAPTURED: %U\n:END:\n\n"
                      "%i%?"))

            ("w" "Workflows")
            ("we" "Checking Email" entry (file+olp+datetree "~/Org/journal/Journal.org")
             "* Checking Email :email:\n\n%?" :clock-in :clock-resume :empty-lines 1)))

    ;; Activate Context Templates for Email
    (setq org-capture-templates-contexts
      '(("e" ((in-mode . "notmuch-search-mode")
              (in-mode . "notmuch-show-mode")
              (in-mode . "notmuch-tree-mode")
              (in-mode . "mu4e-headers-mode")))))
    :bind
    ("C-c c" . org-capture))

#+end_src
** Org Extensions
*** Prettier Org Heard Stars
**** Org Bullets
[[https://github.com/sabof/org-bullets][org-bullets]] replaces the heading stars in =org-mode= buffers with nicer looking characters that you can control.
#+begin_src emacs-lisp
  ;; Setup Org Bullets
  (use-package org-bullets
	:after org)
  (add-hook 'org-mode-hook (lambda () (org-bullets-mode 1)))

#+end_src
**** Org Superstar
Another option for header stars is [[https://github.com/integral-dw/org-superstar-mode][org-superstar]]
#+begin_src emacs-lisp :tangle no
  ;; Setup Org Superstar
  (use-package org-superstar
  	:after org
  	(add-hook 'org-mode-hook (lambda () (org-superstar-mode 1))))

#+end_src
*** Org ToC
[[https://github.com/snosov1/toc-org][ToC-Org]] helps you to have an up-to-date ~table of contents~ in ~org files~ without exporting (useful primarily for readme files on GitHub).
#+begin_src emacs-lisp
  ;; Automatically create ToCs
  (use-package toc-org
    :commands toc-org-enable
    :init (add-hook 'org-mode-hook 'toc-org-enable))

#+end_src
*** Org Roam
[[https://www.orgroam.com/][Org Roam]] is a very handy extension that enables you to fulfill your own personal ~Zettelkasten~ in [[id:8510330a-9746-4684-ba60-04255df37924][Org]]

  #+begin_src emacs-lisp
    ;; Org Roam is very handy to create a 'second brain'
    (use-package org-roam
      :init
      (setq org-roam-v2-ack t)
      :custom
      (org-roam-directory pet/org-dir)
      (org-roam-dailies-directory "journal/")

      (org-roam-completion-everywhere t)

      :bind (("C-c n l" . org-roam-buffer-toggle)
         ("C-c n f" . org-roam-node-find)
         ("C-c n i" . org-roam-node-insert)
         ("C-c n I" . org-roam-node-insert-immediate)
         :map org-mode-map
         ("C-M-i"    . completion-at-point)
         :map org-roam-dailies-map
         ("Y" . org-roam-dailies-capture-yesterday)
         ("T" . org-roam-dailies-capture-tomorrow))
      :bind-keymap
      ("C-c n d" . org-roam-dailies-map)
      :config
      ;; org roam capture templates
      (setq org-roam-capture-templates
        `(("d" "default" plain
           "%?"
           :if-new (file+head "%<%Y%m%d%H%M%S>-${slug}.org" "#+TITLE: ${title}\n#+DATE: %U\n")
           :unnarrowed t)
          ("w" "wiki")
          ("wn" "wiki node" plain
           "\n* ${title}\n\n%?"
           :if-new (file+head "%<%Y%m%d%H%M%S>-${slug}.org"
                  "\n#+filetags: :%^{filetag}:\n#+TITLE: ${title}\n#+AUTHOR: %^{author}\n#+DATE: %U\n\n")
           :unnarrowed t)
          ("wi" "wiki index node" plain
           "\n* ${title} Kompendium Index\n\n%?"
           :if-new (file+head "%<%Y%m%d%H%M%S>-${slug}.org"
                      "\n#+filetags: :index:%^{filetag}:\n#+TITLE: ${title}\n#+AUTHOR: %^{author}\n#+DATE: %U\n\n")
           :unnarrowed t)
          ("wr" "wiki references node" plain
           "\n* References\n%?\n** Websites\n\n** Literature"
           :if-new (file+head "%<%Y%m%d%H%M%S>-${slug}.org"
                      "\n#+filetags: :%^{filetag}:references:\n#+TITLE: ${title}\n#+AUTHOR: %^{author}\n#+DATE: %U\n\n")
           :unnarrowed t)
          ("l" "programming language" plain
           "* Characteristics\n\n- Family: %?\n- Inspired by: \n\n* Reference:\n\n"
           :if-new (file+head "${slug}.org" "#+TITLE: ${title}\n")
           :unnarrowed t)
          ("b" "book notes" plain (file "~/.dotfiles/00_OrgFiles/Templates/RoamCapture-BookNoteTemp.org")
           :if-new (file+head "${slug}.org" "#+TITLE: ${title}\n")
           :unnarrowed t)
          ("p" "project" plain "* Goals\n\n%?\n\n* Tasks\n\n** TODO Add initial tasks\n\n* Dates\n\n"
           :if-new (file+head "${slug}.org" "#+TITLE: ${title}\n#+filetags: Project")
           :unnarrowed t)
          ))


       ;; dailies capture template
      (setq org-roam-dailies-capture-templates
        `(("d" "default" entry "* %<%I:%M %p>: %?"
           :if-new (file+head "%<%Y-%m-%d>.org" "#+TITLE: %<%Y-%m-%d>\n"))))

      (org-roam-setup)
      ;; Ensure the keymap is available
      (require 'org-roam-dailies)
      (org-roam-db-autosync-mode)

      (pet/leader-keys
        "or"  '(:ignore t :which-key "Org Roam")
        "ort" 'org-roam-tag-add
        "ora" 'org-roam-alias-add
        "ord" 'org-roam-diagnostics
        "oru" 'org-roam-ui-open
        )
      )

  #+end_src
*** Org Roam Extensions
**** Org Roam Helper Functions
#+begin_src emacs-lisp
  ;; Helper Function to insert org note immediately
  (defun org-roam-node-insert-immediate (arg &rest args)
    (interactive "P")
    (let ((args (push arg args))
      (org-roam-capture-templates
       (list (append (car org-roam-capture-templates)
    		 '(:immediate-finish t)))))
      (apply #'org-roam-node-insert args)))

#+end_src
**** Org Roam UI

[[https://github.com/org-roam/org-roam-ui][Org Roam UI]] is a super neat extension that visualizes your ~Org Roam~ ~Note Node Structure~.
It uses a websocket to display that visualization in a webbrowser.
The webserver started will run here: http://127.0.0.1:35901/
#+begin_src emacs-lisp
  ;; A Visualization of your org roam node structure
  (use-package org-roam-ui
    :straight
    (:host github :repo "org-roam/org-roam-ui"
       :branch "main" :files ("*.el" "out"))
    :after org-roam
    ;;         normally we'd recommend hooking orui after org-roam, but since org-roam does not have
    ;;         a hookable mode anymore, you're advised to pick something yourself
    ;;         if you don't care about startup time, use
    ;;  :hook (after-init . org-roam-ui-mode)
   :config
   (setq org-roam-ui-sync-theme t
    org-roam-ui-follow t
    org-roam-ui-update-on-save t
    org-roam-ui-open-on-start t))

#+end_src
*** Org Super Agenda

[[https://github.com/alphapapa/org-super-agenda][Org-Super-Agenda]] enhances the [[id:8510330a-9746-4684-ba60-04255df37924][Org Agenda View]] quite drastically based on group views and more
#+begin_src emacs-lisp
  ;; Rice up the agenda
  (use-package org-super-agenda
    :config
    ;; Specify the groups displayed in the agenda view
    (setq org-super-agenda-groups
   		'(;; The groups have an implicit boolean OR separator between their selectors
  		  (:name "❗ Overdue "  ;
  				 :scheduled past
  				 :order 2
  				 :face 'error)

  		  (:name "Personal "
  				 :and(:file-path "Personal" :not (:tag "event"))
  				 :order 3)

  		  (:name "Family "
  				 :and(:file-path "Family" :not (:tag "event"))
  				 :order 3)

  		  (:name "Studies "
  				 :and(:file-path "Studies " :not (:tag "event"))
  				 :order 3)

  		  (:name "🗓 Today "
  				 :time-grid t
  				 :date today
  				 :scheduled today
  				 :order 1
  				 :face 'warning)))

    ;; Activate org super agenda
    (org-super-agenda-mode t)

    ;; Add Keybindings
    :general
    (:keymaps 'org-super-agenda-header-map
  		"j" '(org-agenda-next-line :wk "Next Agenda Line")
  		"k" '(org-agenda-previous-line :wk "Previous Agenda Line")))

#+end_src
*** Org Ref
Add [[https://github.com/jkitchin/org-ref][Org Ref]] for easier and more streamlined ~Citations~ and ~Cross-References~
#+begin_src emacs-lisp
  ;; Load Org Ref
  (use-package org-ref
	:config
	;; Bibtex Hydra
	;; (define-key bibtex-mode-map (kbd "H-b") 'org-ref-bibtex-hydra/body)
	)

#+end_src
*** Org Drill
~Org Drill~ is a ~spaced repetition program~ (like ~Anki~)  built to work with [[id:3cf0fa83-18b3-4206-a109-f4606a94b8c1][Emacs]]

The ~Hint-Separator~ is set to =||= from =|=
The ~Left and Right Clozer~-delimiters are set to =<[= and =]>= respectively from the default =[= and =]=.
This is done to better fit in with the [[id:62eadd2d-023b-4d03-8eb0-527528f6e224][LaTeX]]-~Syntax~ used in some notes.
You can find an example file here: [[id:a5bb4b50-f15b-49c5-b2cb-bc80a65c14d6][spanish.org]]

#+begin_src emacs-lisp
  ;; Add Org Drill to use Org as a Anki Backup
  (use-package org-drill
	:config
	(progn
	  (add-to-list 'org-modules 'org-drill)
	  (setq org-drill-add-random-noise-to-intervals-p t)
	  (setq org-drill-hint-separator "||")
	  (setq org-drill-left-cloze-delimiter "<[")
	  (setq org-drill-right-cloze-delimiter "]>")
	  (setq org-drill-learn-fraction 1.0)))

#+end_src
*** Org Auto Tangle
This safes the need for the ~Helper Functions~ below that I used previously
:NOTE:
You need to add =#+auto_tangle: t= to the files you want to use this feature
:END:
#+begin_src emacs-lisp
  ;; Org AddOn Auto Tangle Org Files
  ;; Add '#+auto_tangle: t' to files
  (use-package org-auto-tangle
    :defer t
    :hook (org-mode . org-auto-tangle-mode)
    :config
    (setq org-auto-tangle-default nil))

#+end_src
*** Org Crypt

~Org Crypt~ *encrypts* the *text of an entry*, but *not* the ~headline~, or ~properties~.
Behind the scene, it uses the (=epa=)~Emacs EasyPG Library~ to encrypt and decrypt files, and ~EasyPG~ needs a correct (=gnupg=)[[id:5dc04892-9105-45aa-845a-01b89448d753][GnuPG]] setup.

Any text below a headline that has a =‘crypt’= ~tag~ is automatically encrypted when the file is saved.
To use a *different tag*, customize the =org-crypt-tag-matcher= setting.

Excluding the =‘crypt’= ~tag~ from ~inheritance~ prevents already *encrypted text* from being *encrypted again*.

It’s possible to use ~different keys~ for different headings by specifying the respective key as property =‘CRYPTKEY’=, e.g.:

#+begin_example
  * Totally secret :crypt:
    :PROPERTIES:
    :CRYPTKEY: 0x0123456789012345678901234567890123456789
    :END:
#+end_example

To turn ~auto-save~ off *only locally*, you can insert this:
#+begin_example
# -*- buffer-auto-save-file-name: nil; -*-
#+end_example

#+begin_src emacs-lisp
  (require 'org-crypt)
  (org-crypt-use-before-save-magic)
  (setq org-tags-exclude-from-inheritance '("crypt"))

  (setq org-crypt-key nil)
  ;; GPG key to use for encryption
  ;; Either the Key ID or set to nil to use symmetric encryption.

  ;; (setq auto-save-default nil)
  ;; Auto-saving does not cooperate with org-crypt.el: so you need to
  ;; turn it off if you plan to use org-crypt.el quite often.  Otherwise,
  ;; you'll get an (annoying) message each time you start Org.

  ;; To turn it off only locally, you can insert this:
  ;;
  ;; # -*- buffer-auto-save-file-name: nil; -*-
#+end_src
*** Org Contacts
#+begin_src emacs-lisp :tangle no
  ;; Load Org Contacts as a substitute for EBDB
  (use-package org-contacts
    :after org
    ;; Set Contacts File
    :custom (org-contacts-files (concat pet/org-dir "personal-contacts.org")))

#+end_src
*** Org Modern
#+begin_src emacs-lisp
  ;; Make org look a lot nicer
  (use-package org-modern
    :defer
    :after org
    :hook ((org-mode . org-modern-mode)
           (org-agenda-finalize . org-modern-agenda)))

#+end_src
* Legder Mode
:PROPERTIES:
:header-args:emacs-lisp: :tangle ../C01_EmacsConfiguration/.emacs.d/package_configs/ledger_mode_config.el :mkdirp yes
:END:
~Ledger Mode~ is an [[id:3cf0fa83-18b3-4206-a109-f4606a94b8c1][Emacs]] [[id:1c44cf3c-6549-4e70-a3fd-491df7996dd5][Packages]] that builds on top of the [[id:dec94196-4859-4fe6-be58-4237c61d9fad][CLI Tool]] [[https://www.ledger-cli.org/][Ledger]] for ~Plaintext Accounting~
#+begin_src emacs-lisp
  ;; Add Ledger Mode from Melpa
  ;; (Alternatively include the installation path of ledger to load-path)
  (use-package ledger-mode
    :config
    ;; Add mode Toggle to Keyspace
    (pet/leader-keys
      "tml"   '(ledger-mode :which-key "Ledger Mode"))

    ;; Load mode on .dat files
    :mode "\\.dat\\'")

#+end_src
* Citeproc
:PROPERTIES:
:header-args:emacs-lisp: :tangle ../C01_EmacsConfiguration/.emacs.d/package_configs/citeproc_config.el :mkdirp yes
:END:
[[https://github.com/andras-simonyi/citeproc-el][Citeproc]] is needed for [[https://citationstyles.org/][CSL]] ~Citation styles~
#+begin_src emacs-lisp
  ;; Add Citeproc for CSL style Citations
  (use-package citeproc)

#+end_src
* Mail
** mu4e
:PROPERTIES:
:header-args:emacs-lisp: :tangle ../C01_EmacsConfiguration/.emacs.d/package_configs/mu4e_config.el :mkdirp yes
:END:

[[id:6cdf0fb1-747c-44b6-9135-41c191bfcf34][mu4e]] (~mu-for-emacs~) is an e-mail client for [[id:3cf0fa83-18b3-4206-a109-f4606a94b8c1][GNU Emacs]] built on top of the =mu= ~e-mail search engine~ for the [[id:bf9b9431-2e38-411a-904f-c5b0c913520d][Command Line]].
Documentation can be found here: [[https://www.djcbsoftware.nl/code/mu/mu4e/][DJCBSoftware: mu4e]]
#+begin_src emacs-lisp
  ;; Store Location of Account Settings
  (setq pet/mail-accounts-config
  		(concat pet/home-dir
  				(convert-standard-filename
  				 ".dotfiles-private/Configurations/C2-Emacs/MailAccounts.el")))

  ;; Load mu4e as a Mail Interface for mu
  (use-package mu4e
    :straight nil
    :defer 20 ; Wait until 20 seconds after startup
    :config

    ;; Load org-mode integration
    (require 'mu4e-org)

    ;; Refresh mail using isync/mbsync every 10 minutes
    (setq mu4e-update-interval (* 10 60))
    (setq mu4e-get-mail-command "mbsync --all")
    (setq mu4e-maildir (concat pet/home-dir "Mail"))

    ;; Sets the standard download directory for attachments
    ;; (default: '~/')
    (setq mu4e-attachment-dir (concat pet/home-dir "Downloads"))

    ;; Use Ivy for mu4e completions (maildir folders, etc)
    (setq mu4e-completing-read-function #'ivy-completing-read)

    ;; Make sure that moving a message (like to Trash) causes the
    ;; message to get a new file name.  This helps to avoid the
    ;; dreaded "UID is N beyond highest assigned" error.
    ;; See this link for more info: https://stackoverflow.com/a/43461973
    (setq mu4e-change-filenames-when-moving t)

    ;; don't keep message buffers around
    (setq message-kill-buffer-on-exit t)

    ;; Load external file with Account information
    (pet/load-file pet/mail-accounts-config)

    ;; Sets the first context (specified in file above)
    ;; to be loaded by default
    ;; (Options: pick-first, ask, ask-if-none, always-ask)
    (setq mu4e-context-policy 'pick-first)

    ;; Don't ask to quit
    (setq mu4e-confirm-quit nil)

    ;; Set Contacts file for Org Contacts interaction
    (setq mu4e-org-contacts-file
  		(concat pet/org-dir "personal-contacts.org"))

    ;; COMPOSING MAIL

    ;; Don't include oneself in reply by default
    (setq mu4e-compose-dont-reply-to-self t)

    ;; ISO(ish) format date-time stamps in the header list
    ;; default is "%x" (locale appropriate)
    (setq  mu4e-headers-date-format "%Y-%m-%d %H:%M")

    ;; customize the reply-quote-string
    (setq message-citation-line-format
  		"On %Y-%m-%d %H:%M %Z %N wrote:\n")
    ;; Replace 'message-insert-citation-line' with
    ;; 'message-insert-formatted-citation-line'
    (setq message-citation-line-function
  		'message-insert-formatted-citation-line)

    ;; HELPER FUNCTIONS

    ;; Function to store header queries to reuse them later
    (defun pet/store-link-to-mu4e-query()
  	(interactive)
  	(let ((mu4e-org-link-query-in-headers-mode t))
  	  (call-interactively 'org-store-link)))

    ;; Functions to automatically call Org Capture Templates on certain actions
    ;; Follow up messages
    (defun pet/capture-mail-follow-up (msg)
  	(interactive)
  	(call-interactively 'org-store-link)
  	(org-capture nil "ef"))
    ;; Read later messages
    (defun pet/capture-mail-read-later (msg)
  	(interactive)
  	(call-interactively 'org-store-link)
  	(org-capture nil "er"))

    ;; Add custom actions for our capture templates
    (add-to-list 'mu4e-headers-actions
  			   '("follow up" . pet/capture-mail-follow-up) t)
    (add-to-list 'mu4e-view-actions
  			   '("follow up" . pet/capture-mail-follow-up) t)
    (add-to-list 'mu4e-headers-actions
  			   '("read later" . pet/capture-mail-read-later) t)
    (add-to-list 'mu4e-view-actions
  			   '("read later" . pet/capture-mail-read-later) t)

    (bind-keys
     :map mu4e-headers-mode-map

     ("{" . mu4e-headers-query-prev)             ; differs from built-in
     ("}" . mu4e-headers-query-next)             ; differs from built-in

     ("´" . mu4e-update-mail-and-index)          ; differs from built-in
     ("|" . mu4e-view-pipe)               	     ; does not seem to be built in any longer
     ("." . hydra-mu4e-headers/body))

    ;; Expand personal Keyspace
    (pet/leader-keys
  	"m"  '(:ignore t :which-key "Mail")
  	"mm" 'mu4e
  	"mc" 'mu4e-compose-new
  	"ms" 'mu4e-update-mail-and-index))

#+end_src
*** mu4e-alert

[[https://github.com/iqbalansari/mu4e-alert][mu4e-alert]] sends ~Notifications~ to your ~notifications daemon/window manager~
#+begin_src emacs-lisp
  ;; Sent alerts for received
  (use-package mu4e-alert
    :after mu4e
    :config
    ;; Show unread emails from all inboxes
    (when (boundp 'pet/mu4e-inbox-query-new)
      (setq mu4e-alert-interesting-mail-query
            pet/mu4e-inbox-query-new))

    ;; Show notifications for mails already notified
    (setq mu4e-alert-notify-repeated-mails nil)

    ;; Display symbol for received mails on mode line
    (mu4e-alert-enable-mode-line-display)
    ;; Enalbe Notifications
    (mu4e-alert-enable-notifications))

#+end_src
* Password Management
** Password Store
:PROPERTIES:
:header-args:emacs-lisp: :tangle ../C01_EmacsConfiguration/.emacs.d/package_configs/password_store_config.el :mkdirp yes
:END:
#+begin_src emacs-lisp
  ;; Add wrapper for the command line tool 'pass'
  (use-package password-store
  	:config
  	;; If you want to adjust the default password length
  	;; (setq password-store-password-length 12)

  	;; Use Password Store as Source for Auth-Sources
  	(setq auth-sources '(password-store))

  	;; Add Functions to Leader Keys
  	(pet/leader-keys
  	  "ap"  '(:ignore t :which-key "Password Store")
  	  "app" 'password-store-copy
  	  "api" 'password-store-insert
  	  "apg" 'password-store-generate))

#+end_src
** Emacs TOTP
:PROPERTIES:
:header-args:emacs-lisp: :tangle ../C01_EmacsConfiguration/.emacs.d/package_configs/totp_config.el :mkdirp yes
:END:

[[https://codeberg.org/RastiGiG/emacs-totp][Emacs-totp]] is my personal version of [[https://github.com/juergenhoetzel/emacs-totp][GitHub.com: JuergenHoetzel - emacs-totp]]
#+begin_src emacs-lisp
  ;; Load TOTP Functionality
  (straight-use-package
   '(emacs-totp :type git :host codeberg :repo "RastiGiG/emacs-totp"))

  (pet/load-file "emacs-totp.el")

#+end_src
* Contact Management
** EBDB
:PROPERTIES:
:header-args:emacs-lisp: :tangle ../C01_EmacsConfiguration/.emacs.d/package_configs/ebdb_config.el :mkdirp yes
:END:

[[https://github.com/girzel/ebdb/blob/master/ebdb.org][EBDB]] is an [[id:3cf0fa83-18b3-4206-a109-f4606a94b8c1][Emacs]] [[id:1c44cf3c-6549-4e70-a3fd-491df7996dd5][Package]] meant to replace ~BBDB~ (~"Big Brother Data Base"~) as a tool for Contact Management.
In contrast to ~BBDB~ it is very well documented.

DISABLED FOR NOW
:NOTE:
~'E'~ stands for ~'EIEIO'~, which in turn means ~'Enhanced Implementation of Emacs Interpreted Objects'~ - a fancy way of saying ~Object Oriented Elisp~
:END:
#+begin_src emacs-lisp
  ;; Use EBDB for contact management
  (use-package ebdb
    :config
    ;; Set the source files for Contact DBs
    (setq ebdb-sources (list
  					  (concat pet/home-dir "Contacts/default-contacts.db")
  					  (concat pet/home-dir "Contacts/family.db")
  					  (concat pet/home-dir "Contacts/work.db")
  					  (concat pet/home-dir "Contacts/organizations.db")
  					  (concat pet/home-dir "Contacts/mailing-lists.db")))

    ;; Access Menu through '.' in EBDB Buffer
    ;; (define-key ebdb-mode-map
    ;;		  "." 'hydra-ebdb-menu/body)

    ;; Specify the Display Format for Month and Day on Anniversaries
    ;; (setq ebdb-anniversary-md-format "%B %d")
    ;; Specify the Display Format for Year, Month and Day on Anniversaries
    ;; (setq ebdb-anniversary-ymd-format "%B %d, %Y")

    ;; Set Keybindings
    (pet/leader-keys
  	"c"  '(:ignore t :which-key "Contacts")
  	"co" '(ebdb-open :which-key "Open Contact Database")))

#+end_src
* ERC
:PROPERTIES:
:header-args:emacs-lisp: :tangle ../C01_EmacsConfiguration/.emacs.d/package_configs/erc_config.el :mkdirp yes
:END:

~IRC Server~ lists:
+ [[https://hackint.org/servers][HackInt.org: Server]]
#+begin_src emacs-lisp
  ;; Define Servers
  (defun pet/irc-libera-server
  	  (interactive)
  	(erc-tls :server "irc.libera.chat"
  			 :port   "6697"))

  (defun pet/irc-hackint-server
  	  (interactive)
  	(erc-tls :server "irc.hackint.org"
  			 :port   "6697"))

  (defun pet/irc-hackint-de-server
  	  (interactive)
  	(erc-tls :server "irc.hackint.org"
  			 :port   "6697"))

  (defun pet/irc-oftc-server
  	  (interactive)
  	(erc-tls :server "irc.oftc.net"
  			 :port   "6697"))

  ;; Setup ERC Chat Client
  ;; Set the Prompt to represent the the buffer-name
  (setq erc-prompt (lambda () (concat "[" (buffer-name) "]"))

  	  ;; Basic Account Config
  	  ;; Default Server
  	  erc-server "irc.libera.chat"
  	  erc-nick "sailti"

  	  ;; More info on the modeline
  	  erc-track-shorten-start 8

  	  ;; cleanup buffers
  	  erc-kill-buffer-on-part t

  	  ;; channel list
  	  erc-autojoin-channel-alist
  	  '(("irc.libera.chat"
  		 "#systemcrafters"
  		 "#emacs"))

  	  ;; bury private messages in buffer list
  	  erc-auto-query 'bury

  	  ;; Autofill nickname column to 20 chars for better formatting
  	  erc-fill-function 'erc-fill-static
  	  erc-fill-static-center 30)

  ;; Set Keyboard to be accessable by 'C-c i'
  (global-set-key (kbd "C-c i") 'erc-tls)

  (pet/leader-keys
  	"i"  '(:ignore t :which-key "IRC")
  	"mi" 'erc-tls
  	"ml" '(pet/irc-libera-server :which-key "Libera Chat")
  	"mh" '(pet/irc-hackint-server :which-key "Hack Int")
  	"mo" '(pet/irc-oftc-server :which-key "Open and Free Technology Community"))

#+end_src
* ERadio
:PROPERTIES:
:header-args:emacs-lisp: :tangle ../C01_EmacsConfiguration/.emacs.d/package_configs/eradio_config.el :mkdirp yes
:END:

[[https://github.com/olavfosse/eradio][eradio]] is a simple ~Internet radio player~ for [[id:3cf0fa83-18b3-4206-a109-f4606a94b8c1][Emacs]].
It uses =‘vlc’= as its backend by default, but you can change the =eradio-player= ~variable~ to use another ~multimedia player~.
This config sets ~eradio~ to use =‘mpv’= instead of =‘vlc’= because it supports more types of ~Internet radio streams~.
#+begin_src emacs-lisp
  ;; Add Radio to Emacs and load Internet Radio Streams
  (use-package eradio
    :init
    (setq eradio-player '("mpv" "--no-video" "--no-terminal"))
    :config
    (setq eradio-channels '(("Totally 80s FM" . "https://zeno.fm/radio/totally-80s-fm/")
                            ("Oldies Radio 50s-60s" . "https://zeno.fm/radio/oldies-radio-50s-60s/")
                            ("Oldies Radio 70s" . "https://zeno.fm/radio/oldies-radio-70s/")
                            ("Unlimited 80s" . "https://zeno.fm/radio/unlimited80s/")
                            ("80s Hits" . "https://zeno.fm/radio/80shits/")
                            ("90s Hits" . "https://zeno.fm/radio/90s_HITS/")
                            ("2000s Pop" . "https://zeno.fm/radio/2000s-pop/")
                            ("The 2000s" . "https://zeno.fm/radio/the-2000s/")
                            ("Hits 2010s" . "https://zeno.fm/radio/helia-hits-2010/")
                            ("Classical Radio" . "https://zeno.fm/radio/classical-radio/")
                            ("Classical Relaxation" . "https://zeno.fm/radio/radio-christmas-non-stop-classical/")
                            ("Classic Rock" . "https://zeno.fm/radio/classic-rockdnb2sav8qs8uv/")
                            ("Gangsta49" . "https://zeno.fm/radio/gangsta49/")
                            ("HipHop49" . "https://zeno.fm/radio/hiphop49/")
                            ("Madhouse Country Radio" . "https://zeno.fm/radio/madhouse-country-radio/")
                            ("PopMusic" . "https://zeno.fm/radio/popmusic74vyurvmug0uv/")
                            ("PopStars" . "https://zeno.fm/radio/popstars/")
                            ("RadioMetal" . "https://zeno.fm/radio/radio-metal/")
                            ("RocknRoll Radio" . "https://zeno.fm/radio/rocknroll-radio994c7517qs8uv/"))))

#+end_src
* Elfeed - Emacs RSS Feed
:PROPERTIES:
:header-args:emacs-lisp: :tangle ../C01_EmacsConfiguration/.emacs.d/package_configs/elfeed_config.el :mkdirp yes
:END:
** Load Elfeed

~Elfeed~ is a package, that enables you to see your ~RSS Feed~ in [[id:3cf0fa83-18b3-4206-a109-f4606a94b8c1][Emacs]]. We also set up ~elfeed-score~
Great inspirations for ~Elfeed~ Configurations can be found here:
- [[https://protesilaos.com/emacs/dotemacs#h:0cd8ddab-55d1-40df-b3db-1234850792ba][Protesilaos.com]]
- [[https://github.com/jkitchin/scimax/blob/master/scimax-elfeed.el][GitHub.com: John Kitchin - Scimax-Elfeed]]
#+begin_src emacs-lisp
  ;; Load Elfeed
  (use-package elfeed
    :bind (("C-c f" . elfeed)
  		 :map elfeed-search-mode-map
  		 ("n" . (lambda () (interactive)
  				  (next-line) (call-interactively
  					   'elfeed-search-show-entry)))
  		 ("p" . (lambda () (interactive)
  				  (previous-line) (call-interactively
  						   'elfeed-search-show-entry)))
  		 ("m" . (lambda () (interactive)
  				  (apply 'elfeed-search-toggle-all '(star))))
  		 ("g" . elfeed-update)
  		 ("G" . elfeed-search-update--force))
  		 ;;:map elfeed-show-mode-map
  		 ;;("w" . elfeed-show-yank))
    :config
    (setq elfeed-show-entry-switch 'display-buffer)
    (setq elfeed-search-remain-on-entry t)
    ;; Various Necessary/Helpful Settings
    (setq elfeed-use-curl t)
    (setq elfeed-curl-max-connections 10)
    (setq elfeed-db-directory
  		(concat pet/dotfiles-emacsconfig-dir "elfeed/"))
    (setq elfeed-enclosure-default-dir
  		"~/Downloads/")
    (setq elfeed-search-filter
  		"@4-months-ago +unread")
    (setq elfeed-sort-order 'descending)
    (setq elfeed-search-clipboard-type 'CLIPBOARD)
    (setq elfeed-search-title-max-width 150)
    (setq elfeed-search-title-min-width 30)
    (setq elfeed-search-trailing-width 25)
    (setq elfeed-show-truncate-long-urls t)
    (setq elfeed-show-unique-buffers t)
    (setq elfeed-search-date-format
  		'("%F %R" 16 :left))

    ;; Snippet for periodic update for feeds
    ;; (add-to-list 'elfeed-update-hooks 'elfeed-update)
    ;; (run-with-timer 0 (* 60 60 4) 'elfeed-update)

    ;; Load Feeds and Feed Settings
    (pet/load-file (concat pet/dotfiles-emacsconfig-dir
  						 "EmacsRSSFeed.el")))

#+end_src
** Elfeed-Score

~Elfeed-Score~ is a ~package~ that applies [[https://www.gnu.org/software/emacs/manual/html_node/gnus/Scoring.html#Scoring][Gnu-Style Scoring]] to [[id:211d12c6-29db-4550-bd06-ef6f8b32640c][Elfeed]]

#+begin_src emacs-lisp
  ;; Load Elfeed Score
  (use-package elfeed-score
    :config
    (progn
      (elfeed-score-enable)
      (define-key elfeed-search-mode-map "="
                  elfeed-score-map))
    (setq elfeed-search-print-entry-function
          #'elfeed-score-print-entry)
    (setq elfeed-score-serde-score-file
          (concat pet/dotfiles-emacsconfig-dir
           "elfeed.score"))
    (setq elfeed-score-rule-stats-file
          (concat pet/dotfiles-emacsconfig-dir
                  "elfeed.stats")))
#+end_src
** Elfeed-Org

[[https://github.com/remyhonig/elfeed-org][Elfeed-Org]] allows you to configure [[id:211d12c6-29db-4550-bd06-ef6f8b32640c][Elfeed]] with [[id:8510330a-9746-4684-ba60-04255df37924][Org Mode]]
#+begin_src emacs-lisp
  ;; Configure Elfeed with Org Mode
  (use-package elfeed-org
    :config
    ;; Default Elfeed config can be found under "~/.emacs.d/elfeed.org"
    (setq rmh-elfeed-org-files (list "~/Org/elfeed.org"))
    ;; Automatically set ignore tag for feeds with errors
    (setq rmh-elfeed-org-auto-ignore-invalid-feeds t)
    ;; Hook elfeed-org up to elfeed
    (elfeed-org))

#+end_src
** Elfeed-Dashboard

[[https://github.com/manojm321/elfeed-dashboard][Elfeed-Dashboard]] adds a [[id:43c5ff9c-3392-4b4a-ace7-f2a0af5f13b1][mu4e]]-like ~Dashboard~ to [[id:211d12c6-29db-4550-bd06-ef6f8b32640c][Elfeed]]
#+begin_src emacs-lisp
  ;; Add Dashboard to Elfeed
  (straight-use-package
    '(elfeed-dashboard
      :type git
      :host github
      :repo "Manoj321/elfeed-dashboard"))

  ;; Configure Dashboard
  (setq elfeed-dashboard-file "~/Org/elfeed-dashboard.org")
  (advice-add 'elfeed-search-quit-window
              :after #'elfeed-dashboard-update-links)

#+end_src

* Automatically Tangle Files
:NOTE:
This Section is ~deprecated~ since the ~Org Auto Tangle~ was added
:END:
** Emacs
*** Config File
#+begin_src emacs-lisp :tangle no
  ;; Setup Automatic Tangling of Files

  ;; Automatically tangle config file
  ;; Helper Function to that does the tangling
  (defun pet/org-babel-tangle-emacs-config ()
	(when (string-equal
		   (buffer-file-name)
		   (concat pet/dotfiles-dir
				   "000_OrgFiles/EmacsConfig.org"))
	  ;; Have the user confirm tangle
	  (let ((org-confirm-babel-evaluate t))
		(org-babel-tangle))))

  ;; This hook automatically evaluates the helper
  ;; function after saving the buffer
  (add-hook 'org-mode-hook
			(lambda ()
			  (add-hook
			   'after-save-hook
			   #'pet/org-babel-tangle-emacs-config)))

#+end_src
