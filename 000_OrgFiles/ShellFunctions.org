#+title: Common Shell Functions
#+PROPERTY: header-args:sh :tangle ../D00_GeneralShell/shell_functions :mkdirp yes
#+DESCRIPTION: This configuration is organized into subdirectories, which makes it easier to enable or disable large parts of it
#+STARTUP: hideblocks show2levels
#+OPTIONS:  toc:2
#+auto_tangle: t

* Header
#+begin_src sh
  #----------------------------------------------------------------------------------------------------------------------
  #   ____  _   _ _____ _     _     
  # / ___|| | | | ____| |   | |    
  # \___ \| |_| |  _| | |   | |    
  #  ___) |  _  | |___| |___| |___ 
  # |____/|_| |_|_____|_____|_____|
  #                                
  #  _____ _   _ _   _  ____ _____ ___ ___  _   _ ____  
  # |  ___| | | | \ | |/ ___|_   _|_ _/ _ \| \ | / ___| 
  # | |_  | | | |  \| | |     | |  | | | | |  \| \___ \ 
  # |  _| | |_| | |\  | |___  | |  | | |_| | |\  |___) |
  # |_|    \___/|_| \_|\____| |_| |___\___/|_| \_|____/ 
  #                                                     
  # - List of Common Shell Functions
  # Source:         - .dotfiles/00_OrgFiles/ShellFunctions.org
  # Target:         - .dotfiles/D00_GeneralShell/shell_functions
  # Author Email:   - randomly.ventilates@simplelogin.co
  # Author GitHub:  - https://github.com/RastiGiG/
  #
  #----------------------------------------------------------------------------------------------------------------------    

#+end_src
* Functions
** Environmental Helper Functions

These Functions are taken from the repository below.
I also link to the blog that explains the reasoning behind this.
- [[https://blog.flowblok.id.au/2013-02/shell-startup-scripts.html][FlowBlok.au: Shell Startup Scripts]]
- [[https://heptapod.host/flowblok/shell-startup/-/blob/branch/default/.shell/env_functions][HeptaPod.hos: Shell-Startup - Env Functions]]
#+begin_src sh
  #--------------ENVIRONMENT HELPER FUNCTIONS
  # Helpers to load environment variables

  # Usage: indirect_expand PATH -> $PATH
  indirect_expand () {
      env | sed -n "s/^$1=//p"
  }

  # Usage: pathremove /path/to/bin [PATH]
  # Eg, to remove ~/bin from $PATH
  #     pathremove ~/bin PATH
  pathremove () {
      local IFS=':'
      local newpath
      local dir
      local var=${2:-PATH}
      # Bash has ${!var}, but this is not portable.
      for dir in `indirect_expand "$var"`; do
          IFS=''
          if [ "$dir" != "$1" ]; then
              newpath=$newpath:$dir
          fi
      done
      export $var=${newpath#:}
  }

  # Usage: pathprepend /path/to/bin [PATH]
  # Eg, to prepend ~/bin to $PATH
  #     pathprepend ~/bin PATH
  pathprepend () {
      # if the path is already in the variable,
      # remove it so we can move it to the front
      pathremove "$1" "$2"
      #[ -d "${1}" ] || return
      local var="${2:-PATH}"
      local value=`indirect_expand "$var"`
      export ${var}="${1}${value:+:${value}}"
  }

  # Usage: pathappend /path/to/bin [PATH]
  # Eg, to append ~/bin to $PATH
  #     pathappend ~/bin PATH
  pathappend () {
      pathremove "${1}" "${2}"
      #[ -d "${1}" ] || return
      local var=${2:-PATH}
      local value=`indirect_expand "$var"`
      export $var="${value:+${value}:}${1}"
  }

  # Usage: ssource filename
  ssource () {
      if [ -r "$1" ]; then
          . "$1"
      fi
  }
    
#+end_src
