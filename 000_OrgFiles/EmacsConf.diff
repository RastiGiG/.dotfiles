*** EmacsConfig.org	2022-01-20 21:11:22.833078166 +0100
--- EmacsTestConfig.org	2022-01-20 23:18:35.481151887 +0100
***************
*** 1,5 ****
! #+TITLE: Personal Emacs Configuration
! #+PROPERTY: header-args:emacs-lisp :tangle ../C01_EmacsConfiguration/.emacs.d/init.el :mkdirp yes
  #+STARTUP: hideblocks show2levels
  
  * Personal Emacs Configuration
--- 1,5 ----
! #+TITLE: Personal Emacs Test Configuration
! #+PROPERTY: header-args:emacs-lisp :tangle ../C01_EmacsConfiguration/.emacs-test/init.el :mkdirp yes
  #+STARTUP: hideblocks show2levels
  
  * Personal Emacs Configuration
***************
*** 11,17 ****
    ;;   _____ __  __    _    ____ ____  
    ;;  | ____|  \/  |  / \  / ___/ ___| 
    ;;  |  _| | |\/| | / _ \| |   \___ \ 
!   ;;  | |___| |  | |/ ___ \ |___ ___) |
    ;;  |_____|_|  |_/_/   \_\____|____/ 
    ;;                                   
  
--- 11,17 ----
    ;;   _____ __  __    _    ____ ____  
    ;;  | ____|  \/  |  / \  / ___/ ___| 
    ;;  |  _| | |\/| | / _ \| |   \___ \ 
!   ;;  | |___| |  | |/ ___ \ |___ ___ |
    ;;  |_____|_|  |_/_/   \_\____|____/ 
    ;;                                   
  
***************
*** 92,100 ****
  
    (menu-bar-mode -1)          ; Disable the menu bar
  
!   ;; Start Emacs in Fullscreen mode
    (add-hook 'emacs-startup-hook 'toggle-frame-maximized)
! 
    ;; Set default Encoding to UTF-8
    (set-language-environment "UTF-8")
    (set-default-coding-systems 'utf-8)
--- 92,104 ----
  
    (menu-bar-mode -1)          ; Disable the menu bar
  
!   ;; Start Emacs in Fullscreen mode and set transparancy
    (add-hook 'emacs-startup-hook 'toggle-frame-maximized)
!   (set-frame-parameter (selected-frame) 'fullscreen 'maximized)
!   (set-frame-parameter (selected-frame) 'alpha '(90 . 90))
!   (add-to-list 'default-frame-alist '(fullscreen . maximized))
!   (add-to-list 'default-frame-alist '(alpha . (90 . 90)))
!   
    ;; Set default Encoding to UTF-8
    (set-language-environment "UTF-8")
    (set-default-coding-systems 'utf-8)
***************
*** 137,143 ****
--- 141,168 ----
  #+end_src
  
  * Quality of Live Adjustments
+ ** Startup
+ 
+ Make startup faster by reducing the frequency of garbage collection and then use a hook to measure Emacs startup time.
+ 
+ #+begin_src emacs-lisp
+   ;; Setting garbage collection threshold (default is 800)
+   ;; Required for speed and also LSP
+   (setq gc-cons-threshold (* 50 1000 1000)
+ 	gc-cons-percentage 0.6)
+ 
+   ;; Profile emacs startup
+   (add-hook 'emacs-startup-hook
+ 	    (lambda ()
+ 	      (message "*** Emacs loaded in %s with %d garbage collections."
+ 		       (format "%.2f seconds"
+ 			       (float-time
+ 				(time-subtract after-init-time before-init-time)))
+ 		       gcs-done)))
  
+   ;; Silence compiler warnings as they can be pretty disruptive
+   ;;(setq comp-async-report-warnings-errors nil)
+ #+end_src
  ** Calender
  
  #+begin_src emacs-lisp
***************
*** 192,197 ****
--- 217,229 ----
  
  #+end_src
  
+ ** World Clocks
+ [[id:3cf0fa83-18b3-4206-a109-f4606a94b8c1][Emacs]] can display the curren clocktime for various places around the world with the command =world-clock=
+ #+begin_src emacs-lisp
+   ;; Add Berlin to World Clock
+   (add-to-list 'zoneinfo-style-world-list
+ 	       '("Europe/Berlin" "Berlin")
+ #+end_src
  ** YASnippets
  
  Load ~package~ =yasnippets= (should already come preinstalled, invocation is just to do the configuration)
***************
*** 244,249 ****
--- 276,289 ----
                             "<return>") nil))
  #+end_src
  
+ ** Display Emojis
+ [[https://github.com/iqbalansari/emacs-emojify][Emojify]] is an [[id:3cf0fa83-18b3-4206-a109-f4606a94b8c1][Emacs]] extension to display ~emojis. It can display github style emojis like :smile: or plain ascii ones like :).
+ [[id:40f3f142-cf2a-44f0-a9fb-da5f5bf448cc][Unicode Emojis]] k√∂nnen auch ohne dieses Paket schon angezeigt werden
+ #+begin_src emacs-lisp
+   ;; Extend Emacs Emoji capability (apart from Unicode)
+   (use-package emojify
+   :hook (after-init . global-emojify-mode))
+ #+end_src
  * Keybinding Configuration
  
   [[https://github.com/noctuid/general.el][general.el]] is used for easy keybinding configuration that integrates well with =which-key=.
***************
*** 259,265 ****
      (pet/leader-keys
       "t"  '(:ignore t :which-key "toggles")
       "tt" '(counsel-load-theme
!             :which-key "choose theme")
       "l"  '(:ignore t :which-key "layout")
      ))
  #+end_src
--- 299,307 ----
      (pet/leader-keys
       "t"  '(:ignore t :which-key "toggles")
       "tt" '(counsel-load-theme
! 	    :which-key "choose theme")
!      "tw" 'whitespace-mode
!      "tc" 'world-clock     
       "l"  '(:ignore t :which-key "layout")
      ))
  #+end_src
***************
*** 273,283 ****
      :init      ;; tweak dashboard config before loading it
      (setq dashboard-set-heading-icons t)
      (setq dashboard-set-file-icons t)
!     (setq dashboard-banner-logo-title "Surveillance creates a prison in the mind")
!     ;; use standard emacs logo as banner
!     (setq dashboard-startup-banner 'logo)
!     ;; use standard emacs logo as banner
!     ;; (setq dashboard-startup-banner "~/.emacs.d/emacs-dash.png")
      (setq dashboard-center-content nil) ;; set to 't' for centered content
      (setq dashboard-items '((recents . 5)
  			    (agenda . 5 )
--- 315,323 ----
      :init      ;; tweak dashboard config before loading it
      (setq dashboard-set-heading-icons t)
      (setq dashboard-set-file-icons t)
!     (setq dashboard-banner-logo-title "Emacs Is More Than A Text Editor!")
!     (setq dashboard-startup-banner 'logo) ;; use standard emacs logo as banner
!     ;; (setq dashboard-startup-banner "~/.emacs.d/emacs-dash.png")  ;; use custom image as banner
      (setq dashboard-center-content nil) ;; set to 't' for centered content
      (setq dashboard-items '((recents . 5)
  			    (agenda . 5 )
***************
*** 290,296 ****
  				(bookmarks . "book"))))
  #+end_src
  *** Dashboard as Client Startup
- 
  #+begin_src emacs-lisp
    ;; Make Emacsclient start up into dashboard
    (setq initial-buffer-choice (lambda () (get-buffer "*dashboard*")))
--- 330,335 ----
***************
*** 453,458 ****
--- 492,522 ----
      ([remap describe-key] . helpful-key))
  
  #+end_src
+ ** Perspective
+ #+begin_src emacs-lisp
+   ;; Add Perspective to use sets of 
+   (use-package perspective
+     :demand t
+     ;; Setup Keybindings
+     ;; :bind (("C-M-k" . persp-switch)
+     ;; 	   ("C-M-n" . persp-next)
+     ;; 	   ("C-x k" . persp-kill-buffer*))
+     :custom
+     (persp-initial-frame-name "Main")
+     :config
+     ;; Running `persp-mode' multiple times resets the perspective list...
+     (unless (equal persp-mode t)
+       (persp-mode))
+ 
+     ;; Add Perspective Functions to User Leader Keys
+     (pet/leader-key-def
+      "P"  '(:ignore t :which-key "Perspectives")
+      "Pn"  'persp-next  
+      "Ps"  'persp-switch-to-buffer*
+      "Pk"  'persp-kill-buffer*
+     )
+     )
+ #+end_src
  ** Treemacs Mode
  
  =Treemacs= is a handy tree-style *file directory viewer* that's very similar to what you are used from commercial IDEs.
***************
*** 487,535 ****
  #+begin_src emacs-lisp
    (use-package elfeed
      :bind (("C-c f" . elfeed)
!            :map elfeed-search-mode-map
!            ("n" . (lambda () (interactive) (next-line) (call-interactively 'elfeed-search-show-entry)))
!            ("p" . (lambda () (interactive) (previous-line) (call-interactively 'elfeed-search-show-entry)))
!            ("m" . (lambda () (interactive) (apply 'elfeed-search-toggle-all '(star))))
!            ("g" . elfeed-update)
!            ("G" . elfeed-search-update--force)
!            ;;:map elfeed-show-mode-map
!            ;;("w" . elfeed-show-yank))
!        )
!   :config
!   (setq elfeed-show-entry-switch 'display-buffer)
!   (setq elfeed-search-remain-on-entry t)
!    ;; Various Necessary/Helpful Settings
!   (setq elfeed-use-curl t)
!   (setq elfeed-curl-max-connections 10)
!   (setq elfeed-db-directory
!         (concat pet/dotfiles-emacsconfig-dir
!                 "elfeed/"))
!   (setq elfeed-enclosure-default-dir
!         "~/Downloads/")
!   (setq elfeed-search-filter
!         "@4-months-ago +unread")
!   (setq elfeed-sort-order 'descending)
!   (setq elfeed-search-clipboard-type 'CLIPBOARD)
!   (setq elfeed-search-title-max-width 150)
!   (setq elfeed-search-title-min-width 30)
!   (setq elfeed-search-trailing-width 25)
!   (setq elfeed-show-truncate-long-urls t)
!   (setq elfeed-show-unique-buffers t)
!   (setq elfeed-search-date-format
!         '("%F %R" 16 :left))
  
    ;; Snippet for periodic update for feeds
    ;; (3 mins since Emacs start, then every
    ;; half hour)
!   (run-at-time 180 1800
!                (lambda ()
!                  (unless elfeed-waiting
!                    (elfeed-update))))
!   )
    ;; Load Feeds and Feed Settings  
    (load (concat pet/dotfiles-emacsconfig-dir
!                 "EmacsRSSFeed.el"))
  #+end_src
  
  ** Elfeed-Score
--- 551,608 ----
  #+begin_src emacs-lisp
    (use-package elfeed
      :bind (("C-c f" . elfeed)
! 	   :map elfeed-search-mode-map
! 	   ("n" . (lambda () (interactive)
! 		    (next-line)
! 		    (call-interactively
! 		     'elfeed-search-show-entry)))
! 	   ("p" . (lambda () (interactive)
! 		    (previous-line)
! 		    (call-interactively
! 		     'elfeed-search-show-entry)))
! 	   ("m" . (lambda () (interactive)
! 		    (apply
! 		     'elfeed-search-toggle-all
! 		     '(star))))
! 	   ("g" . elfeed-update)
! 	   ("G" . elfeed-search-update--force)
! 	   ;;:map elfeed-show-mode-map
! 	   ;;("w" . elfeed-show-yank))
! 	   )
!     :config
!     (setq elfeed-show-entry-switch 'display-buffer)
!     (setq elfeed-search-remain-on-entry t)
!     ;; Various Necessary/Helpful Settings
!     (setq elfeed-use-curl t)
!     (setq elfeed-curl-max-connections 10)
!     (setq elfeed-db-directory
! 	  (concat pet/dotfiles-emacsconfig-dir
! 		  "elfeed/"))
!     (setq elfeed-enclosure-default-dir
! 	  "~/Downloads/")
!     (setq elfeed-search-filter
! 	  "@4-months-ago +unread")
!     (setq elfeed-sort-order 'descending)
!     (setq elfeed-search-clipboard-type 'CLIPBOARD)
!     (setq elfeed-search-title-max-width 150)
!     (setq elfeed-search-title-min-width 30)
!     (setq elfeed-search-trailing-width 25)
!     (setq elfeed-show-truncate-long-urls t)
!     (setq elfeed-show-unique-buffers t)
!     (setq elfeed-search-date-format
! 	  '("%F %R" 16 :left))
  
    ;; Snippet for periodic update for feeds
    ;; (3 mins since Emacs start, then every
    ;; half hour)
!     (run-at-time 180 1800
! 		 (lambda ()
! 		   (unless elfeed-waiting
! 		     (elfeed-update))))
!     )
    ;; Load Feeds and Feed Settings  
    (load (concat pet/dotfiles-emacsconfig-dir
! 		"EmacsRSSFeed.el"))
  #+end_src
  
  ** Elfeed-Score
***************
*** 684,692 ****
  
      ;; Set Org Clock Sound File
      (setq org-clock-sound "/home/sebastian/Org/sounds/Rush.wav")
!   )
    #+end_src
    
  ** Org-Capture
  
  #+begin_src emacs-lisp
--- 757,775 ----
  
      ;; Set Org Clock Sound File
      (setq org-clock-sound "/home/sebastian/Org/sounds/Rush.wav")
!     )
    #+end_src
    
+ ** Prettier Org Heading Stars
+ 
+ [[https://github.com/sabof/org-bullets][org-bullets]] replaces the heading stars in =org-mode= buffers with nicer looking characters that you can control.  Another option for this is [[https://github.com/integral-dw/org-superstar-mode][org-superstar-mode]]l
+ 
+ #+begin_src emacs-lisp
+   ;; Setup Org Superstar
+   (use-package org-superstar
+     :after org)
+   (add-hook 'org-mode-hook (lambda () (org-superstar-mode 1)))
+ #+end_src
  ** Org-Capture
  
  #+begin_src emacs-lisp
***************
*** 1389,1398 ****
  [[https://github.com/Fanael/rainbow-delimiters][rainbow-delimiters]] is useful in programming modes because it colorizes nested parentheses and brackets according to their nesting depth.  This makes it a lot easier to visually match parentheses in Emacs Lisp code without having to count them yourself.
  
  #+begin_src emacs-lisp
! 
    (use-package rainbow-delimiters
      :hook (prog-mode . rainbow-delimiters-mode))
  
  #+end_src
  
  ** Terminal Modes
--- 1472,1493 ----
  [[https://github.com/Fanael/rainbow-delimiters][rainbow-delimiters]] is useful in programming modes because it colorizes nested parentheses and brackets according to their nesting depth.  This makes it a lot easier to visually match parentheses in Emacs Lisp code without having to count them yourself.
  
  #+begin_src emacs-lisp
!   ;; Add rainbow delimiters for better readability
    (use-package rainbow-delimiters
      :hook (prog-mode . rainbow-delimiters-mode))
+ #+end_src
+ ** Matching Parenthesis
+ 
+ Emacs highlights matching parenthesis by default.
+ This Setting is meant to make that highlighting stand out more
  
+ #+begin_src emacs-lisp
+   ;; Customize highlighting of matching parenthesis
+   (use-package paren
+   :config
+   (set-face-attribute
+    'show-paren-match-expression nil :background "#363e4a")
+   (show-paren-mode 1))
  #+end_src
  
  ** Terminal Modes
***************
*** 1454,1459 ****
--- 1549,1590 ----
  
  For documentation on *eshell-git-prompt* look here: [[https://github.com/xuchunyang/eshell-git-prompt]]
  
+ ** Projectile
+ 
+ [[https://projectile.mx/][Projectile]] is a project management library for Emacs which makes it a lot easier to navigate around code projects for various languages.  Many packages integrate with Projectile so it's a good idea to have it installed even if you don't use its commands directly.
+ 
+ #+begin_src emacs-lisp
+   ;; Use Projectile for project management
+   (use-package projectile
+     :diminish projectile-mode
+     :config (projectile-mode)
+     :custom ((projectile-completion-system 'ivy))
+     ;; Setup default keybinding for projectile
+     :bind-keymap
+     ("C-c p" . projectile-command-map)
+     :init
+     ;; NOTE: Set this to the folder where you keep your Git repos!
+     (when (file-directory-p "~/Projects/Programming")
+       (setq projectile-project-search-path
+ 	    '("~/Projects/Programming")))
+     (setq projectile-switch-project-action
+ 	  #'projectile-dired)
+ 	;; Add Projectile Functions to User Leader Keys
+     (pet/leader-key-def
+      "p"  '(:ignore t :which-key "projects")
+      "pf"  'counsel-projectile-find-file
+      "ps"  'counsel-projectile-switch-project
+      "pF"  'counsel-projectile-rg
+      ;; "pF"  'consult-ripgrep
+      "pp"  'counsel-projectile
+      "pc"  'projectile-compile-project
+      "pd"  'projectile-dired)
+     )
+ 
+   ;; Projectile Counsel Integration
+   (use-package counsel-projectile
+     :config (counsel-projectile-mode))
+ #+end_src
  ** Magit
  
  [[https://magit.vc/][Magit]] is the best Git interface I've ever used.  Common Git operations are easy to execute quickly using Magit's command panel system.
***************
*** 1463,1468 ****
--- 1594,1600 ----
  #+end_src
  
  * Automatically Tangle Files
+ 
  ** Emacs
  *** Config File
  
