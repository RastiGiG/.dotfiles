#+title:       Personal NeoVim Configuration
#+DATE:        [2023-12-16]
#+PROPERTY:    header-args:lua :tangle yes :mkdirp yes
#+STARTUP:     show2levels
#+auto_tangle: t

* Header

#+begin_src lua :tangle ../C02_VimConfiguration/.config/nvim/init.lua
  --[[

    _   _         __     ___           
   | \ | | ___  __\ \   / (_)_ __ ___  
   |  \| |/ _ \/ _ \ \ / /| | '_ ` _ \ 
   | |\  |  __/ (_) \ V / | | | | | | |
   |_| \_|\___|\___/ \_/  |_|_| |_| |_|
                                       

   - NeoVim - the new V(IM)proved
   Source:         - .dotfiles/00_OrgFiles/NeoVimConfig.org
   Target:         - .dotfiles/C02_VimConfiguration/.config/nvim/init.lua
   Author Email:   - randomly.ventilates@simplelogin.co
   Author GitHub:  - https://github.com/RastiGiG/

  --]]

#+end_src

* Basic Init
#+begin_src lua :tangle ../C02_VimConfiguration/.config/nvim/init.lua
    --[[
  
  =====================================================================
  ==================== READ THIS BEFORE CONTINUING ====================
  =====================================================================
  
    If you don't know anything about Lua, I recommend taking some time to read through
    a guide. One possible example:
    - https://learnxinyminutes.com/docs/lua/
  
    And then you can explore or search through `:help lua-guide`
    - https://neovim.io/doc/user/lua-guide.html
  
  --]]

  -- Load personal configuration
  require('gigus')

#+end_src
* Personal Configuration
** Lua - General Setup
*** Init
#+begin_src lua :tangle ../C02_VimConfiguration/.config/nvim/lua/gigus/init.lua
  --[[

  =====================================================================
  =================== PERSONAL NEOVIM CONFIGURATION ===================
  =====================================================================

  --]]

  require('gigus.keybindings')
  require('gigus.settings')
  require('gigus.lazy')
  require('gigus.colorscheme')

#+end_src
*** Keybindings
#+begin_src lua :tangle ../C02_VimConfiguration/.config/nvim/lua/gigus/keybindings.lua
  --[[

  =====================================================================
  ============================ KEYBINDINGS ============================
  =====================================================================

  --]]

  -- [[ Leader Keys ]]

  -- Set <space> as the leader key
  -- See `:help mapleader`
  --  NOTE: Must happen before plugins are required (otherwise wrong leader will be used)
  vim.g.mapleader = ' '
  vim.g.maplocalleader = ' '

  -- [[ Basic Keymaps ]]

  -- Keymaps for better default experience
  -- See `:help vim.keymap.set()`
  vim.keymap.set({ 'n', 'v' }, '<Space>', '<Nop>', { silent = true })

  -- Remap for dealing with word wrap
  vim.keymap.set('n', 'k', "v:count == 0 ? 'gk' : 'k'", { expr = true, silent = true })
  vim.keymap.set('n', 'j', "v:count == 0 ? 'gj' : 'j'", { expr = true, silent = true })

  -- Diagnostic keymaps
  vim.keymap.set('n', '[d', vim.diagnostic.goto_prev, { desc = 'Go to previous diagnostic message' })
  vim.keymap.set('n', ']d', vim.diagnostic.goto_next, { desc = 'Go to next diagnostic message' })
  vim.keymap.set('n', '<leader>e', vim.diagnostic.open_float, { desc = 'Open floating diagnostic message' })
  vim.keymap.set('n', '<leader>q', vim.diagnostic.setloclist, { desc = 'Open diagnostics list' })

  -- [[ Highlight on yank ]]
  -- See `:help vim.highlight.on_yank()`
  local highlight_group = vim.api.nvim_create_augroup('YankHighlight', { clear = true })
  vim.api.nvim_create_autocmd('TextYankPost', {
    callback = function()
      vim.highlight.on_yank()
    end,
    group = highlight_group,
    pattern = '*',
  })

  -- [[ Project keybindings ]]

  vim.keymap.set("n", "<leader>pv", vim.cmd.Ex, { desc = 'Open Explorer ([P]roject [V]iew)' })


  -- [[ QoL Keymaps ]]

  -- Remap for dealing with word wrap
  vim.keymap.set('v', 'J', ":m '>+1<CR>gv=gv")
  vim.keymap.set('v', 'K', ":m '<-2<CR>gv=gv")

  -- Center cursor when jumping half pages or searh terms
  vim.keymap.set('n', '<C-d>', "<C-d>zz")
  vim.keymap.set('n', '<C-u>', "<C-u>zz")
  vim.keymap.set('n', 'n', "nzzzv")
  vim.keymap.set('n', 'N', "Nzzzv")
    
  -- Add easier way to exit insert
  vim.keymap.set('i', 'jk', "<ESC>")

  -- Quickfix improvements: ThePrimeagen
  vim.keymap.set('n', '<C-j>', "<cmd>cprev<CR>zz")
  vim.keymap.set('n', '<C-k>', "<cmd>cnext<CR>zz")
  vim.keymap.set('n', '<leader>j', "<cmd>lprev<CR>zz")
  vim.keymap.set('n', '<leader>k', "<cmd>lnext<CR>zz")
    
  -- Don't overwrite current register: ThePrimeagen
  vim.keymap.set('x', '<leader>vp', "\"_dP")

  -- Some more void register stuff: The Primeagen
  vim.keymap.set('n', '<leader>vd', "\"_d")
  vim.keymap.set('v', '<leader>vd', "\"_d")

  -- Separate system clipboard: asbjornHaland
  vim.keymap.set('n', '<leader>y', "\"+y")
  vim.keymap.set('v', '<leader>y', "\"+y")
  vim.keymap.set('n', '<leader>Y', "\"+Y")

  -- Shorthand for search and replace: The Primeagen
  vim.keymap.set('n', '<leader>fr', [[:%s/\\<<C-r><C-w>>\\>/<C-r><C-w>/gI<Left><Left><Left>]], { desc = "[F]ind and [R]eplace" })
    
#+end_src
*** Settings
#+begin_src lua :tangle ../C02_VimConfiguration/.config/nvim/lua/gigus/settings.lua
  --[[

  =====================================================================
  ============================== OPTIONS ==============================
  =====================================================================

  --]]

  -- [[ Setting options ]]
  -- See `:help vim.o`
  -- NOTE: You can change these options as you wish!

  -- Set highlight on search
  vim.o.hlsearch = false

  -- Set incremental search
  vim.o.incsearch = true

  -- Make line numbers default
  vim.wo.number = true

  -- Make relative line numbers default
  vim.wo.relativenumber = true

  -- Enable mouse mode
  vim.o.mouse = 'a'

  -- Indenting and Tabs
  vim.o.tabstop = 4
  vim.o.softtabstop = 4
  vim.o.shiftwidth = 4
  vim.o.expandtab = true

  vim.o.smartindent = true

  -- Sync clipboard between OS and Neovim.
  --  Remove this option if you want your OS clipboard to remain independent.
  --  See `:help 'clipboard'`
  vim.o.clipboard = 'unnamedplus'

  -- Enable break indent
  vim.o.breakindent = true

  -- Linewrap
  vim.o.wrap = true

  -- Save undo history
  vim.oswapfile = false
  vim.o.backupdir = os.getenv("HOME") .. "/.dotfiles/C02_VimConfiguration/backup"
  vim.o.backup = false
  vim.o.undodir = os.getenv("HOME") .. "/.dotfiles/C02_VimConfiguration/undodir"
  vim.o.undofile = true

  -- Case-insensitive searching UNLESS \C or capital in search
  vim.o.ignorecase = true
  vim.o.smartcase = true

  -- Stay focused on cursor, never go within 8 lines of borders
  vim.o.scrolloff = 8

  -- Keep signcolumn on by default
  vim.wo.signcolumn = 'yes'

  -- Set colorcolumn - 90 chars
  vim.o.colorcolumn = "90"

  -- Decrease update time
  vim.o.updatetime = 250
  vim.o.timeoutlen = 300

  -- Set completeopt to have a better completion experience
  vim.o.completeopt = 'menuone,noselect'

  -- NOTE: You should make sure your terminal supports this
  vim.o.termguicolors = true

#+end_src
*** Colorscheme
#+begin_src lua :tangle ../C02_VimConfiguration/.config/nvim/lua/gigus/colorscheme.lua
  --[[

  =====================================================================
  =========================== COLORSCHEME =============================
  =====================================================================

  --]]
  
  local sel_colorscheme = "dracula"

  local status_ok, _ = pcall(vim.cmd.colorscheme, sel_colorscheme)
  if not status_ok then
     vim.notify("colorscheme " .. sel_colorscheme .. " not found!")
     return
  end

#+end_src
*** Lazy Package Manager
#+begin_src lua :tangle ../C02_VimConfiguration/.config/nvim/lua/gigus/lazy.lua
  --[[

  =====================================================================
  ======================= LAZY PACKAGE MANAGER ========================
  =====================================================================

  --]]

  -- [[ Install `lazy.nvim` plugin manager ]]
  --    https://github.com/folke/lazy.nvim
  --    `:help lazy.nvim.txt` for more info
  local lazypath = vim.fn.stdpath 'data' .. '/lazy/lazy.nvim'
  if not vim.loop.fs_stat(lazypath) then
    vim.fn.system {
      'git',
      'clone',
      '--filter=blob:none',
      'https://github.com/folke/lazy.nvim.git',
      '--branch=stable', -- latest stable release
      lazypath,
    }
  end
  vim.opt.rtp:prepend(lazypath)

  -- [[ Configure plugins ]]
  -- NOTE: Here is where you install your plugins.
  --  You can configure plugins using the `config` key.
  --
  --  You can also configure plugins after the setup call,
  --    as they will be available in your neovim runtime.
  require('lazy').setup({
    -- NOTE: First, some plugins that don't require any configuration

    -- Git related plugins
    'tpope/vim-fugitive',
    'tpope/vim-rhubarb',

    -- Detect tabstop and shiftwidth automatically
    'tpope/vim-sleuth',

    -- NOTE: This is where your plugins related to LSP can be installed.
    --  The configuration is done below. Search for lspconfig to find it below.
    {
      -- LSP Configuration & Plugins
      'neovim/nvim-lspconfig',
      dependencies = {
        -- Automatically install LSPs to stdpath for neovim
        'williamboman/mason.nvim',
        'williamboman/mason-lspconfig.nvim',

        -- Useful status updates for LSP
        -- NOTE: `opts = {}` is the same as calling `require('fidget').setup({})`
        { 'j-hui/fidget.nvim', opts = {} },

        -- Additional lua configuration, makes nvim stuff amazing!
        'folke/neodev.nvim',
      },
    },

    {
       -- Automatically disable LSPs on inactive windows
       "hinell/lsp-timeout.nvim",
       dependencies={ "neovim/nvim-lspconfig" },
       init = function()
          vim.g.lspTimeoutConfig = {
             -- see config below
          }
       end
    },

    {
      -- Autocompletion
      'hrsh7th/nvim-cmp',
      dependencies = {
        -- Snippet Engine & its associated nvim-cmp source
        'L3MON4D3/LuaSnip',
        'saadparwaiz1/cmp_luasnip',

        -- Adds LSP completion capabilities
        'hrsh7th/cmp-nvim-lsp',

        -- Adds a number of user-friendly snippets
        'rafamadriz/friendly-snippets',
      },
    },

    -- Useful plugin to show you pending keybinds.
    { 'folke/which-key.nvim', opts = {} },
    {
      -- Adds git related signs to the gutter, as well as utilities for managing changes
      'lewis6991/gitsigns.nvim', opts = {} 
    },

    {
      -- Theme inspired by Atom
      'navarasu/onedark.nvim',
      priority = 1000,
    --   config = function()
    --     vim.cmd.colorscheme 'onedark'
    --   end,
    },


    -- Selection of colorschems to choose
    { 'lunarvim/colorschemes', },
    {
       'folke/tokyonight.nvim',
       as = 'tokyonight',
    },
    {
       'rose-pine/neovim',
       as = 'rose-pine',
    },
    {
       'Mofiqul/dracula.nvim',
       as = 'dracula',
    },
    
    {
      -- Set lualine as statusline
      'nvim-lualine/lualine.nvim',
      -- See `:help lualine.txt`
      opts = {
        options = {
          icons_enabled = false,
          theme = 'dracula',
          component_separators = '|',
          section_separators = '',
        },
      },
    },

    {
      -- Add indentation guides even on blank lines
      'lukas-reineke/indent-blankline.nvim',
      -- Enable `lukas-reineke/indent-blankline.nvim`
      -- See `:help ibl`
      main = 'ibl',
      opts = {},
    },

    -- "gc" to comment visual regions/lines
    { 'numToStr/Comment.nvim', opts = {} },

    -- Fuzzy Finder (files, lsp, etc)
    {
      'nvim-telescope/telescope.nvim',
      branch = '0.1.x',
      dependencies = {
        'nvim-lua/plenary.nvim',
        -- Fuzzy Finder Algorithm which requires local dependencies to be built.
        -- Only load if `make` is available. Make sure you have the system
        -- requirements installed.
        {
          'nvim-telescope/telescope-fzf-native.nvim',
          -- NOTE: If you are having trouble with this installation,
          --       refer to the README for telescope-fzf-native for more instructions.
          build = 'make',
          cond = function()
            return vim.fn.executable 'make' == 1
          end,
        },
      },
    },

    {
      -- Highlight, edit, and navigate code
      'nvim-treesitter/nvim-treesitter',
      dependencies = {
        'nvim-treesitter/nvim-treesitter-textobjects',
      },
      build = ':TSUpdate',
    },

    -- See the AST for your code based on Tree-Sitter -- DEPRECATED
    --{ 'nvim-treesitter/playgound', },

    -- NVim LaTeX support
    { "lervag/vimtex", },

    -- Quick access file list
    -- { "ThePrimeagen/harpoon", },

    -- Learn vim-keybindings in a gamified way, provided by yours-truly
    { "ThePrimeagen/vim-be-good", },

    -- Add Support for Emacs Org Mode
    {
      'nvim-orgmode/orgmode',
      dependencies = {
        { 'nvim-treesitter/nvim-treesitter', lazy = true },
      },
      event = 'VeryLazy',
        
    },

    -- Make Undos better
    { "mbbill/undotree", },
    
    -- Autocomplete brackets and quotes etc., integrates with cmp
    { "windwp/nvim-autopairs", },

    -- Autocomplete brackets and quotes etc., integrates with cmp
    {'akinsho/toggleterm.nvim', version = "*", config = true},

    -- NOTE: Next Step on Your Neovim Journey: Add/Configure additional "plugins" for kickstart
    --       These are some example plugins that I've included in the kickstart repository.
    --       Uncomment any of the lines below to enable them.
    -- require 'kickstart.plugins.autoformat',
    -- require 'kickstart.plugins.debug',

    -- NOTE: The import below can automatically add your own plugins, configuration, etc from `lua/custom/plugins/*.lua`
    --    You can use this folder to prevent any conflicts with this init.lua if you're interested in keeping
    --    up-to-date with whatever is in the kickstart repo.
    --    Uncomment the following line and add your plugins to `lua/custom/plugins/*.lua` to get going.
    --
    --    For additional information see: https://github.com/folke/lazy.nvim#-structuring-your-plugins
    -- { import = 'custom.plugins' },
  }, {})

#+end_src
** After - Plugin Configuration
*** GitSigns
#+begin_src lua :tangle ../C02_VimConfiguration/.config/nvim/after/plugin/gitsigns.lua
  --[[

  =====================================================================
  ====================== GITSIGNS CONFIGURATION =======================
  =====================================================================

  --]]

  require('gitsigns').setup{
    -- See `:help gitsigns.txt`
    signs = {
      add = { text = '+' },
      change = { text = '~' },
      delete = { text = '_' }, 
      topdelete = { text = '‾' },
      changedelete = { text = '~' },
      untracked    = { text = '┆' },
    },
  
    signcolumn = true,  -- Toggle with `:Gitsigns toggle_signs`
    numhl      = false, -- Toggle with `:Gitsigns toggle_numhl`
    linehl     = false, -- Toggle with `:Gitsigns toggle_linehl`
    word_diff  = false, -- Toggle with `:Gitsigns toggle_word_diff`
    watch_gitdir = {
      follow_files = true
    },
    attach_to_untracked = true,
    current_line_blame = false, -- Toggle with `:Gitsigns toggle_current_line_blame`
    current_line_blame_opts = {
      virt_text = true,
      virt_text_pos = 'eol', -- 'eol' | 'overlay' | 'right_align'
      delay = 1000,
      ignore_whitespace = false,
      virt_text_priority = 100,
    },
    current_line_blame_formatter = '<author>, <author_time:%Y-%m-%d> - <summary>',
    sign_priority = 6,
    update_debounce = 100,
    status_formatter = nil, -- Use default
    max_file_length = 40000, -- Disable if file is longer than this (in lines)
    preview_config = {
      -- Options passed to nvim_open_win
      border = 'single',
      style = 'minimal',
      relative = 'cursor',
      row = 0,
      col = 1
    },
    yadm = {
      enable = false
    },
  
    on_attach = function(bufnr)
      local gs = package.loaded.gitsigns
  
      local function map(mode, l, r, opts)
        opts = opts or {}
        opts.buffer = bufnr
        vim.keymap.set(mode, l, r, opts)
      end
  
      -- Navigation
      map({ 'n', 'v' }, ']c', function()
        if vim.wo.diff then
          return ']c'
        end
        vim.schedule(function()
          gs.next_hunk()
        end)
        return '<Ignore>'
      end, { expr = true, desc = 'Jump to next hunk' })
  
      map({ 'n', 'v' }, '[c', function()
        if vim.wo.diff then
          return '[c'
        end
        vim.schedule(function()
          gs.prev_hunk()
        end)
        return '<Ignore>'
      end, { expr = true, desc = 'Jump to previous hunk' })
  
      -- Actions
      -- visual mode
      map('v', '<leader>hs', function()
        gs.stage_hunk { vim.fn.line '.', vim.fn.line 'v' }
      end, { desc = 'stage git hunk' })
      map('v', '<leader>hr', function()
        gs.reset_hunk { vim.fn.line '.', vim.fn.line 'v' }
      end, { desc = 'reset git hunk' })
      -- normal mode
      map('n', '<leader>hs', gs.stage_hunk, { desc = 'git stage hunk' })
      map('n', '<leader>hr', gs.reset_hunk, { desc = 'git reset hunk' })
      map('n', '<leader>hS', gs.stage_buffer, { desc = 'git Stage buffer' })
      map('n', '<leader>hu', gs.undo_stage_hunk, { desc = 'undo stage hunk' })
      map('n', '<leader>hR', gs.reset_buffer, { desc = 'git Reset buffer' })
      map('n', '<leader>hp', gs.preview_hunk, { desc = 'preview git hunk' })
      map('n', '<leader>hb', function()
        gs.blame_line { full = false }
      end, { desc = 'git blame line' })
      map('n', '<leader>hd', gs.diffthis, { desc = 'git diff against index' })
      map('n', '<leader>hD', function()
        gs.diffthis '~'
      end, { desc = 'git diff against last commit' })
  
      -- Toggles
      map('n', '<leader>tb', gs.toggle_current_line_blame, { desc = 'toggle git blame line' })
      map('n', '<leader>td', gs.toggle_deleted, { desc = 'toggle git show deleted' })
  
      -- Text object
      map({ 'o', 'x' }, 'ih', ':<C-U>Gitsigns select_hunk<CR>', { desc = 'select git hunk' })
    end,
  }
  
#+end_src
*** Org Mode Support
#+begin_src lua :tangle ../C02_VimConfiguration/.config/nvim/after/plugin/orgmode.lua
  --[[

  =====================================================================
  ====================== GITSIGNS CONFIGURATION =======================
  =====================================================================

  --]]

  require('orgmode').setup_ts_grammar()

  -- Setup orgmode
  require('orgmode').setup({
    org_agenda_files = {
       '~/Org/journal',
       '~/Org/personal-(tasks|mail|chores|contracts)-?[A-Za-z]*.org'
    },
    org_default_notes_file = '~/Projects/Notes/notes.org',
  })

#+end_src
*** LSP Server Setup
#+begin_src lua :tangle ../C02_VimConfiguration/.config/nvim/after/plugin/lsp.lua
  --[[

  =====================================================================
  ========================= LSP SERVER SETUP ==========================
  =====================================================================

  --]]

  -- [[ Configure LSP ]]
  --  This function gets run when an LSP connects to a particular buffer.
  local on_attach = function(_, bufnr)
    -- NOTE: Remember that lua is a real programming language, and as such it is possible
    -- to define small helper and utility functions so you don't have to repeat yourself
    -- many times.
    --
    -- In this case, we create a function that lets us more easily define mappings specific
    -- for LSP related items. It sets the mode, buffer and description for us each time.
    local nmap = function(keys, func, desc)
      if desc then
        desc = 'LSP: ' .. desc
      end

      vim.keymap.set('n', keys, func, { buffer = bufnr, desc = desc })
    end

    nmap('<leader>rn', vim.lsp.buf.rename, '[R]e[n]ame')
    nmap('<leader>ca', vim.lsp.buf.code_action, '[C]ode [A]ction')

    nmap('gd', require('telescope.builtin').lsp_definitions, '[G]oto [D]efinition')
    nmap('gr', require('telescope.builtin').lsp_references, '[G]oto [R]eferences')
    nmap('gI', require('telescope.builtin').lsp_implementations, '[G]oto [I]mplementation')
    nmap('<leader>D', require('telescope.builtin').lsp_type_definitions, 'Type [D]efinition')
    nmap('<leader>ds', require('telescope.builtin').lsp_document_symbols, '[D]ocument [S]ymbols')
    nmap('<leader>ws', require('telescope.builtin').lsp_dynamic_workspace_symbols, '[W]orkspace [S]ymbols')

    -- See `:help K` for why this keymap
    nmap('K', vim.lsp.buf.hover, 'Hover Documentation')
    nmap('<C-k>', vim.lsp.buf.signature_help, 'Signature Documentation')

    -- Lesser used LSP functionality
    nmap('gD', vim.lsp.buf.declaration, '[G]oto [D]eclaration')
    nmap('<leader>wa', vim.lsp.buf.add_workspace_folder, '[W]orkspace [A]dd Folder')
    nmap('<leader>wr', vim.lsp.buf.remove_workspace_folder, '[W]orkspace [R]emove Folder')
    nmap('<leader>wl', function()
      print(vim.inspect(vim.lsp.buf.list_workspace_folders()))
    end, '[W]orkspace [L]ist Folders')

    -- Create a command `:Format` local to the LSP buffer
    vim.api.nvim_buf_create_user_command(bufnr, 'Format', function(_)
      vim.lsp.buf.format()
    end, { desc = 'Format current buffer with LSP' })
  end

  -- document existing key chains
  require('which-key').register {
    ['<leader>c'] = { name = '[C]ode', _ = 'which_key_ignore' },
    ['<leader>d'] = { name = '[D]ocument', _ = 'which_key_ignore' },
    ['<leader>g'] = { name = '[G]it', _ = 'which_key_ignore' },
    ['<leader>f'] = { name = '[F]iles', _ = 'which_key_ignore' },
    ['<leader>h'] = { name = 'Git [H]unk', _ = 'which_key_ignore' },
    ['<leader>r'] = { name = '[R]ename', _ = 'which_key_ignore' },
    ['<leader>p'] = { name = '[P]roject', _ = 'which_key_ignore' },
    ['<leader>s'] = { name = '[S]earch', _ = 'which_key_ignore' },
    ['<leader>t'] = { name = '[T]oggle', _ = 'which_key_ignore' },
    ['<leader>v'] = { name = '[V]oid Register', _ = 'which_key_ignore' },
    ['<leader>w'] = { name = '[W]orkspace', _ = 'which_key_ignore' },
  }
  -- register which-key VISUAL mode
  -- required for visual <leader>hs (hunk stage) to work
  require('which-key').register({
    ['<leader>'] = { name = 'VISUAL <leader>' },
    ['<leader>h'] = { 'Git [H]unk' },
  }, { mode = 'v' })

  -- mason-lspconfig requires that these setup functions are called in this order
  -- before setting up the servers.
  require('mason').setup()
  require('mason-lspconfig').setup()

  -- Enable the following language servers
  --  Feel free to add/remove any LSPs that you want here. They will automatically be installed.
  --
  --  Add any additional override configuration in the following tables. They will be passed to
  --  the `settings` field of the server config. You must look up that documentation yourself.
  --
  --  If you want to override the default filetypes that your language server will attach to you can
  --  define the property 'filetypes' to the map in question.
  local servers = {
    -- C Server
    clangd = {},

    -- Go Server
    gopls = {},


    -- Julia Server
    julials = {},
    
    -- pyright = {},
    -- tsserver = {},

    -- SQL Server
    -- sqls = {},

    lua_ls = {
      Lua = {
        workspace = { checkThirdParty = false },
        telemetry = { enable = false },
        -- NOTE: toggle below to ignore Lua_LS's noisy `missing-fields` warnings
        -- diagnostics = { disable = { 'missing-fields' } },
      },
    },

    -- LaTeX Servers
    -- ltex-ls = {},
    texlab = {},

    -- Rust Server
    rust_analyzer = {},
    
    -- File Types
    -- html = { filetypes = { 'html', 'twig', 'hbs'} },
  }

  -- Setup neovim lua configuration
  require('neodev').setup()

  -- nvim-cmp supports additional completion capabilities, so broadcast that to servers
  local capabilities = vim.lsp.protocol.make_client_capabilities()
  capabilities = require('cmp_nvim_lsp').default_capabilities(capabilities)

  -- Ensure the servers above are installed
  local mason_lspconfig = require 'mason-lspconfig'

  mason_lspconfig.setup {
    ensure_installed = vim.tbl_keys(servers),
  }

  mason_lspconfig.setup_handlers {
    function(server_name)
      require('lspconfig')[server_name].setup {
        capabilities = capabilities,
        on_attach = on_attach,
        settings = servers[server_name],
        filetypes = (servers[server_name] or {}).filetypes,
      }
    end,
  }

  --[[
     Helper function to toggle lsp server on/off when needed
     This can significantly speed up nvim
     See: https://github.com/neovim/nvim-lspconfig/wiki/Toggle-LSP-for-current-buffer
  --]]
  local toggle_lsp_client = function()
     local buf = vim.api.nvim_get_current_buf()
     local clients = vim.lsp.get_active_clients({ bufnr = buf })
     if not vim.tbl_isempty(clients) then
        vim.cmd("LspStop")
     else
        vim.cmd("LspStart")
     end
  end

  vim.keymap.set("n", "<leader>tl", toggle_lsp_client, { desc = '[T]oggle [L]SP' })


#+end_src
*** Modeline
#+begin_src lua :tangle ../C02_VimConfiguration/.config/nvim/after/plugin/modeline.lua
  --[[

  =====================================================================
  ============================ MODELINE ===============================
  =====================================================================

  --]]
  
  -- The line beneath this is called `modeline`. See `:help modeline`
  -- vim: ts=2 sts=2 sw=2 et

#+end_src
*** Harpoon
#+begin_src lua :tangle ../C02_VimConfiguration/.config/nvim/after/plugin/harpoon.lua
  --[[

  =====================================================================
  ============================= HARPOON ===============================
  =====================================================================

  --]]

  -- local mark = require("harpoon.mark")
  -- local ui = require("harpoon.ui")

  -- vim.keymap.set("n", "<leader>fa", mark.add_file, { desc = 'Harpoon [A]dd File' })
  -- vim.keymap.set("n", "<leader>fm", ui.toggle_quick_menu, { desc = 'Harpoon [M]enu' })

  -- vim.keymap.set("n", "<leader>f1", function() ui.nav_file(1) end, { desc = 'Harpoon Goto File [1]' })
  -- vim.keymap.set("n", "<leader>f2", function() ui.nav_file(2) end, { desc = 'Harpoon Goto File [2]' })
  -- vim.keymap.set("n", "<leader>f3", function() ui.nav_file(3) end, { desc = 'Harpoon Goto File [3]' })
  -- vim.keymap.set("n", "<leader>f4", function() ui.nav_file(4) end, { desc = 'Harpoon Goto File [4]' })

#+end_src
*** Autopairs
#+begin_src lua :tangle ../C02_VimConfiguration/.config/nvim/after/plugin/autopairs.lua
    --[[

    =====================================================================
    ============================= HARPOON ===============================
    =====================================================================

    --]]


  -- Setup nvim-cmp.
  local status_ok, npairs = pcall(require, "nvim-autopairs")
  if not status_ok then
    return
  end

  npairs.setup {
    check_ts = true,
    ts_config = {
      lua = { "string", "source" },
      javascript = { "string", "template_string" },
      java = false,
    },
    disable_filetype = { "TelescopePrompt", "spectre_panel" }, -- uso ':echo &ft' to see the filetype
    fast_wrap = {
      map = "<M-e>",
      chars = { "{", "[", "(", '"', "'" },
      pattern = string.gsub([[ [%'%"%)%>%]%)%}%,] ]], "%s+", ""),
      offset = 0, -- Offset from pattern match
      end_key = "$",
      keys = "qwertyuiopzxcvbnmasdfghjkl",
      check_comma = true,
      highlight = "PmenuSel",
      highlight_grey = "LineNr",
    },
  }

  local cmp_autopairs = require "nvim-autopairs.completion.cmp"
  local cmp_status_ok, cmp = pcall(require, "cmp")
  if not cmp_status_ok then
    return
  end
  cmp.event:on("confirm_done", cmp_autopairs.on_confirm_done { map_char = { tex = "" } })
  
#+end_src

*** Undotree
#+begin_src lua :tangle ../C02_VimConfiguration/.config/nvim/after/plugin/undotree.lua
  --[[

  =====================================================================
  ============================= UNDOTREE ==============================
  =====================================================================

  --]]

  vim.keymap.set("n", "<leader>u", vim.cmd.UndotreeToggle, { desc = '[U]ndotree' })

#+end_src
*** NeoVim Autocompletion
#+begin_src lua :tangle ../C02_VimConfiguration/.config/nvim/after/plugin/nvim-cmp.lua
  --[[

  =====================================================================
  ====================== AUTO-COMPLETION SETUP ========================
  =====================================================================

  --]]
  
  -- [[ Configure nvim-cmp ]]
  -- See `:help cmp`
  local cmp = require 'cmp'
  local luasnip = require 'luasnip'
  require('luasnip.loaders.from_vscode').lazy_load()
  luasnip.config.setup {}

  cmp.setup {
    snippet = {
      expand = function(args)
        luasnip.lsp_expand(args.body)
      end,
    },
    completion = {
      completeopt = 'menu,menuone,noinsert',
    },
    mapping = cmp.mapping.preset.insert {
      ['<C-n>'] = cmp.mapping.select_next_item(),
      ['<C-p>'] = cmp.mapping.select_prev_item(),
      ['<C-d>'] = cmp.mapping.scroll_docs(-4),
      ['<C-f>'] = cmp.mapping.scroll_docs(4),
      ['<C-Space>'] = cmp.mapping.complete {},
      ['<CR>'] = cmp.mapping.confirm {
        behavior = cmp.ConfirmBehavior.Replace,
        select = true,
      },
      ['<Tab>'] = cmp.mapping(function(fallback)
        if cmp.visible() then
          cmp.select_next_item()
        elseif luasnip.expand_or_locally_jumpable() then
          luasnip.expand_or_jump()
        else
          fallback()
        end
      end, { 'i', 's' }),
      ['<S-Tab>'] = cmp.mapping(function(fallback)
        if cmp.visible() then
          cmp.select_prev_item()
        elseif luasnip.locally_jumpable(-1) then
          luasnip.jump(-1)
        else
          fallback()
        end
      end, { 'i', 's' }),
    },
    sources = {
      { name = 'nvim_lsp' },
      { name = 'luasnip' },
    },
  }

#+end_src
*** Telescope
#+begin_src lua :tangle ../C02_VimConfiguration/.config/nvim/after/plugin/telescope.lua
  --[[

  =====================================================================
  ========================= TELESCOPE CONFIG ==========================
  =====================================================================

  --]]

  -- [[ Configure Telescope ]]
  -- See `:help telescope` and `:help telescope.setup()`
  require('telescope').setup {
    defaults = {
      mappings = {
        i = {
          ['<C-u>'] = false,
          ['<C-d>'] = false,
        },
      },
    },
  }

  -- Enable telescope fzf native, if installed
  pcall(require('telescope').load_extension, 'fzf')

  -- Telescope live_grep in git root
  -- Function to find the git root directory based on the current buffer's path
  local function find_git_root()
    -- Use the current buffer's path as the starting point for the git search
    local current_file = vim.api.nvim_buf_get_name(0)
    local current_dir
    local cwd = vim.fn.getcwd()
    -- If the buffer is not associated with a file, return nil
    if current_file == '' then
      current_dir = cwd
    else
      -- Extract the directory from the current file's path
      current_dir = vim.fn.fnamemodify(current_file, ':h')
    end

    -- Find the Git root directory from the current file's path
    local git_root = vim.fn.systemlist('git -C ' .. vim.fn.escape(current_dir, ' ') .. ' rev-parse --show-toplevel')[1]
    if vim.v.shell_error ~= 0 then
      print 'Not a git repository. Searching on current working directory'
      return cwd
    end
    return git_root
  end

  -- Custom live_grep function to search in git root
  local function live_grep_git_root()
    local git_root = find_git_root()
    if git_root then
      require('telescope.builtin').live_grep {
        search_dirs = { git_root },
      }
    end
  end

  vim.api.nvim_create_user_command('LiveGrepGitRoot', live_grep_git_root, {})

  -- See `:help telescope.builtin`
  vim.keymap.set('n', '<leader>?', require('telescope.builtin').oldfiles, { desc = '[?] Find recently opened files' })
  vim.keymap.set('n', '<leader><space>', require('telescope.builtin').buffers, { desc = '[ ] Find existing buffers' })
  vim.keymap.set('n', '<leader>/', function()
    -- You can pass additional configuration to telescope to change theme, layout, etc.
    require('telescope.builtin').current_buffer_fuzzy_find(require('telescope.themes').get_dropdown {
      winblend = 10,
      previewer = false,
    })
  end, { desc = '[/] Fuzzily search in current buffer' })

  local function telescope_live_grep_open_files()
    require('telescope.builtin').live_grep {
      grep_open_files = true,
      prompt_title = 'Live Grep in Open Files',
    }
  end
  vim.keymap.set('n', '<leader>s/', telescope_live_grep_open_files, { desc = '[S]earch [/] in Open Files' })
  vim.keymap.set('n', '<leader>ss', require('telescope.builtin').builtin, { desc = '[S]earch [S]elect Telescope' })
  vim.keymap.set('n', '<leader>gf', require('telescope.builtin').git_files, { desc = 'Search [G]it [F]iles' })
  vim.keymap.set('n', '<leader>sf', require('telescope.builtin').find_files, { desc = '[S]earch [F]iles' })
  vim.keymap.set('n', '<leader>sh', require('telescope.builtin').help_tags, { desc = '[S]earch [H]elp' })
  vim.keymap.set('n', '<leader>sw', require('telescope.builtin').grep_string, { desc = '[S]earch current [W]ord' })
  vim.keymap.set('n', '<leader>sg', require('telescope.builtin').live_grep, { desc = '[S]earch by [G]rep' })
  vim.keymap.set('n', '<leader>sG', ':LiveGrepGitRoot<cr>', { desc = '[S]earch by [G]rep on Git Root' })
  vim.keymap.set('n', '<leader>sd', require('telescope.builtin').diagnostics, { desc = '[S]earch [D]iagnostics' })
  vim.keymap.set('n', '<leader>sr', require('telescope.builtin').resume, { desc = '[S]earch [R]esume' })

  local builtin = require('telescope.builtin')
  vim.keymap.set('n', '<leader>ff', builtin.find_files, { desc = '[F]ind [F]iles' })
  vim.keymap.set('n', '<leader>fg', builtin.live_grep, { desc = '[F]ind [G]rep' })
  vim.keymap.set('n', '<leader>fb', builtin.buffers, { desc = '[F]ind [B]uffers' })
  vim.keymap.set('n', '<leader>fh', builtin.help_tags, { desc = '[F]ind [H]elp Tags' })
  vim.keymap.set('n', '<leader>fs', function()
                    builtin.grep_string({ search = vim.fn.input("Grep > ") });
  end, {desc = '[F]ind [S]earch string' })
  vim.keymap.set('n', '<C-p>', builtin.git_files, { desc = 'Search [G]it [F]iles' })

#+end_src
*** Toggleterm
#+begin_src lua :tangle ../C02_VimConfiguration/.config/nvim/after/plugin/toggleterm.lua
  --[[

  =====================================================================
  ======================== TOGGLETERM CONFIG ==========================
  =====================================================================

  --]]

  -- [[ Configure toggleterm ]]

  local status_ok, toggleterm = pcall(require, "toggleterm")
  if not status_ok then
     return
  end

  toggleterm.setup({
    -- size can be a number or function which is passed the current terminal
    -- size = 20
    function(term)
      if term.direction == "horizontal" then
        return 15
      elseif term.direction == "vertical" then
        return vim.o.columns * 0.4
      elseif term.direction == "float" then
        return 20
      end
    end,
    open_mapping = [[<c-\>]],
    hide_numbers = true, -- hide the number column in toggleterm buffers
    shade_filetypes = {},
    shade_terminals = true, -- NOTE: this option takes priority over highlights specified so if you specify Normal highlights you should set this to false
    shading_factor = '2', -- the percentage by which to lighten terminal background, default: -30 (gets multiplied by -3 if background is light)
    insert_mappings = true, -- whether or not the open mapping applies in insert mode
    persist_size = true,
    direction = 'float', -- | 'horizontal' | 'tab' | 'vertical',
    close_on_exit = true, -- close the terminal window when the process exits
    start_in_insert = true,
    terminal_mappings = true, -- whether or not the open mapping applies in the opened terminals
    persist_mode = true, -- if set to true (default) the previous terminal mode will be remembered
    auto_scroll = true, -- automatically scroll to the bottom on terminal output
    autochdir = false, -- when neovim changes it current directory the terminal will change it's own when next it's opened


    -- on_create = fun(t: Terminal), -- function to run when the terminal is first created
    -- on_open = fun(t: Terminal), -- function to run when the terminal opens
    -- on_close = fun(t: Terminal), -- function to run when the terminal closes
    -- on_stdout = fun(t: Terminal, job: number, data: string[], name: string) -- callback for processing output on stdout
    -- on_stderr = fun(t: Terminal, job: number, data: string[], name: string) -- callback for processing output on stderr
    -- on_exit = fun(t: Terminal, job: number, exit_code: number, name: string) -- function to run when terminal process exits

    -- Change the default shell. Can be a string or a function returning a string
    shell = vim.o.shell,

    highlights = {
      -- highlights which map to a highlight group name and a table of it's values
      -- NOTE: this is only a subset of values, any group placed here will be set for the terminal window split
      -- Normal = {
      --   guibg = "<VALUE-HERE>",
      -- },
      -- NormalFloat = {
      --   link = 'Normal'
      -- },
      -- FloatBorder = {
      --   guifg = "<VALUE-HERE>",
      --   guibg = "<VALUE-HERE>",
      -- },
    },
    
    -- This field is only relevant if direction is set to 'float'
    float_opts = {
       
      -- The border key is *almost* the same as 'nvim_open_win'
      -- see :h nvim_open_win for details on borders however
      -- the 'curved' border is a custom border type
      -- not natively supported but implemented in this plugin.
      border = 'curved', -- | 'single' | 'double' | 'shadow' | ... other options supported by win open

      -- like `size`, width and height can be a number or function which is passed the current terminal
      winblend = 0,

      -- width = <value>,
      -- height = <value>,
      -- zindex = <value>,

      highlights = {
         border = "Normal",
         background = "Normal",
      },
    },
    
    winbar = {
      enabled = false,
      name_formatter = function(term) --  term: Terminal
        return term.name
      end
    },
  })

  function _G.set_terminal_keymaps()
     local opts = {noremap = true}
     vim.api.nvim_buf_set_keymap(0, 't', '<esc>', [[<C-\><C-n>]], opts)
     vim.api.nvim_buf_set_keymap(0, 't', 'jk', [[<C-\><C-n>]], opts)
     vim.api.nvim_buf_set_keymap(0, 't', '<C-h>', [[<C-\><C-n><C-W>h]], opts)
     vim.api.nvim_buf_set_keymap(0, 't', '<C-h>', [[<C-\><C-n><C-W>j]], opts)
     vim.api.nvim_buf_set_keymap(0, 't', '<C-h>', [[<C-\><C-n><C-W>k]], opts)
     vim.api.nvim_buf_set_keymap(0, 't', '<C-h>', [[<C-\><C-n><C-W>l]], opts)
  end

  vim.cmd('autocmd! TermOpen term://* lua set_terminal_keymaps()')

  local Terminal = require("toggleterm.terminal").Terminal
  local lazygit = Terminal:new({ cmd = "lazygit", hidden = true })

  function _LAZYGIT_TOGGLE()
	lazygit:toggle()
  end
  
  local node = Terminal:new({ cmd = "node", hidden = true })
  
  function _NODE_TOGGLE()
  	node:toggle()
  end
  
  local ncdu = Terminal:new({ cmd = "ncdu", hidden = true })
  
  function _NCDU_TOGGLE()
  	ncdu:toggle()
  end
  
  local htop = Terminal:new({ cmd = "htop", hidden = true })
  
  function _HTOP_TOGGLE()
  	htop:toggle()
  end
  
  local python = Terminal:new({ cmd = "python", hidden = true })
  
  function _PYTHON_TOGGLE()
  	python:toggle()
  end

        
#+end_src
*** Tree-Sitter
#+begin_src lua :tangle ../C02_VimConfiguration/.config/nvim/after/plugin/treesitter.lua
    --[[

  =====================================================================
  ======================== TREE-SITTER CONFIG =========================
  =====================================================================

  --]]
    
  -- [[ Configure Treesitter ]]
  -- See `:help nvim-treesitter`
  -- Defer Treesitter setup after first render to improve startup time of 'nvim {filename}'
  vim.defer_fn(function()
    require('nvim-treesitter.configs').setup {
      -- Add languages to be installed here that you want installed for treesitter
      ensure_installed = {
         'c',
         'cpp',
         'go',
         'lua',
         'python',
         'rust',
         'ruby',
         'perl',
         'julia',
         'tsx',
         'php',
         'commonlisp',
         'java',
         'javascript',
         'typescript',
         'r',
         'ocaml',
         'sql',
         'zig',
         'bash',
         'latex',
         'ledger',
         'vim',
         'vimdoc',
         'llvm',
         'nix',
         'regex',
         
         -- File Types
         'html',
         'http',
         'xml',
         'css',
         'csv',
         'tsv',
         'psv',
         'json',
         'json5',
         'yaml',
         'toml',
         'gitignore',
         'ssh_config',
         'org',
         'make',
         'cmake',
         'meson',
         'ninja',
         'dockerfile',
         'devicetree',
         'kconfig',
      },

      -- Autoinstall languages that are not installed. Defaults to false (but you can change for yourself!)
      auto_install = true,

      highlight = {
        enable = true,
        additional_vim_regex_highlighting = { 'org' },
      },

      autopais = {
         enable = true,
      },

      indent = { enable = true },
      incremental_selection = {
        enable = true,
        keymaps = {
          init_selection = '<c-space>',
          node_incremental = '<c-space>',
          scope_incremental = '<c-s>',
          node_decremental = '<M-space>',
        },
      },
      textobjects = {
        select = {
          enable = true,
          lookahead = true, -- Automatically jump forward to textobj, similar to targets.vim
          keymaps = {
            -- You can use the capture groups defined in textobjects.scm
            ['aa'] = '@parameter.outer',
            ['ia'] = '@parameter.inner',
            ['af'] = '@function.outer',
            ['if'] = '@function.inner',
            ['ac'] = '@class.outer',
            ['ic'] = '@class.inner',
          },
        },
        move = {
          enable = true,
          set_jumps = true, -- whether to set jumps in the jumplist
          goto_next_start = {
            [']m'] = '@function.outer',
            [']]'] = '@class.outer',
          },
          goto_next_end = {
            [']M'] = '@function.outer',
            [']['] = '@class.outer',
          },
          goto_previous_start = {
            ['[m'] = '@function.outer',
            ['[['] = '@class.outer',
          },
          goto_previous_end = {
            ['[M'] = '@function.outer',
            ['[]'] = '@class.outer',
          },
        },
        swap = {
          enable = true,
          swap_next = {
            ['<leader>a'] = '@parameter.inner',
          },
          swap_previous = {
            ['<leader>A'] = '@parameter.inner',
          },
        },
      },
    }
  end, 0)

#+end_src
