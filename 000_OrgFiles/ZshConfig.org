#+Title: Zsh Config
#+PROPERTY: header-args:bash :tangle ../.dotfiles/D02_Zsh/.zshrc :mkdirp yes
#+auto_tangle: t

* TOC

+ [[*General][General]]
  - [[*Color][Color]]
  - [[*History][History]]
+ [[*UI Setup][UI Setup]]
  - [[*Prompt][Prompt]]
+ [[*Completion][Completion]]
+ [[*Vim-like Editing][Vim-like Editing]]
  - [[*Tab Completion Menu][Tab Completion Menu]]
  - [[*Edit Input][Edit Input]]
+ [[*Aliases and Shortcuts][Aliases and Shortcuts]]
+ [[*Special Control Bindings][Special Control Bindings]]
+ [[*Vterm Support][Vterm Support]]
+ [[*Plugins][Plugins]]
 
* General

#+begin_src bash
  #----------------------------------------------------------------------------------------------------------------------
  #  _________  _   _ ____   ____ 
  # |__  / ___|| | | |  _ \ / ___|
  #   / /\___ \| |_| | |_) | |    
  #  / /_ ___) |  _  |  _ <| |___ 
  # /____|____/|_| |_|_| \_\\____|
  #                               
  # - Configuration for Zsh, the enhanced shell -
  # Source:         - .dotfiles/000_OrgFiles/ZshConfig.org
  # Target:         - .dotfiles/D02_Zsh/.zshrc
  # Author Email:   - randomly.ventilates@simplelogin.co
  # Author GitHub:  - https://github.com/RastiGiG/
  #----------------------------------------------------------------------------------------------------------------------    

  # If not running interactively, don't do anything
    [[ $- != *i* ]] && return

#+end_src

** Color

#+begin_src bash

  # Enable colors and change prompt:
  autoload -U colors && colors

#+end_src

** History

#+begin_src bash
  # Don't put duplicate lines or lines starting with spaces into the history
  HISTCONTROL=ignoreboth
  # Add Time String to History
  HISTTIMEFORMAT="%Y-%m-%d %T "

  # History in cache directory:
  HISTSIZE=3000
  SAVEHIST=3000
  HISTFILE=~/.cache/zsh/history
#+end_src

* UI Setup

** Prompt

I have spaceship setup as a prompt. I might add different sections for different prompts later to switch between depending on preferences

#+begin_src bash

  SPACESHIP_PROMPT_ADD_NEWLINE=false
  SPACESHIP_PROMPT_SEPARATE_LINE=false
  SPACESHIP_CHAR_SYMBOL=❯
  SPACESHIP_CHAR_SUFFIX=" "
  SPACESHIP_HG_SHOW=false
  SPACESHIP_PACKAGE_SHOW=false
  SPACESHIP_NODE_SHOW=false
  SPACESHIP_RUBY_SHOW=false
  SPACESHIP_ELM_SHOW=false
  SPACESHIP_ELIXIR_SHOW=false
  SPACESHIP_XCODE_SHOW_LOCAL=false
  SPACESHIP_SWIFT_SHOW_LOCAL=false
  SPACESHIP_GOLANG_SHOW=false
  SPACESHIP_PHP_SHOW=false
  SPACESHIP_RUST_SHOW=false
  SPACESHIP_JULIA_SHOW=false
  SPACESHIP_DOCKER_SHOW=false
  SPACESHIP_DOCKER_CONTEXT_SHOW=false
  SPACESHIP_AWS_SHOW=false
  SPACESHIP_CONDA_SHOW=false
  SPACESHIP_VENV_SHOW=false
  SPACESHIP_PYENV_SHOW=false
  SPACESHIP_DOTNET_SHOW=false
  SPACESHIP_EMBER_SHOW=false
  SPACESHIP_KUBECONTEXT_SHOW=false
  SPACESHIP_TERRAFORM_SHOW=false
  SPACESHIP_TERRAFORM_SHOW=false
  SPACESHIP_VI_MODE_SHOW=false
  SPACESHIP_JOBS_SHOW=false

  # Spaceship Prompt
  autoload -U promptinit; promptinit
  prompt spaceship

#+end_src
* Completion

#+begin_src bash

  # Basic auto/tab complete:
  autoload -U compinit && compinit -u
  zstyle ':completion:*' menu select
  # Auto completion with case in
  zstyle ':completion:*' matcher-list '' 'm:{a-zA-Z}={A-Za-z}' 'r:|[._-]=*' 'l:|=* r:|=*'

  zmodload zsh/complist
  compinit
  _comp_options+=(globdots)		# Include hidden files.

#+end_src

* Vim-like Editing

The next couple of settings are very helpful when using vim mode in zsh. If you don't want to do that, comment out this whole block.
Settings include cursor appearance in different vi modes, as well as ESC timeout
MIND THE ORDER:
Enabling vim mode needs to be done first (obviously) -> bindkey -v

#+begin_src bash

  # vi mode
  bindkey -v

  # set timeout for ESC, so zsh waits for input -> Keybindings
  export KEYTIMEOUT=5                 # Used to be 1 to avoid an old bug


  # Change cursor shape for different vi modes.
  function zle-keymap-select {
      if [[ ${KEYMAP} == vicmd ]] ||
             [[ $1 = 'block' ]]; then
          echo -ne '\e[1 q'
      elif [[ ${KEYMAP} == main ]] ||
               [[ ${KEYMAP} == viins ]] ||
               [[ ${KEYMAP} = '' ]] ||
               [[ $1 = 'beam' ]]; then
          echo -ne '\e[5 q'
      fi
  }
  zle -N zle-keymap-select

  # Set up insert mode
  zle-line-init() {
      zle -K viins # initiate `vi insert` as keymap (can be removed if `bindkey -V` has been set elsewhere)
      echo -ne "\e[5 q"
  }
  zle -N zle-line-init

  # Set up beam shape cursor
  echo -ne '\e[5 q' # Use beam shape cursor on startup.
  preexec() { echo -ne '\e[5 q' ;} # Use beam shape cursor for each new prompt.

#+end_src

**  Tab Completion Menu

#+begin_src bash

    # Use vim keys in tab complete menu:
    bindkey -M menuselect 'h' vi-backward-char
    bindkey -M menuselect 'j' vi-down-line-or-history
    bindkey -M menuselect 'k' vi-up-line-or-history
    bindkey -M menuselect 'l' vi-forward-char
    bindkey -M menuselect 'left' vi-backward-char
    bindkey -M menuselect 'down' vi-down-line-or-history
    bindkey -M menuselect 'up' vi-up-line-or-history
    bindkey -M menuselect 'right' vi-forward-char
    # Fix backspace bug when switching modes
    bindkey -v '^?' backward-delete-char

#+end_src

**  Edit Input

#+begin_src bash

  # Edit line in vim (or nvim, see EDITOR var) with ctrl-e:
  autoload edit-command-line; zle -N edit-command-line
  bindkey '^e' edit-command-line

#+end_src

* Aliases and Shortcuts

First tell zsh to load the shortcuts and alias file, if one exists. The first version is a more elegant way of doing this.
It searches all files in ~/.config/shellconfig/, meaning it only sources files if they exist. You can also do it the second way, which can be specified for each file individually, but needs to check for each file too.

#+begin_src bash

  # Load and source shell configs (aliases, shortcuts, ...)
  for f in ~/.config/shellconfig/*; do source "$f"; done

  # Load aliases and shortcuts if existent.
  # [ -f "$HOME/.config/shellconfig/shortcutrc" ] && source "$HOME/.config/shellconfig/shortcutrc"
  # [ -f "$HOME/.config/shellconfig/aliasrc" ] && source "$HOME/.config/shellconfig/aliasrc"

#+end_src

* Special Control Bindings

#+begin_src bash

  # Control bindings for programms
  bindkey -s "^g" "lc\n"
  bindkey -s "^h" "history\n"
  bindkey -s "^l" "clear\n"

#+end_src
* Vterm Support

The function below helps communication between the shell and vterm

#+begin_src bash

  vterm_printf(){
      if [ -n "$TMUX" ] && ([ "${TERM%%-*}" = "tmux" ] || [ "${TERM%%-*}" = "screen" ] ); then
          # Tell tmux to pass the escape sequences through
          printf "\ePtmux;\e\e]%s\007\e\\" "$1"
      elif [ "${TERM%%-*}" = "screen" ]; then
          # GNU screen (screen, screen-256color, screen-256color-bce)
          printf "\eP\e]%s\007\e\\" "$1"
      else
          printf "\e]%s\e\\" "$1"
      fi
  }

#+end_src

* Plugins

Some plugins are better loaded last, which is why this section is at the end

#+begin_src bash

  # Load zsh-syntax-highlighting; should be last.
  source /usr/share/zsh/plugins/zsh-syntax-highlighting/zsh-syntax-highlighting.zsh 2>/dev/null
  # Suggest aliases for commands, useful if you can't remember your setup
  source /usr/share/zsh/plugins/zsh-you-should-use/you-should-use.plugin.zsh 2>/dev/null
  # Search repo for programs and commands that can't be found
  source /usr/share/doc/pkgfile/command-not-found.zsh 2>/dev/null

#+end_src

