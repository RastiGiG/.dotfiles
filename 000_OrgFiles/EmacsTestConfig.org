#+TITLE: Personal Emacs Test Configuration
#+PROPERTY: header-args:emacs-lisp :tangle ../C01_EmacsConfiguration/.emacs-test/init.el :mkdirp yes
#+STARTUP: hideblocks show2levels

* Personal Emacs Configuration

The following variables are used to tweak some of the configuration pieces for use in the live streams so you might need to adjust them for your local machine if you try to use this configuration directly.

#+begin_src emacs-lisp

  ;;   _____ __  __    _    ____ ____  
  ;;  | ____|  \/  |  / \  / ___/ ___| 
  ;;  |  _| | |\/| | / _ \| |   \___ \ 
  ;;  | |___| |  | |/ ___ \ |___ ___) |
  ;;  |_____|_|  |_/_/   \_\____|____/ 
  ;;                                   

  ;; NOTE: init.el is generated from EmacsTestConfig.org.
   ;; Please change your settings in that file
   ;; using Emacs and init.el will be generated automatically!

#+end_src


** Setting Up Needed Variables

#+begin_src emacs-lisp
  ;; Setting Variables
  ;; for better customization and readability

  ;; Save Dotfiles Dirs for later use
  (setq pet/dotfiles-dir
        (expand-file-name
         (convert-standard-filename
         "~/.dotfiles/")))
  (setq pet/dotfiles-emacsconfig-dir
          (concat pet/dotfiles-dir
           "C01_EmacsConfiguration/"))

  ;; Adjust font size to match your system
  (defvar pet/default-font-size 140)
  (defvar pet/default-variable-font-size 120)

#+end_src

* Package System Setup

Emacs has a built in package manager but it doesn't make it easy to automatically install packages on a new system the first time you pull down your configuration.  [[https://github.com/jwiegley/use-package][use-package]] is a really helpful package used in this configuration to make it a lot easier to automate the installation and configuration of everything else we use.

We also use ~straight.el~ to manage our packages instead of ~package.el~, because it allows for more detailed customization and enables more streamlined installation of packages from ~github~ or ~gitLab~, that are not yet part of *elpa* or *melpa*.
The *bootstrap* script is needed to install straight.el without the need for package.el. It should work cross platform without the need to update anytime soon. It's recommended by the authors to use. If straight.el is already installed, the script won't run again!
A guide from ~System Crafters~ to =straight.el= can be found [[https://systemcrafters.cc/advanced-package-management/using-straight-el/][here]].

If you set up ~straight.el~ with ~use-package~ (straight-use-package 'use-package) you have to replace =:ensure= with =:straight=

#+begin_src emacs-lisp

  ;; bootstrap script to install straight.el
  (defvar bootstrap-version)
  (let ((bootstrap-file
         (expand-file-name "straight/repos/straight.el/bootstrap.el" user-emacs-directory))
        (bootstrap-version 5))
    (unless (file-exists-p bootstrap-file)
      (with-current-buffer
          (url-retrieve-synchronously
           "https://raw.githubusercontent.com/raxod502/straight.el/develop/install.el"
           'silent 'inhibit-cookies)
        (goto-char (point-max))
        (eval-print-last-sexp)))
    (load bootstrap-file nil 'nomessage))

  ;; Use straight.el for use-package expressions
  (straight-use-package 'use-package)

  ;; Make sure to always install packages (pendant to use-package-always-ensure)
  (setq straight-use-package-by-default t)

#+end_src

* Basic UI Configuration

This section configures basic UI settings that remove unneeded elements to make Emacs look a lot more minimal and modern.  If you're just getting started in Emacs, the menu bar might be helpful so you can remove the =(menu-bar-mode -1)= line if you'd like to still see that.

#+begin_src emacs-lisp
  ;; A few basic settings

  (setq inhibit-startup-message t)

  (scroll-bar-mode -1)        ; Disable visible scrollbar
  (tool-bar-mode -1)          ; Disable the toolbar
  (tooltip-mode -1)           ; Disable tooltips
  (set-fringe-mode 10)        ; Give some breathing room

  (menu-bar-mode -1)          ; Disable the menu bar

  ;; Start Emacs in Fullscreen mode
  (add-hook 'emacs-startup-hook 'toggle-frame-maximized)

  ;; Set default Encoding to UTF-8
  (set-language-environment "UTF-8")
  (set-default-coding-systems 'utf-8)

  ;; Set up the visible bell
  (setq visible-bell t)

  (column-number-mode)
  (global-display-line-numbers-mode t)

  ;; Disable line numbers for some modes
  (dolist (mode '(org-mode-hook
                  term-mode-hook
                  vterm-mode-hook
                  shell-mode-hook
                  eshell-mode-hook
                  treemacs-mode))
    (add-hook mode (lambda () (display-line-numbers-mode 0))))

#+end_src

** Font Configuration

These ~Fonts~ are using the =pet/default-font-size= variable defined earlier
#+begin_src emacs-lisp

  ;; Set default font face
  (set-face-attribute 'default nil :font "Iosevka" :height pet/default-font-size)

  ;; Set the fixed pitch face
  (set-face-attribute 'fixed-pitch nil :font "Iosevka" :height pet/default-font-size)

  ;; Set the variable pitch face
  (set-face-attribute 'variable-pitch nil :font "Cantarell" :height pet/default-font-size :weight 'regular)

#+end_src

* Quality of Live Adjustments

** Keeping Folders Clean
*** Backup Files

:NOTE:
Can't seem to get these settings to work, need to look into it further
:END:

~Backup Files~ are files with a ="\~"= at the end: =Emacs.org~=
First we are gonna set the the directory for our backup files, to store them in a single place instead of all over the system
More info here: [[https://www.gnu.org/software/emacs/manual/html_node/emacs/Backup.html]]

#+begin_src emacs-lisp
  (setq backup-directory-alist `(("." . ,(expand-file-name "tmp/backups/" user-emacs-directory))))
#+end_src

*** Auto Save Files

~Auto Save Files~ are files with ="#"= on both ends: like =#Emacs.org#=. Next we are gonna save auto save files to a centralized location
#+begin_src emacs-lisp
  ;; auto-save-mode doesn't create the path automatically!
  (make-directory (expand-file-name "tmp/auto-saves" user-emacs-directory) t)
  
  ;; default for auto-save-list-file-prefix is "~/.emacs.d/auto-save-list/.saves~"
  ;; this moves it to a more centralized location (tmp)
  (setq auto-save-list-file-prefix (expand-file-name "tmp/auto-saves/sessions/" user-emacs-directory)
        auto-save-file-name-transforms `((".*" ,(expand-file-name "tmp/auto-saves/" user-emacs-directory) t)))
#+end_src

** Calender

#+begin_src emacs-lisp

  ;; Show Calendar on StartUp                      
  (calendar)

  ;; set date format to %DD-%MM-%YYYY
  (setq european-calender-style 't)

#+end_src

** Macros

#+begin_src emacs-lisp

    ; Setup file containing global macros
    (load-file
     (concat pet/dotfiles-emacsconfig-dir
             "macros/global.macs")) 

    ;; Set of keybindings for defined macros
    ;; Make sure to have a definition of the macro in your /macros folder
    (global-set-key "\C-x\C-kT" 'transpose-names)

#+end_src
** Booksmarks

Setup a location for your bookmarks-file

#+begin_src emacs-lisp
  ;; Set Location for bookmarks file/s
  (setq bookmark-default-fil
        (concat pet/dotfiles-emacsconfig-dir
                "bookmarks"))
#+end_src

** Abbreviations

#+begin_src emacs-lisp

  ;; Activate Abbrev Mode by default
  (setq-default abbrev-mode t)

  ;; Set Location and Name of Abbrev file
  (setq abbrev-file-name
        (concat pet/dotfiles-emacsconfig-dir
                "abbrev_defs"))

  ;; Save Abbrevs when saving Files
  (setq save-abbrevs t)

#+end_src

** YASnippets

Load ~package~ =yasnippets= (should already come preinstalled, invocation is just to do the configuration)
Set the folder for snippets to be saved
Enable YASnippets globally
Documentation can be found here: [[https://github.com/joaotavora/yasnippet]]

#+begin_src emacs-lisp
  (setq pet/yasnippet-dir
        (concat pet/dotfiles-emacsconfig-dir
                "snippets"))

  ;; Yasnippets
  (use-package yasnippet
    :config
    ;; Set Yasnippet dir
    (setq yas-snippet-dirs '(pet/yasnippet-dir))

    ;; Activate Yasnippets globally
    (yas-global-mode 1)

    ;; Enable snippets being shared between modes
    (add-hook 'yas-minor-mode-hook
              (lambda ()
                (yas-activate-extra-mode
                 'fundamental-mode))))

#+end_src

** Multiple Cursors

~Multiple Cursors~ are a must for *modern editors*.
Obviously [[id:3cf0fa83-18b3-4206-a109-f4606a94b8c1][Emacs]] has a package for that too:
#+begin_src emacs-lisp
  ;; Multiple cusors are a must. Make <return> insert a newline; multiple-cursors-mode can still be disabled with C-g.
  (use-package multiple-cursors
    :config
    (setq mc/always-run-for-all 1)
    (global-set-key (kbd "C-S-c C-S-c")
                    'mc/edit-lines)
    (global-set-key (kbd "C-<")
                    'mc/mark-previous-like-this)
    (global-set-key (kbd "C->")
                    'mc/mark-next-like-this)
    (global-set-key (kbd "C-c M-<")
                    'mc/mark-all-like-this)
    (global-set-key (kbd "s-D")
                    'mc/mark-all-dwim)
    (define-key mc/keymap (kbd
                           "<return>") nil))
#+end_src

* Keybinding Configuration

 [[https://github.com/noctuid/general.el][general.el]] is used for easy keybinding configuration that integrates well with =which-key=.

#+begin_src emacs-lisp
  ;; Setup general for easier key config
  (use-package general
    :config
    (general-create-definer pet/leader-keys
    :prefix "C-."
    :global-prefix "C-.")

    (pet/leader-keys
     "t"  '(:ignore t :which-key "toggles")
     "tt" '(counsel-load-theme
            :which-key "choose theme")))
#+end_src

* Extended UI Configuration
** Command Log Mode

[[https://github.com/lewang/command-log-mode][command-log-mode]] is useful for displaying a panel showing each key binding you use in a panel on the right side of the frame.  Great for live streams and screencasts!

#+begin_src emacs-lisp
  ;; Enable Command Log Mode
  (use-package command-log-mode)
#+end_src

** Doom Themes

[[https://github.com/hlissner/emacs-doom-themes][doom-themes]] is a great set of themes with a lot of variety and support for many different Emacs modes.  Taking a look at the [[https://github.com/hlissner/emacs-doom-themes/tree/screenshots][screenshots]] might help you decide which one you like best.  You can also run =M-x counsel-load-theme= to choose between them easily.

#+begin_src emacs-lisp
  ;; Load Doom Themes
  (use-package doom-themes
    ;; :init (load-theme 'doom-dracula t)
    )
#+end_src

** Doom Modeline

[[https://github.com/seagle0128/doom-modeline][doom-modeline]] is a very attractive and rich (yet still minimal) mode line configuration for [[id:3cf0fa83-18b3-4206-a109-f4606a94b8c1][Emacs]].  The default configuration is quite good but you can check out the [[https://github.com/seagle0128/doom-modeline#customize][configuration options]] for more things you can enable or disable.

:NOTE:
The *first time* you load your configuration on a *new machine*, you'll need to run =M-x all-the-icons-install-font= so that mode line icons display correctly.
:END:

#+begin_src emacs-lisp
  ;; Use all-the-icons
  ;;required for doom modeling
  (use-package all-the-icons)

  ;; Load doom modeline
  (use-package doom-modeline
    ;; Activate Doom Modeline
    ;; :init (doom-modeline-mode 1)
    :custom ((doom-modeline-height 15)))
#+end_src

** Which Key

[[https://github.com/justbur/emacs-which-key][which-key]] is a useful UI panel that appears when you start pressing any key binding in [[id:3cf0fa83-18b3-4206-a109-f4606a94b8c1][Emacs]] to offer you all possible completions for the prefix.  For example, if you press =C-c= (hold control and press the letter =c=), a panel will appear at the bottom of the frame displaying all of the bindings under that prefix and which command they run.  This is very useful for learning the possible key bindings in the mode of your current buffer.

#+begin_src emacs-lisp
  ;; Load which-key
  ;; Loads a more helpful UI Completion buffer 
  (use-package which-key
    :init (which-key-mode)
    :diminish which-key-mode
    :config
    (setq which-key-idle-delay 1))
#+end_src

** Tab Bar Mode

Here we configure =Tab Bar Mode= to work in a specific way.
First we want new tabs to always open with a *scratch* buffer

:NOTE:
=Tab Bar Mode= was added in ~Emacs 27~
:END:
#+begin_src emacs-lisp
  ;; Tab Bar Mode Setting

  ;; Set new tab to scratch buffer
  (setq tab-bar-new-tab-choice "*scratch*")
  ;; right is default -
  ;; change if you dont like that
  ;; (tab-bar-new-tab-to right)                

  ;; Set the name of the tab to
  ;; match the current buffer
  ;; (setq tab-bar-tab-name-function
  ;;       tab-bar-current-tab-name)

    ;; Keyboard Rules
    ;; Remove Tab Bar Buttons
    (setq tab-bar-close-button-show nil
          tab-bar-new-button-show nil
          ;; tab-bar-button-relief               ;; controls outline of buttons
          ;; tab-bar-face tab-bar-tab            ;; configure tab face (bgcolor etc.)
          )

    ;; tab bar is not automatically shown
    ;; (set 1 to enable)
    (setq tab-bar-show nil)                      

    ;; Helper function to get only the name
    ;; of current tab
    (defun pet/current-tab-name ()
      (alist-get 'name (tab-bar--current-tab)))
#+end_src

** Treemacs Mode

=Treemacs= is a handy tree-style *file directory viewer* that's very similar to what you are used from commercial IDEs.
It's got good integration with =Projectile=

#+begin_src emacs-lisp
  (use-package treemacs
    :bind
    (:map global-map
          ([f8] . treemacs)
          ("C-<f8>" . treemacs-select-window))
    :config
    ;; ensure that treemacs-buffer is
    ;; ignored when switching windows 
    (setq treemacs-is-never-other-window t)

    ;; Add shortcut for treemacs to
    ;; personal keyspace
    (pet/leader-keys
      "tt" 'treemacs
      "tw" 'treemacs-select-window)
    )
#+end_src

* Elfeed - Emacs RSS Feed

~Elfeed~ is a package, that enables you to see your ~RSS Feed~ in [[id:3cf0fa83-18b3-4206-a109-f4606a94b8c1][Emacs]]. We also set up ~elfeed-score~
Great inspirations for ~Elfeed~ Configurations can be found here:
- [[https://protesilaos.com/emacs/dotemacs#h:0cd8ddab-55d1-40df-b3db-1234850792ba][Protesilaos.com]]
- [[https://github.com/jkitchin/scimax/blob/master/scimax-elfeed.el][GitHub.com: John Kitchin - Scimax-Elfeed]]
#+begin_src emacs-lisp
  (use-package elfeed
    :bind (("C-c f" . elfeed)
           :map elfeed-search-mode-map
           ("n" . (lambda () (interactive) (next-line) (call-interactively 'elfeed-search-show-entry)))
           ("p" . (lambda () (interactive) (previous-line) (call-interactively 'elfeed-search-show-entry)))
           ("m" . (lambda () (interactive) (apply 'elfeed-search-toggle-all '(star))))
           ("g" . elfeed-update)
           ("G" . elfeed-search-update--force)
           ;;:map elfeed-show-mode-map
           ;;("w" . elfeed-show-yank))
       )
  :config
  (setq elfeed-show-entry-switch 'display-buffer)
  (setq elfeed-search-remain-on-entry t)
   ;; Various Necessary/Helpful Settings
  (setq elfeed-use-curl t)
  (setq elfeed-curl-max-connections 10)
  (setq elfeed-db-directory
        (concat pet/dotfiles-emacsconfig-dir
                "elfeed/"))
  (setq elfeed-enclosure-default-dir
        "~/Downloads/")
  (setq elfeed-search-filter
        "@4-months-ago +unread")
  (setq elfeed-sort-order 'descending)
  (setq elfeed-search-clipboard-type 'CLIPBOARD)
  (setq elfeed-search-title-max-width 150)
  (setq elfeed-search-title-min-width 30)
  (setq elfeed-search-trailing-width 25)
  (setq elfeed-show-truncate-long-urls t)
  (setq elfeed-show-unique-buffers t)
  (setq elfeed-search-date-format
        '("%F %R" 16 :left))

  ;; Snippet for periodic update for feeds
  ;; (3 mins since Emacs start, then every
  ;; half hour)
  (run-at-time 180 1800
               (lambda ()
                 (unless elfeed-waiting
                   (elfeed-update))))
  )
  ;; Load Feeds and Feed Settings  
  (load (concat pet/dotfiles-emacsconfig-dir
                "EmacsRSSFeed.el"))
#+end_src

** Elfeed-Score

~Elfeed-Score~ is a ~package~ that applies [[https://www.gnu.org/software/emacs/manual/html_node/gnus/Scoring.html#Scoring][Gnu-Style Scoring]] to [[id:211d12c6-29db-4550-bd06-ef6f8b32640c][Elfeed]]

#+begin_src emacs-lisp
  ;; Load Elfeed Score
  (use-package elfeed-score
    :config
    (progn
      (elfeed-score-enable)
      (define-key elfeed-search-mode-map "="
                  elfeed-score-map))
    (setq elfeed-search-print-entry-function
          #'elfeed-score-print-entry)
    (setq elfeed-score-serde-score-file
          (concat pet/dotfiles-emacsconfig-dir
           "elfeed.score"))
    (setq elfeed-score-rule-stats-file
          (concat pet/dotfiles-emacsconfig-dir
                  "elfeed.stats")))
#+end_src

* Org Mode

#+begin_src emacs-lisp
  (use-package org
    :bind (("C-c l" . org-store-link))
    :config
    (setq org-ellipsis " ▾")

    (setq org-directory (convert-standard-filename "~/Org"))
    (setq org-agenda-start-with-log-mode t)
    (setq org-log-done 'time)
    (setq org-log-into-drawer t)

    ;; setup inline previewing of latex fragments
    (setq org-latex-create-formula-image-program 'imagemagick)

    (setq org-agenda-files
          '("~/Org/journal"
            "~/Org/personal-tasks.org"
            "~/Org/personal-mail.org"
            "~/Org/personal-chores.org"))

    )
  #+end_src
  
** Org-Capture

#+begin_src emacs-lisp

  ;; Org Capture helper Function
  (defun pet/create-documents-file ()
    "Create an org file in ~/Org/."
    (interactive)
    (let ((name (read-string "Filename: ")))
      (expand-file-name
       (format "%s.org" name))))

  ;; Org-Capture
  (use-package org-capture
    :straight nil
    :config
     (setq org-capture-templates
           ;; Acronym captures
           `(("a" "Acronyms")

             ("ag" "General Acronyms")
             ("agg" "General Acronyms - General" table-line
              (file+olp "~/Org/acronyms.org" "General"
                        "General")
              "| %^{ACRONYM} | %^{DEFINITION} | %^{DESCRIPTION}|")
             ("agt" "General Acronyms - Terminology" table-line
              (file+olp "~/Org/acronyms.org" "General"
                        "Terminology")
              "| %^{ACRONYM} | %^{DEFINITION} | %^{DESCRIPTION}|")

             ("as" "Scientific Acronyms")
             ("ase" "Scientific Acronyms - Economy" table-line
              (file+olp "~/Org/acronyms.org" "Science"
                        "Economy")
              "| %^{ACRONYM} | %^{DEFINITION} | %^{DESCRIPTION}|")
             ("asg" "Scientific Acronyms - General" table-line
              (file+olp "~/Org/acronyms.org" "Science"
                        "General")
              "| %^{ACRONYM} | %^{DEFINITION} | %^{DESCRIPTION}|")
             ("asm" "Scientific Acronyms - Maths" table-line
              (file+olp "~/Org/acronyms.org" "Science"
                        "Maths")
              "| %^{ACRONYM} | %^{DEFINITION} | %^{DESCRIPTION}|")
             ("asp" "Scientific Acronyms - Physics" table-line
              (file+olp "~/Org/acronyms.org" "Science"
                        "Physics")
              "| %^{ACRONYM} | %^{DEFINITION} | %^{DESCRIPTION}|")

             ("ai" "IT related Acronyms")
             ("aic" "IT related Acronyms - Encryption" table-line
              (file+olp "~/Org/acronyms.org" "IT"
                        "Encryption")
              "| %^{ACRONYM} | %^{DEFINITION} | %^{DESCRIPTION} |")
             ("aim" "IT related Acronyms - Mail" table-line
              (file+olp "~/Org/acronyms.org" "IT"
                        "Mail")
              "| %^{ACRONYM} | %^{DEFINITION} | %^{DESCRIPTION} |")
             ("aie" "IT related Acronyms - Emacs" table-line
              (file+olp "~/Org/acronyms.org" "IT"
                        "Emacs")
              "| %^{ACRONYM} | %^{DEFINITION} | %^{DESCRIPTION} |")
             ("aig" "IT related Acronyms - General" table-line
              (file+olp "~/Org/acronyms.org" "IT"
                        "General")
              "| %^{ACRONYM} | %^{DEFINITION} | %^{DESCRIPTION} |")
             ("aii" "IT related Acronyms - Internet" table-line
              (file+olp "~/Org/acronyms.org" "IT"
                        "Internet")
              "| %^{ACRONYM} | %^{DEFINITION} | %^{DESCRIPTION} |")
             ("ail" "IT related Acronyms - LaTeX" table-line
              (file+olp "~/Org/acronyms.org" "IT"
                        "LaTeX")
              "| %^{ACRONYM} | %^{DEFINITION} | %^{DESCRIPTION} |")
             ("ain" "IT related Acronyms - Networks" table-line
              (file+olp "~/Org/acronyms.org" "IT"
                        "Networks")
              "| %^{ACRONYM} | %^{DEFINITION} | %^{DESCRIPTION} |")
             ("aip" "IT related Acronyms - Programming" table-line
              (file+olp "~/Org/acronyms.org" "IT"
                        "Programming")
              "| %^{ACRONYM} | %^{DEFINITION} | %^{DESCRIPTION} |")
             ("aiu" "IT related Acronyms - Encoding" table-line
              (file+olp "~/Org/acronyms.org" "IT"
                        "Encoding")
              "| %^{ACRONYM} | %^{DEFINITION} | %^{DESCRIPTION} |")  


             ;; Documents
             ("d" "Documents")
             ("dl" "Letter")
             ("dlf" "Letter Form" plain (file pet/create-documents-file)
              "%[~/.dotfiles/00_OrgFiles/Templates/Capture-LetterTemp.org]"
              :if-new (file "${slug}.org" "#+TITLE: ${title}\n")
              :unnarrowed t
              )
             ("dlh" "Letter Home" plain (file pet/create-documents-file)
              "%[~/Templates/X1_Emacs_Templates/Capture-LetterTemp-Filled-Home-Real.org]"
              :if-new (file "${slug}.org" "#+TITLE: ${title}\n")
              :unnarrowed t
              )


             ;; Email captures
             ("e" "Email")
             ("em" "Make email note" entry
              (file+headline "~/Org/personal-tasks.org" "Mail correspondence")
              ,(concat "* TODO [#A] %:subject :mail:\n"
                       "SCHEDULED: %t\n:"
                       "PROPERTIES:\n:CONTEXT: %a\n:END:\n\n"
                       "%i%?"))
             ("ef" "Follow Up" entry (file+olp "~/Org/personal-mail.org" "Follow Up")
              "* TODO Follow up with %:fromname on %a\nSCHEDULED:%t\nDEADLINE: %(org-insert-time-stamp (org-read-date nil t \"+2d\"))\n\n%i \n\n" :immediate-finish t)
             ("er" "Read Later" entry (file+olp "~/Org/personal-mail.org" "Read Later")
              "* TODO Read %:subject %a\nSCHEDULED:%t\nDEADLINE: %(org-insert-time-stamp (org-read-date nil t \"+2d\"))\n\n%i \n\n" :immediate-finish t)


             ;; Journal captures
             ("j" "Journal Entries")
             ("jj" "Journal" entry
              (file+olp+datetree "~/Org/journal/journal.org")
              "\n* %<%I:%M %p> - Journal :journal:\n\n%?\n\n"
              ;; ,(dw/read-file-as-string "~/Notes/Templates/Daily.org")
              :clock-in :clock-resume
              :empty-lines 1)
             ("jm" "Meeting" entry
              (file+olp+datetree "~/Org/journal/journal.org")
              "* %<%I:%M %p> - %a :meetings:\n\n%?\n\n"
              :clock-in :clock-resume
              :empty-lines 1)


             ;; Checklist captures
             ("l" "Lists")

             ("ls" "Shopping List")
             ("lsp" "Permanent & Long Lasting")
             ("lspw" "Living" checkitem
              (file+olp "~/Org/lists-shopping.org" "TODO = Permanentgüter =" "TODO = Wohnung =")
              "%^{Itemname}")
             ("lspd" "Technology" checkitem
              (file+olp "~/Org/lists-shopping.org" "TODO = Permanentgüter =" "TODO = Technik =")
              "%^{Itemname}")
             ("lspdc" "Computer" checkitem
              (file+olp "~/Org/lists-shopping.org" "TODO = Permanentgüter =" "TODO = Wohnung =" "TODO = Computer =")
              "%^{Itemname}")
             ("lspdh" "Appliances" checkitem
              (file+olp "~/Org/lists-shopping.org" "TODO = Permanentgüter =" "TODO = Wohnung =" "TODO = Haushaltsgeräte =")
              "%^{Itemname}")
             ("lspt" "Transport" checkitem
              (file+olp "~/Org/lists-shopping.org" "TODO = Permanentgüter =" "TODO = Transport =")
              "%^{Itemname}")
             ("lsv" "Consumables & Usables")
             ("lsvb" "Office Supplies" checkitem
              (file+olp "~/Org/lists-shopping.org" "TODO = Verbrauchsgüter =" "TODO = Büromaterial =")
              "%^{Itemname}")
             ("lsvl" "Groceries" checkitem
              (file+olp "~/Org/lists-shopping.org" "TODO = Verbrauchsgüter =" "TODO = Lebensmittel =")
              "%^{Itemname}")
             ("lsvr" "Cleaning Supplies" checkitem
              (file+olp "~/Org/lists-shopping.org" "TODO = Verbrauchsgüter =" "TODO = Reinigungs- und Pflegemittel =")
              "%^{Itemname}")

             ("ll" "Literature")
             ("lls" "Scientific Literature")
             ("llsb" "Biology" checkitem
              (file+olp "~/Org/lists-literature.org" "= Sachbücher =" "== Philosophie und Soziologie ==") "[ ] %^{Author} - %^{Title}")
             ("llsc" "Chemistry" checkitem
              (file+olp "~/Org/lists-literature.org" "= Sachbücher =" "== Chemie ==") "[ ] %^{Author} - %^{Title}")
             ("llse" "Politics, Economy and Ecology" checkitem
              (file+olp "~/Org/lists-literature.org" "= Sachbücher =" "== Politik, Ökonomie und Ökologie ==") "[ ] %^{Author} - %^{Title}")
             ("llsg" "History" checkitem
              (file+olp "~/Org/lists-literature.org" "= Sachbücher =" "== History ==") "[ ] %^{Author} - %^{Title}")
             ("llsh" "Medicine and Health" checkitem
              (file+olp "~/Org/lists-literature.org" "= Sachbücher =" "== Medizin ==") "[ ] %^{Author} - %^{Title}")
             ("llsi" "IT" checkitem
              (file+olp "~/Org/lists-literature.org" "= Sachbücher =" "== Informatik, Data-Science und AI ==") "[ ] %^{Author} - %^{Title}")
             ("llsm" "Maths" checkitem
              (file+olp "~/Org/lists-literature.org" "= Sachbücher =" "== Mathematik ==") "[ ] %^{Author} - %^{Title}")
             ("llsp" "Physics" checkitem
              (file+olp "~/Org/lists-literature.org" "= Sachbücher =" "== Physik ==") "[ ] %^{Author} - %^{Title}")
             ("llss" "Philosophy and Sociology" checkitem
              (file+olp "~/Org/lists-literature.org" "= Sachbücher =" "== Philosophie und Soziologie ==") "[ ] %^{Author} - %^{Title}")
             ("llst" "Technology" checkitem
              (file+olp "~/Org/lists-literature.org" "= Sachbücher =" "== Technik ==") "[ ] %^{Author} - %^{Title}")
             ("llsl" "Languages" checkitem
              (file+olp "~/Org/lists-literature.org" "= Sachbücher =" "== Sprachen ==") "[ ] %^{Author} - %^{Title}")
             ("llsz" "Psychology" checkitem
              (file+olp "~/Org/lists-literature.org" "= Sachbücher =" "== Psychologie ==") "[ ] %^{Author} - %^{Title}")

             ("llr" "Novels" checkitem
              (file+olp "~/Org/lists-literature.org" "= Romane =") "[ ] %^{Author} - %^{Title}")
             ("llrk" "Classics" checkitem
              (file+olp "~/Org/lists-literature.org" "= Romane =" "== Klassiker ==") "[ ] %^{Author} - %^{Title}")


             ("lm" "Music")
             ("lmd" "Downlaodable" checkitem
              (file+olp "~/Org/lists-music.org" "TODO Musik zum Downloaden")
              "[ ] %^{Interpret} - %^{Title}")

             ("q" "Quotes")
             ("qt" "Talks" entry
              (file+olp "~/Org/personal-quotes.org" "Reden und Interviews")
              "* %^{Originator} \n %?")
             ("ql" "Literature" entry
              (file+olp "~/Org/personal-quotes.org" "Literatur")
              "* %^{Originator} \n %?")


             ("t" "Tasks / Projects")
             ("tt" "TODO Task" entry (file+olp "~/Org/personal-tasks.org" "Inbox")
              "* TODO %?\n  %U\n  %a\n  %i" :empty-lines 1)  
             ("tb" "Basic task for future review" entry
              (file+headline "~/Org/personal-tasks.org" "Inbox")
              ,(concat "* %^{Title}\n"
                       ":PROPERTIES:\n"
                       ":CAPTURED: %U\n"
                       ":END:\n\n"
                       "%i%l"))
             ("ts" "Task with a due date (scheduled)" entry
              (file+headline "~/Org/personal-tasks.org" "Inbox")
              ,(concat "* %^{Scope of task||TODO|STUDY|MEET} %^{Title} %^g\n"
                       "SCHEDULED: %^t\n"
                       ":PROPERTIES:\n:CAPTURED: %U\n:END:\n\n"
                       "%i%?"))
             ("td" "Task with a due date (deadline)" entry
              (file+headline "~/Org/personal-tasks.org" "Inbox")
              ,(concat "* %^{Scope of task||TODO|STUDY|MEET} %^{Title} %^g\n"
                       "DEADLINE: %^t\n"
                       ":PROPERTIES:\n:CAPTURED: %U\n:END:\n\n"
                       "%i%?"))


             ("w" "Workflows")
             ("we" "Checking Email" entry (file+olp+datetree "~/Org/journal/Journal.org")
              "* Checking Email :email:\n\n%?" :clock-in :clock-resume :empty-lines 1)))


    (setq org-capture-templates-contexts
          '(("e" ((in-mode . "notmuch-search-mode")
                  (in-mode . "notmuch-show-mode")
                  (in-mode . "notmuch-tree-mode")
                  (in-mode . "mu4e-headers-mode")))))
    :bind
    ("C-c c" . org-capture))
#+end_src
  
** Org-Mode LaTeX Setup

#+begin_src emacs-lisp
  (with-eval-after-load 'ox-latex
  (add-to-list 'org-latex-classes
               '("org-plain-latex"
                 "\\documentclass{article}
                  \\usepackage{hyperref}
                  \\usepackage{babel}
             [NO-DEFAULT-PACKAGES]
             [PACKAGES]
             [EXTRA]"
                 ("\\section{%s}" . "\\section*{%s}")
                 ("\\subsection{%s}" . "\\subsection*{%s}")
                 ("\\subsubsection{%s}" . "\\subsubsection*{%s}")
                 ("\\paragraph{%s}" . "\\paragraph*{%s}")
                 ("\\subparagraph{%s}" . "\\subparagraph*{%s}")))
  (add-to-list 'org-latex-classes
             '("org-plain-scrlttr2-german"
               "\\documentclass[a4paper, 
                parskip=half,%
                fromalign=right, 
                fromrule=false, 
                11pt, ngerman]{scrlttr2}
                \\usepackage{hyperref}
                \\usepackage{babel}
           [NO-DEFAULT-PACKAGES]
           [PACKAGES]
           [EXTRA]"
               ("\\section{%s}" . "\\section*{%s}")
               ("\\subsection{%s}" . "\\subsection*{%s}")
               ("\\subsubsection{%s}" . "\\subsubsection*{%s}")
               ("\\paragraph{%s}" . "\\paragraph*{%s}")
               ("\\subparagraph{%s}" . "\\subparagraph*{%s}")))

  ;; Bigger LaTeX Previews
  (plist-put org-format-latex-options :scale 1.5)
  ;; Load language packages for pdflatex of lualatex / xelatex compilers
  ;; (add-to-list 'org-latex-packages-alist
  ;;              '("AUTO" "babel" t ("pdflatex")))
  ;; (add-to-list 'org-latex-packages-alist
  ;;              '("AUTO" "polyglossia" t ("xelatex" "lualatex")))
  )
#+end_src

  
** Org Roam

  #+begin_src emacs-lisp
    (use-package org-roam
      :init
      (setq org-roam-v2-ack t)
      :custom
      (org-roam-directory "~/Org")
      (org-roam-dailies-directory "journal/")

      (org-roam-completion-everywhere t)

      :bind (("C-c n l" . org-roam-buffer-toggle)
             ("C-c n f" . org-roam-node-find)
             ("C-c n i" . org-roam-node-insert)
             ("C-c n I" . org-roam-node-insert-immediate)
             :map org-mode-map
             ("C-M-i"    . completion-at-point)
             :map org-roam-dailies-map
             ("Y" . org-roam-dailies-capture-yesterday)
             ("T" . org-roam-dailies-capture-tomorrow))
      :bind-keymap
      ("C-c n d" . org-roam-dailies-map)
      :config
          ;; org roam capture templates
      (setq org-roam-capture-templates
            `(("d" "default" plain
              "%?"
              :if-new (file+head "%<%Y%m%d%H%M%S>-${slug}.org" "#+TITLE: ${title}\n#+DATE: %U\n")
              :unnarrowed t)
              ("l" "programming language" plain
               "* Characteristics\n\n- Family: %?\n- Inspired by: \n\n* Reference:\n\n"
               :if-new (file+head "${slug}.org" "#+TITLE: ${title}\n")
               :unnarrowed t)  
              ("b" "book notes" plain (file "~/.dotfiles/00_OrgFiles/Templates/RoamCapture-BookNoteTemp.org")
               :if-new (file+head "${slug}.org" "#+TITLE: ${title}\n")
               :unnarrowed t)
              ("p" "project" plain "* Goals\n\n%?\n\n* Tasks\n\n** TODO Add initial tasks\n\n* Dates\n\n"
               :if-new (file+head "${slug}.org" "#+TITLE: ${title}\n#+filetags: Project")
               :unnarrowed t)
              ))


      ;; dailies capture template
      (setq org-roam-dailies-capture-templates
            `(("d" "default" entry "* %<%I:%M %p>: %?"
               :if-new (file+head "%<%Y-%m-%d>.org" "#+TITLE: %<%Y-%m-%d>\n"))))

      (org-roam-setup)
      (require 'org-roam-dailies) ;; Ensure the keymap is available
      (org-roam-db-autosync-mode))
  #+end_src

*** Org Roam Helper Functions

#+begin_src emacs-lisp
(defun org-roam-node-insert-immediate (arg &rest args)
  (interactive "P")
  (let ((args (push arg args))
        (org-roam-capture-templates (list (append (car org-roam-capture-templates)
                                                  '(:immediate-finish t)))))
    (apply #'org-roam-node-insert args)))
#+end_src

** Org-Drill

~Org-Drill~ is a ~spaced repetition program~ (like ~Anki~)  built to work with [[id:3cf0fa83-18b3-4206-a109-f4606a94b8c1][Emacs]]

The ~Hint-Separator~ is set to =||= from =|=
The ~Left and Right Clozer~-delimiters are set to =<[= and =]>= respectively from the default =[= and =]=.
This is done to better fit in with the [[id:62eadd2d-023b-4d03-8eb0-527528f6e224][LaTeX]]-~Syntax~ used in some notes.
You can find an example file here: [[id:a5bb4b50-f15b-49c5-b2cb-bc80a65c14d6][spanish.org]]

#+begin_src emacs-lisp
    (use-package org-drill
      :config
      (progn
        (add-to-list 'org-modules 'org-drill)
        (setq org-drill-add-random-noise-to-intervals-p t)
        (setq org-drill-hint-separator "||")
        (setq org-drill-left-cloze-delimiter "<[")
        (setq org-drill-right-cloze-delimiter "]>")
        (setq org-drill-learn-fraction 1.0))
      )
#+end_src

* Automatically Tangle Files

** Config File

#+begin_src emacs-lisp
  ;; Setup Automatic Tangling of Files
  
  ;; Automatically tangle config file
  ;; Helper Function to that does the tangling
  (defun pet/org-babel-tangle-config ()
    (when (string-equal
           (buffer-file-name)
           (concat pet/dotfiles-dir
                   "000_OrgFiles/EmacsTestConfig.org"))

      ;; Dynamic scoping to the rescue
      (let ((org-confirm-babel-evaluate nil))
        (org-babel-tangle))))

  ;; This hook automatically evaluates the helper
  ;; function after saving the buffer
  (add-hook 'org-mode-hook
            (lambda ()
              (add-hook
               'after-save-hook
               #'pet/org-babel-tangle-config)))
#+end_src

** Test Config File

#+begin_src emacs-lisp
  ;; Automatically tangle test config file
  ;; Helper Function to that does the tangling
  (defun pet/org-babel-tangle-testconfig ()
    (when (string-equal
           (buffer-file-name)
           (concat pet/dotfiles-dir
                   "000_OrgFiles/EmacsTestConfig.org"))
        (org-babel-tangle)))

  ;; This hook automatically evaluates the helper
  ;; function after saving the buffer
  (add-hook 'org-mode-hook
            (lambda ()
              (add-hook
               'after-save-hook
               #'pet/org-babel-tangle-testconfig)))
#+end_src

** RSS Feeds File

#+begin_src emacs-lisp
  ;; Setup Automatic Tangling of Files

  ;; Automatically tangle config file
  ;; Helper Function to that does the tangling
  (defun pet/org-babel-tangle-feeds ()
    (when (string-equal
           (buffer-file-name)
           (concat pet/dotfiles-dir
                   "000_OrgFiles/EmacsRSSFeed.org"))

      ;; Dynamic scoping to the rescue
      (let ((org-confirm-babel-evaluate nil))
        (org-babel-tangle))))

  ;; This hook automatically evaluates the helper
  ;; function after saving the buffer
  (add-hook 'org-mode-hook
            (lambda ()
              (add-hook
               'after-save-hook
               #'pet/org-babel-tangle-feeds)))
#+end_src
